
door_locker_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  000020ac  00002140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008000bc  008000bc  0000219c  2**0
                  ALLOC
  3 .stab         00001e6c  00000000  00000000  0000219c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012f7  00000000  00000000  00004008  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000052ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000543f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000055af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000071f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000080e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008e90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000927d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009a4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <__vector_3>
      10:	0c 94 bf 0c 	jmp	0x197e	; 0x197e <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <__vector_8>
      24:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 26 0c 	jmp	0x184c	; 0x184c <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac eb       	ldi	r26, 0xBC	; 188
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3c       	cpi	r26, 0xCA	; 202
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 39 10 	jmp	0x2072	; 0x2072 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 45 10 	jmp	0x208a	; 0x208a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 45 10 	jmp	0x208a	; 0x208a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 39 10 	jmp	0x2072	; 0x2072 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 45 10 	jmp	0x208a	; 0x208a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 45 10 	jmp	0x208a	; 0x208a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 45 10 	jmp	0x208a	; 0x208a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 49 10 	jmp	0x2092	; 0x2092 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void buzzer(void);
uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data);
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data);

int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	cc 54       	subi	r28, 0x4C	; 76
     b50:	d0 40       	sbci	r29, 0x00	; 0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	cd bf       	out	0x3d, r28	; 61


	uint16 mem_address=0x0311;
     b5c:	81 e1       	ldi	r24, 0x11	; 17
     b5e:	93 e0       	ldi	r25, 0x03	; 3
     b60:	9c 83       	std	Y+4, r25	; 0x04
     b62:	8b 83       	std	Y+3, r24	; 0x03
    uint8 count=0;
     b64:	1a 82       	std	Y+2, r1	; 0x02
    uint8 flag=0;
     b66:	19 82       	std	Y+1, r1	; 0x01

	/*configure PD2,PD3 in PORTD as output pins (motor INT1 & INT2 pins)*/
    DDRD|=(1<<PD2)|(1<<PD3);
     b68:	a1 e3       	ldi	r26, 0x31	; 49
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	e1 e3       	ldi	r30, 0x31	; 49
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	8c 60       	ori	r24, 0x0C	; 12
     b74:	8c 93       	st	X, r24

   /*configure PA4 in PORTA as output pin (buzzer pin)*/
    DDRA|=(1<<PA4);
     b76:	aa e3       	ldi	r26, 0x3A	; 58
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	ea e3       	ldi	r30, 0x3A	; 58
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	80 61       	ori	r24, 0x10	; 16
     b82:	8c 93       	st	X, r24

	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
     b84:	af e5       	ldi	r26, 0x5F	; 95
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	ef e5       	ldi	r30, 0x5F	; 95
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	80 68       	ori	r24, 0x80	; 128
     b90:	8c 93       	st	X, r24

	/* Initialize both the UART and TWI driver */
	USART_ConfigType USART_Config={DISABLE,ONE_BIT,EGIHT,standard_6} ;
     b92:	ce 01       	movw	r24, r28
     b94:	05 96       	adiw	r24, 0x05	; 5
     b96:	98 ab       	std	Y+48, r25	; 0x30
     b98:	8f a7       	std	Y+47, r24	; 0x2f
     b9a:	eb e8       	ldi	r30, 0x8B	; 139
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	fa ab       	std	Y+50, r31	; 0x32
     ba0:	e9 ab       	std	Y+49, r30	; 0x31
     ba2:	f7 e0       	ldi	r31, 0x07	; 7
     ba4:	fb ab       	std	Y+51, r31	; 0x33
     ba6:	e9 a9       	ldd	r30, Y+49	; 0x31
     ba8:	fa a9       	ldd	r31, Y+50	; 0x32
     baa:	00 80       	ld	r0, Z
     bac:	89 a9       	ldd	r24, Y+49	; 0x31
     bae:	9a a9       	ldd	r25, Y+50	; 0x32
     bb0:	01 96       	adiw	r24, 0x01	; 1
     bb2:	9a ab       	std	Y+50, r25	; 0x32
     bb4:	89 ab       	std	Y+49, r24	; 0x31
     bb6:	ef a5       	ldd	r30, Y+47	; 0x2f
     bb8:	f8 a9       	ldd	r31, Y+48	; 0x30
     bba:	00 82       	st	Z, r0
     bbc:	8f a5       	ldd	r24, Y+47	; 0x2f
     bbe:	98 a9       	ldd	r25, Y+48	; 0x30
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	98 ab       	std	Y+48, r25	; 0x30
     bc4:	8f a7       	std	Y+47, r24	; 0x2f
     bc6:	9b a9       	ldd	r25, Y+51	; 0x33
     bc8:	91 50       	subi	r25, 0x01	; 1
     bca:	9b ab       	std	Y+51, r25	; 0x33
     bcc:	eb a9       	ldd	r30, Y+51	; 0x33
     bce:	ee 23       	and	r30, r30
     bd0:	51 f7       	brne	.-44     	; 0xba6 <main+0x60>
	UART_init(&USART_Config);
     bd2:	ce 01       	movw	r24, r28
     bd4:	05 96       	adiw	r24, 0x05	; 5
     bd6:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <UART_init>

	I2C_ConfigType i2c_Config={TWPS_ZERO,ONE,0x01,FAST_MODE} ;
     bda:	ce 01       	movw	r24, r28
     bdc:	0c 96       	adiw	r24, 0x0c	; 12
     bde:	9d ab       	std	Y+53, r25	; 0x35
     be0:	8c ab       	std	Y+52, r24	; 0x34
     be2:	e4 e8       	ldi	r30, 0x84	; 132
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	ff ab       	std	Y+55, r31	; 0x37
     be8:	ee ab       	std	Y+54, r30	; 0x36
     bea:	f7 e0       	ldi	r31, 0x07	; 7
     bec:	f8 af       	std	Y+56, r31	; 0x38
     bee:	ee a9       	ldd	r30, Y+54	; 0x36
     bf0:	ff a9       	ldd	r31, Y+55	; 0x37
     bf2:	00 80       	ld	r0, Z
     bf4:	8e a9       	ldd	r24, Y+54	; 0x36
     bf6:	9f a9       	ldd	r25, Y+55	; 0x37
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	9f ab       	std	Y+55, r25	; 0x37
     bfc:	8e ab       	std	Y+54, r24	; 0x36
     bfe:	ec a9       	ldd	r30, Y+52	; 0x34
     c00:	fd a9       	ldd	r31, Y+53	; 0x35
     c02:	00 82       	st	Z, r0
     c04:	8c a9       	ldd	r24, Y+52	; 0x34
     c06:	9d a9       	ldd	r25, Y+53	; 0x35
     c08:	01 96       	adiw	r24, 0x01	; 1
     c0a:	9d ab       	std	Y+53, r25	; 0x35
     c0c:	8c ab       	std	Y+52, r24	; 0x34
     c0e:	98 ad       	ldd	r25, Y+56	; 0x38
     c10:	91 50       	subi	r25, 0x01	; 1
     c12:	98 af       	std	Y+56, r25	; 0x38
     c14:	e8 ad       	ldd	r30, Y+56	; 0x38
     c16:	ee 23       	and	r30, r30
     c18:	51 f7       	brne	.-44     	; 0xbee <main+0xa8>
	TWI_init(&i2c_Config);
     c1a:	ce 01       	movw	r24, r28
     c1c:	0c 96       	adiw	r24, 0x0c	; 12
     c1e:	0e 94 28 0b 	call	0x1650	; 0x1650 <TWI_init>


	while(UART_recieveByte() != M1_READY){} // wait until MC1 is ready
     c22:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <UART_recieveByte>
     c26:	80 31       	cpi	r24, 0x10	; 16
     c28:	e1 f7       	brne	.-8      	; 0xc22 <main+0xdc>
	 UART_sendByte(NEW_PASSWORD);
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <UART_sendByte>
	 password(mem_address);
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	9c 81       	ldd	r25, Y+4	; 0x04
     c34:	0e 94 2d 08 	call	0x105a	; 0x105a <password>
	 while(1)
	{


		 /* step2 (getting password process is done and we have a saved password in eeprom*/
		 UART_sendByte(OPTIONS_MENU);
     c38:	86 e0       	ldi	r24, 0x06	; 6
     c3a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <UART_sendByte>
		 pressed_key=UART_recieveByte();
     c3e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <UART_recieveByte>
     c42:	80 93 c2 00 	sts	0x00C2, r24

		 if(pressed_key == '+')
     c46:	80 91 c2 00 	lds	r24, 0x00C2
     c4a:	8b 32       	cpi	r24, 0x2B	; 43
     c4c:	09 f0       	breq	.+2      	; 0xc50 <main+0x10a>
     c4e:	71 c0       	rjmp	.+226    	; 0xd32 <main+0x1ec>
		 {
			 /*check for pass*/
			 UART_sendByte(CURRENT_PASSWORD);
     c50:	82 e0       	ldi	r24, 0x02	; 2
     c52:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <UART_sendByte>
			 flag=check_pass(mem_address);
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	9c 81       	ldd	r25, Y+4	; 0x04
     c5a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <check_pass>
     c5e:	89 83       	std	Y+1, r24	; 0x01

			 /* if match (go to step 1) */

			 if (flag==0)
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	88 23       	and	r24, r24
     c64:	41 f4       	brne	.+16     	; 0xc76 <main+0x130>
			 {

				 UART_sendByte(NEW_PASSWORD);
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <UART_sendByte>
				 password(mem_address);
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	9c 81       	ldd	r25, Y+4	; 0x04
     c70:	0e 94 2d 08 	call	0x105a	; 0x105a <password>
     c74:	e1 cf       	rjmp	.-62     	; 0xc38 <main+0xf2>
			 /* if not match
			      check for mismatch three times then trigger buzzer for 1 minute and error message
			  */
			 else
			 {
				 count=0;
     c76:	1a 82       	std	Y+2, r1	; 0x02
				 do
				 {
					 UART_sendByte(CURRENT_PASSWORD);
     c78:	82 e0       	ldi	r24, 0x02	; 2
     c7a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <UART_sendByte>
					 flag=check_pass(mem_address);
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	9c 81       	ldd	r25, Y+4	; 0x04
     c82:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <check_pass>
     c86:	89 83       	std	Y+1, r24	; 0x01
					 count++;
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	8f 5f       	subi	r24, 0xFF	; 255
     c8c:	8a 83       	std	Y+2, r24	; 0x02
				 }while (!((flag ==0) || (count ==3)));
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	88 23       	and	r24, r24
     c92:	19 f0       	breq	.+6      	; 0xc9a <main+0x154>
     c94:	8a 81       	ldd	r24, Y+2	; 0x02
     c96:	83 30       	cpi	r24, 0x03	; 3
     c98:	79 f7       	brne	.-34     	; 0xc78 <main+0x132>

				 if (flag==0)
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	88 23       	and	r24, r24
     c9e:	41 f4       	brne	.+16     	; 0xcb0 <main+0x16a>
				 {
					 UART_sendByte(NEW_PASSWORD);
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <UART_sendByte>
					 password(mem_address);
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	9c 81       	ldd	r25, Y+4	; 0x04
     caa:	0e 94 2d 08 	call	0x105a	; 0x105a <password>
     cae:	c4 cf       	rjmp	.-120    	; 0xc38 <main+0xf2>

				 }

				 else
				 {
					 UART_sendByte(PASSWORDS_NOT_MATCHED);
     cb0:	84 e0       	ldi	r24, 0x04	; 4
     cb2:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <UART_sendByte>

					 /* trigger buzzer for 1 minute*/
					 timer_ConfigType timer_Config={TIMER1,F_CPU_1024,CTC,0,62536} ;
     cb6:	ce 01       	movw	r24, r28
     cb8:	43 96       	adiw	r24, 0x13	; 19
     cba:	9a af       	std	Y+58, r25	; 0x3a
     cbc:	89 af       	std	Y+57, r24	; 0x39
     cbe:	ed e7       	ldi	r30, 0x7D	; 125
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	fc af       	std	Y+60, r31	; 0x3c
     cc4:	eb af       	std	Y+59, r30	; 0x3b
     cc6:	f7 e0       	ldi	r31, 0x07	; 7
     cc8:	fd af       	std	Y+61, r31	; 0x3d
     cca:	eb ad       	ldd	r30, Y+59	; 0x3b
     ccc:	fc ad       	ldd	r31, Y+60	; 0x3c
     cce:	00 80       	ld	r0, Z
     cd0:	8b ad       	ldd	r24, Y+59	; 0x3b
     cd2:	9c ad       	ldd	r25, Y+60	; 0x3c
     cd4:	01 96       	adiw	r24, 0x01	; 1
     cd6:	9c af       	std	Y+60, r25	; 0x3c
     cd8:	8b af       	std	Y+59, r24	; 0x3b
     cda:	e9 ad       	ldd	r30, Y+57	; 0x39
     cdc:	fa ad       	ldd	r31, Y+58	; 0x3a
     cde:	00 82       	st	Z, r0
     ce0:	89 ad       	ldd	r24, Y+57	; 0x39
     ce2:	9a ad       	ldd	r25, Y+58	; 0x3a
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	9a af       	std	Y+58, r25	; 0x3a
     ce8:	89 af       	std	Y+57, r24	; 0x39
     cea:	9d ad       	ldd	r25, Y+61	; 0x3d
     cec:	91 50       	subi	r25, 0x01	; 1
     cee:	9d af       	std	Y+61, r25	; 0x3d
     cf0:	ed ad       	ldd	r30, Y+61	; 0x3d
     cf2:	ee 23       	and	r30, r30
     cf4:	51 f7       	brne	.-44     	; 0xcca <main+0x184>
					 timer_init(&timer_Config);
     cf6:	ce 01       	movw	r24, r28
     cf8:	43 96       	adiw	r24, 0x13	; 19
     cfa:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <timer_init>
					 timer1_setCallBack(buzzer);
     cfe:	80 e1       	ldi	r24, 0x10	; 16
     d00:	9a e0       	ldi	r25, 0x0A	; 10
     d02:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <timer1_setCallBack>
					 buzzer_flag=0;
     d06:	10 92 c1 00 	sts	0x00C1, r1
     d0a:	07 c0       	rjmp	.+14     	; 0xd1a <main+0x1d4>
					 while(buzzer_flag==0)
					 {
						 PORTA|=(1<<PA4);
     d0c:	ab e3       	ldi	r26, 0x3B	; 59
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	eb e3       	ldi	r30, 0x3B	; 59
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	80 61       	ori	r24, 0x10	; 16
     d18:	8c 93       	st	X, r24
					 /* trigger buzzer for 1 minute*/
					 timer_ConfigType timer_Config={TIMER1,F_CPU_1024,CTC,0,62536} ;
					 timer_init(&timer_Config);
					 timer1_setCallBack(buzzer);
					 buzzer_flag=0;
					 while(buzzer_flag==0)
     d1a:	80 91 c1 00 	lds	r24, 0x00C1
     d1e:	88 23       	and	r24, r24
     d20:	a9 f3       	breq	.-22     	; 0xd0c <main+0x1c6>
					 {
						 PORTA|=(1<<PA4);
					 }
					 PORTA &=(~(1<<PA4));
     d22:	ab e3       	ldi	r26, 0x3B	; 59
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	eb e3       	ldi	r30, 0x3B	; 59
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	8f 7e       	andi	r24, 0xEF	; 239
     d2e:	8c 93       	st	X, r24
     d30:	83 cf       	rjmp	.-250    	; 0xc38 <main+0xf2>

				 }
			 }

		 }
		 else if (pressed_key =='-')
     d32:	80 91 c2 00 	lds	r24, 0x00C2
     d36:	8d 32       	cpi	r24, 0x2D	; 45
     d38:	09 f0       	breq	.+2      	; 0xd3c <main+0x1f6>
     d3a:	7e cf       	rjmp	.-260    	; 0xc38 <main+0xf2>
		 {
			 /* check for pass*/
			 UART_sendByte(CURRENT_PASSWORD);
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <UART_sendByte>
			 flag=check_pass(mem_address);
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	9c 81       	ldd	r25, Y+4	; 0x04
     d46:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <check_pass>
     d4a:	89 83       	std	Y+1, r24	; 0x01
					 -rotate motor clockwise for 15 secs
					 -stop motor for 3 secs
					 -rotate motor anti clock wise for 15 secs
			  */

			 if (flag==0)
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	88 23       	and	r24, r24
     d50:	09 f0       	breq	.+2      	; 0xd54 <main+0x20e>
     d52:	86 c0       	rjmp	.+268    	; 0xe60 <main+0x31a>
			 {

				 timer_ConfigType timer_Config={TIMER1,F_CPU_1024,CTC,0,62536} ;
     d54:	ce 01       	movw	r24, r28
     d56:	4a 96       	adiw	r24, 0x1a	; 26
     d58:	9f af       	std	Y+63, r25	; 0x3f
     d5a:	8e af       	std	Y+62, r24	; 0x3e
     d5c:	e6 e7       	ldi	r30, 0x76	; 118
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	22 96       	adiw	r28, 0x02	; 2
     d62:	ff af       	std	Y+63, r31	; 0x3f
     d64:	ee af       	std	Y+62, r30	; 0x3e
     d66:	22 97       	sbiw	r28, 0x02	; 2
     d68:	f7 e0       	ldi	r31, 0x07	; 7
     d6a:	23 96       	adiw	r28, 0x03	; 3
     d6c:	ff af       	std	Y+63, r31	; 0x3f
     d6e:	23 97       	sbiw	r28, 0x03	; 3
     d70:	22 96       	adiw	r28, 0x02	; 2
     d72:	ee ad       	ldd	r30, Y+62	; 0x3e
     d74:	ff ad       	ldd	r31, Y+63	; 0x3f
     d76:	22 97       	sbiw	r28, 0x02	; 2
     d78:	00 80       	ld	r0, Z
     d7a:	22 96       	adiw	r28, 0x02	; 2
     d7c:	8e ad       	ldd	r24, Y+62	; 0x3e
     d7e:	9f ad       	ldd	r25, Y+63	; 0x3f
     d80:	22 97       	sbiw	r28, 0x02	; 2
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	22 96       	adiw	r28, 0x02	; 2
     d86:	9f af       	std	Y+63, r25	; 0x3f
     d88:	8e af       	std	Y+62, r24	; 0x3e
     d8a:	22 97       	sbiw	r28, 0x02	; 2
     d8c:	ee ad       	ldd	r30, Y+62	; 0x3e
     d8e:	ff ad       	ldd	r31, Y+63	; 0x3f
     d90:	00 82       	st	Z, r0
     d92:	8e ad       	ldd	r24, Y+62	; 0x3e
     d94:	9f ad       	ldd	r25, Y+63	; 0x3f
     d96:	01 96       	adiw	r24, 0x01	; 1
     d98:	9f af       	std	Y+63, r25	; 0x3f
     d9a:	8e af       	std	Y+62, r24	; 0x3e
     d9c:	23 96       	adiw	r28, 0x03	; 3
     d9e:	9f ad       	ldd	r25, Y+63	; 0x3f
     da0:	23 97       	sbiw	r28, 0x03	; 3
     da2:	91 50       	subi	r25, 0x01	; 1
     da4:	23 96       	adiw	r28, 0x03	; 3
     da6:	9f af       	std	Y+63, r25	; 0x3f
     da8:	23 97       	sbiw	r28, 0x03	; 3
     daa:	23 96       	adiw	r28, 0x03	; 3
     dac:	ef ad       	ldd	r30, Y+63	; 0x3f
     dae:	23 97       	sbiw	r28, 0x03	; 3
     db0:	ee 23       	and	r30, r30
     db2:	f1 f6       	brne	.-68     	; 0xd70 <main+0x22a>
				 timer_init(&timer_Config);
     db4:	ce 01       	movw	r24, r28
     db6:	4a 96       	adiw	r24, 0x1a	; 26
     db8:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <timer_init>
				 timer1_setCallBack(clockwise);
     dbc:	86 e1       	ldi	r24, 0x16	; 22
     dbe:	99 e0       	ldi	r25, 0x09	; 9
     dc0:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <timer1_setCallBack>
				 flag_Clockwise=0;
     dc4:	10 92 bc 00 	sts	0x00BC, r1
     dc8:	0e c0       	rjmp	.+28     	; 0xde6 <main+0x2a0>
				 while(flag_Clockwise==0)
				 {
					 PORTD&=(~(1<<PD2));
     dca:	a2 e3       	ldi	r26, 0x32	; 50
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e2 e3       	ldi	r30, 0x32	; 50
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	8b 7f       	andi	r24, 0xFB	; 251
     dd6:	8c 93       	st	X, r24
					 PORTD |=(1<<PD3);
     dd8:	a2 e3       	ldi	r26, 0x32	; 50
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e2 e3       	ldi	r30, 0x32	; 50
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	88 60       	ori	r24, 0x08	; 8
     de4:	8c 93       	st	X, r24

				 timer_ConfigType timer_Config={TIMER1,F_CPU_1024,CTC,0,62536} ;
				 timer_init(&timer_Config);
				 timer1_setCallBack(clockwise);
				 flag_Clockwise=0;
				 while(flag_Clockwise==0)
     de6:	80 91 bc 00 	lds	r24, 0x00BC
     dea:	88 23       	and	r24, r24
     dec:	71 f3       	breq	.-36     	; 0xdca <main+0x284>
				 {
					 PORTD&=(~(1<<PD2));
					 PORTD |=(1<<PD3);

				 }
				 flag_stop=0;
     dee:	10 92 c0 00 	sts	0x00C0, r1
     df2:	0e c0       	rjmp	.+28     	; 0xe10 <main+0x2ca>
				 while(flag_stop==0)
				 {
					 PORTD &=(~(1<<PD2));
     df4:	a2 e3       	ldi	r26, 0x32	; 50
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e2 e3       	ldi	r30, 0x32	; 50
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	8b 7f       	andi	r24, 0xFB	; 251
     e00:	8c 93       	st	X, r24
					 PORTD &=(~(1<<PD3));
     e02:	a2 e3       	ldi	r26, 0x32	; 50
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e2 e3       	ldi	r30, 0x32	; 50
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	87 7f       	andi	r24, 0xF7	; 247
     e0e:	8c 93       	st	X, r24
					 PORTD&=(~(1<<PD2));
					 PORTD |=(1<<PD3);

				 }
				 flag_stop=0;
				 while(flag_stop==0)
     e10:	80 91 c0 00 	lds	r24, 0x00C0
     e14:	88 23       	and	r24, r24
     e16:	71 f3       	breq	.-36     	; 0xdf4 <main+0x2ae>
				 {
					 PORTD &=(~(1<<PD2));
					 PORTD &=(~(1<<PD3));

				 }
				 flag_antiClockwise=0;
     e18:	10 92 be 00 	sts	0x00BE, r1
     e1c:	0e c0       	rjmp	.+28     	; 0xe3a <main+0x2f4>
				 while(flag_antiClockwise==0)
				 {
					 PORTD|=(1<<PD2);
     e1e:	a2 e3       	ldi	r26, 0x32	; 50
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e2 e3       	ldi	r30, 0x32	; 50
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	84 60       	ori	r24, 0x04	; 4
     e2a:	8c 93       	st	X, r24
					 PORTD &=(~(1<<PD3));
     e2c:	a2 e3       	ldi	r26, 0x32	; 50
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e2 e3       	ldi	r30, 0x32	; 50
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	87 7f       	andi	r24, 0xF7	; 247
     e38:	8c 93       	st	X, r24
					 PORTD &=(~(1<<PD2));
					 PORTD &=(~(1<<PD3));

				 }
				 flag_antiClockwise=0;
				 while(flag_antiClockwise==0)
     e3a:	80 91 be 00 	lds	r24, 0x00BE
     e3e:	88 23       	and	r24, r24
     e40:	71 f3       	breq	.-36     	; 0xe1e <main+0x2d8>
				 {
					 PORTD|=(1<<PD2);
					 PORTD &=(~(1<<PD3));
				 }

				 PORTD &=(~(1<<PD2));
     e42:	a2 e3       	ldi	r26, 0x32	; 50
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e2 e3       	ldi	r30, 0x32	; 50
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8b 7f       	andi	r24, 0xFB	; 251
     e4e:	8c 93       	st	X, r24
				 PORTD &=(~(1<<PD3));
     e50:	a2 e3       	ldi	r26, 0x32	; 50
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e2 e3       	ldi	r30, 0x32	; 50
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	87 7f       	andi	r24, 0xF7	; 247
     e5c:	8c 93       	st	X, r24
     e5e:	ec ce       	rjmp	.-552    	; 0xc38 <main+0xf2>
				   check for mismatch three times then trigger buzzer for 1 minute and error message
			  */

			 else
			 {
				 count=0;
     e60:	1a 82       	std	Y+2, r1	; 0x02
				 do
				 {
					 UART_sendByte(CURRENT_PASSWORD);
     e62:	82 e0       	ldi	r24, 0x02	; 2
     e64:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <UART_sendByte>
					 flag=check_pass(mem_address);
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	9c 81       	ldd	r25, Y+4	; 0x04
     e6c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <check_pass>
     e70:	89 83       	std	Y+1, r24	; 0x01
					 count++;
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	8f 5f       	subi	r24, 0xFF	; 255
     e76:	8a 83       	std	Y+2, r24	; 0x02
				 }while (!((flag ==0) || (count ==3)));
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	88 23       	and	r24, r24
     e7c:	19 f0       	breq	.+6      	; 0xe84 <main+0x33e>
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	83 30       	cpi	r24, 0x03	; 3
     e82:	79 f7       	brne	.-34     	; 0xe62 <main+0x31c>

				 if (flag==0)
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	88 23       	and	r24, r24
     e88:	09 f0       	breq	.+2      	; 0xe8c <main+0x346>
     e8a:	8e c0       	rjmp	.+284    	; 0xfa8 <main+0x462>
				 {

					 timer_ConfigType timer_Config={TIMER1,F_CPU_1024,CTC,0,62536} ;
     e8c:	ce 01       	movw	r24, r28
     e8e:	81 96       	adiw	r24, 0x21	; 33
     e90:	25 96       	adiw	r28, 0x05	; 5
     e92:	9f af       	std	Y+63, r25	; 0x3f
     e94:	8e af       	std	Y+62, r24	; 0x3e
     e96:	25 97       	sbiw	r28, 0x05	; 5
     e98:	ef e6       	ldi	r30, 0x6F	; 111
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	27 96       	adiw	r28, 0x07	; 7
     e9e:	ff af       	std	Y+63, r31	; 0x3f
     ea0:	ee af       	std	Y+62, r30	; 0x3e
     ea2:	27 97       	sbiw	r28, 0x07	; 7
     ea4:	f7 e0       	ldi	r31, 0x07	; 7
     ea6:	28 96       	adiw	r28, 0x08	; 8
     ea8:	ff af       	std	Y+63, r31	; 0x3f
     eaa:	28 97       	sbiw	r28, 0x08	; 8
     eac:	27 96       	adiw	r28, 0x07	; 7
     eae:	ee ad       	ldd	r30, Y+62	; 0x3e
     eb0:	ff ad       	ldd	r31, Y+63	; 0x3f
     eb2:	27 97       	sbiw	r28, 0x07	; 7
     eb4:	00 80       	ld	r0, Z
     eb6:	27 96       	adiw	r28, 0x07	; 7
     eb8:	8e ad       	ldd	r24, Y+62	; 0x3e
     eba:	9f ad       	ldd	r25, Y+63	; 0x3f
     ebc:	27 97       	sbiw	r28, 0x07	; 7
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	27 96       	adiw	r28, 0x07	; 7
     ec2:	9f af       	std	Y+63, r25	; 0x3f
     ec4:	8e af       	std	Y+62, r24	; 0x3e
     ec6:	27 97       	sbiw	r28, 0x07	; 7
     ec8:	25 96       	adiw	r28, 0x05	; 5
     eca:	ee ad       	ldd	r30, Y+62	; 0x3e
     ecc:	ff ad       	ldd	r31, Y+63	; 0x3f
     ece:	25 97       	sbiw	r28, 0x05	; 5
     ed0:	00 82       	st	Z, r0
     ed2:	25 96       	adiw	r28, 0x05	; 5
     ed4:	8e ad       	ldd	r24, Y+62	; 0x3e
     ed6:	9f ad       	ldd	r25, Y+63	; 0x3f
     ed8:	25 97       	sbiw	r28, 0x05	; 5
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	25 96       	adiw	r28, 0x05	; 5
     ede:	9f af       	std	Y+63, r25	; 0x3f
     ee0:	8e af       	std	Y+62, r24	; 0x3e
     ee2:	25 97       	sbiw	r28, 0x05	; 5
     ee4:	28 96       	adiw	r28, 0x08	; 8
     ee6:	9f ad       	ldd	r25, Y+63	; 0x3f
     ee8:	28 97       	sbiw	r28, 0x08	; 8
     eea:	91 50       	subi	r25, 0x01	; 1
     eec:	28 96       	adiw	r28, 0x08	; 8
     eee:	9f af       	std	Y+63, r25	; 0x3f
     ef0:	28 97       	sbiw	r28, 0x08	; 8
     ef2:	28 96       	adiw	r28, 0x08	; 8
     ef4:	ef ad       	ldd	r30, Y+63	; 0x3f
     ef6:	28 97       	sbiw	r28, 0x08	; 8
     ef8:	ee 23       	and	r30, r30
     efa:	c1 f6       	brne	.-80     	; 0xeac <main+0x366>
					 timer_init(&timer_Config);
     efc:	ce 01       	movw	r24, r28
     efe:	81 96       	adiw	r24, 0x21	; 33
     f00:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <timer_init>
					 timer1_setCallBack(clockwise);
     f04:	86 e1       	ldi	r24, 0x16	; 22
     f06:	99 e0       	ldi	r25, 0x09	; 9
     f08:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <timer1_setCallBack>
					 flag_Clockwise=0;
     f0c:	10 92 bc 00 	sts	0x00BC, r1
     f10:	0e c0       	rjmp	.+28     	; 0xf2e <main+0x3e8>
					 while(flag_Clockwise==0)
					 {
						 PORTD|=(1<<PD2);
     f12:	a2 e3       	ldi	r26, 0x32	; 50
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e2 e3       	ldi	r30, 0x32	; 50
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	84 60       	ori	r24, 0x04	; 4
     f1e:	8c 93       	st	X, r24
						 PORTD &=(~(1<<PD3));
     f20:	a2 e3       	ldi	r26, 0x32	; 50
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e2 e3       	ldi	r30, 0x32	; 50
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	87 7f       	andi	r24, 0xF7	; 247
     f2c:	8c 93       	st	X, r24

					 timer_ConfigType timer_Config={TIMER1,F_CPU_1024,CTC,0,62536} ;
					 timer_init(&timer_Config);
					 timer1_setCallBack(clockwise);
					 flag_Clockwise=0;
					 while(flag_Clockwise==0)
     f2e:	80 91 bc 00 	lds	r24, 0x00BC
     f32:	88 23       	and	r24, r24
     f34:	71 f3       	breq	.-36     	; 0xf12 <main+0x3cc>
					 {
						 PORTD|=(1<<PD2);
						 PORTD &=(~(1<<PD3));
					 }
					 flag_stop=0;
     f36:	10 92 c0 00 	sts	0x00C0, r1
     f3a:	0e c0       	rjmp	.+28     	; 0xf58 <main+0x412>
					 while(flag_stop==0)
					 {
						 PORTD &=(~(1<<PD2));
     f3c:	a2 e3       	ldi	r26, 0x32	; 50
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e2 e3       	ldi	r30, 0x32	; 50
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	8b 7f       	andi	r24, 0xFB	; 251
     f48:	8c 93       	st	X, r24
						 PORTD &=(~(1<<PD3));
     f4a:	a2 e3       	ldi	r26, 0x32	; 50
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e2 e3       	ldi	r30, 0x32	; 50
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	87 7f       	andi	r24, 0xF7	; 247
     f56:	8c 93       	st	X, r24
					 {
						 PORTD|=(1<<PD2);
						 PORTD &=(~(1<<PD3));
					 }
					 flag_stop=0;
					 while(flag_stop==0)
     f58:	80 91 c0 00 	lds	r24, 0x00C0
     f5c:	88 23       	and	r24, r24
     f5e:	71 f3       	breq	.-36     	; 0xf3c <main+0x3f6>
						 PORTD &=(~(1<<PD2));
						 PORTD &=(~(1<<PD3));

					 }

					 flag_antiClockwise=0;
     f60:	10 92 be 00 	sts	0x00BE, r1
     f64:	0e c0       	rjmp	.+28     	; 0xf82 <main+0x43c>
					 while(flag_antiClockwise==0)
					 {
						 PORTD&=(~(1<<PD2));
     f66:	a2 e3       	ldi	r26, 0x32	; 50
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e2 e3       	ldi	r30, 0x32	; 50
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	8b 7f       	andi	r24, 0xFB	; 251
     f72:	8c 93       	st	X, r24
						 PORTD |=(1<<PD3);
     f74:	a2 e3       	ldi	r26, 0x32	; 50
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e2 e3       	ldi	r30, 0x32	; 50
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	88 60       	ori	r24, 0x08	; 8
     f80:	8c 93       	st	X, r24
						 PORTD &=(~(1<<PD3));

					 }

					 flag_antiClockwise=0;
					 while(flag_antiClockwise==0)
     f82:	80 91 be 00 	lds	r24, 0x00BE
     f86:	88 23       	and	r24, r24
     f88:	71 f3       	breq	.-36     	; 0xf66 <main+0x420>
					 {
						 PORTD&=(~(1<<PD2));
						 PORTD |=(1<<PD3);
					 }

					 PORTD &=(~(1<<PD2));
     f8a:	a2 e3       	ldi	r26, 0x32	; 50
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e2 e3       	ldi	r30, 0x32	; 50
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	8b 7f       	andi	r24, 0xFB	; 251
     f96:	8c 93       	st	X, r24
					 PORTD &=(~(1<<PD3));
     f98:	a2 e3       	ldi	r26, 0x32	; 50
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e2 e3       	ldi	r30, 0x32	; 50
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	87 7f       	andi	r24, 0xF7	; 247
     fa4:	8c 93       	st	X, r24
     fa6:	48 ce       	rjmp	.-880    	; 0xc38 <main+0xf2>
				 }

				 else
				 {
					 /* error message */
					 UART_sendByte(PASSWORDS_NOT_MATCHED);
     fa8:	84 e0       	ldi	r24, 0x04	; 4
     faa:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <UART_sendByte>

					 /* trigger buzzer for 1 minute*/
					 timer_ConfigType timer_Config={TIMER1,F_CPU_1024,CTC,0,62536} ;
     fae:	ce 01       	movw	r24, r28
     fb0:	88 96       	adiw	r24, 0x28	; 40
     fb2:	2a 96       	adiw	r28, 0x0a	; 10
     fb4:	9f af       	std	Y+63, r25	; 0x3f
     fb6:	8e af       	std	Y+62, r24	; 0x3e
     fb8:	2a 97       	sbiw	r28, 0x0a	; 10
     fba:	e8 e6       	ldi	r30, 0x68	; 104
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	2c 96       	adiw	r28, 0x0c	; 12
     fc0:	ff af       	std	Y+63, r31	; 0x3f
     fc2:	ee af       	std	Y+62, r30	; 0x3e
     fc4:	2c 97       	sbiw	r28, 0x0c	; 12
     fc6:	f7 e0       	ldi	r31, 0x07	; 7
     fc8:	2d 96       	adiw	r28, 0x0d	; 13
     fca:	ff af       	std	Y+63, r31	; 0x3f
     fcc:	2d 97       	sbiw	r28, 0x0d	; 13
     fce:	2c 96       	adiw	r28, 0x0c	; 12
     fd0:	ee ad       	ldd	r30, Y+62	; 0x3e
     fd2:	ff ad       	ldd	r31, Y+63	; 0x3f
     fd4:	2c 97       	sbiw	r28, 0x0c	; 12
     fd6:	00 80       	ld	r0, Z
     fd8:	2c 96       	adiw	r28, 0x0c	; 12
     fda:	8e ad       	ldd	r24, Y+62	; 0x3e
     fdc:	9f ad       	ldd	r25, Y+63	; 0x3f
     fde:	2c 97       	sbiw	r28, 0x0c	; 12
     fe0:	01 96       	adiw	r24, 0x01	; 1
     fe2:	2c 96       	adiw	r28, 0x0c	; 12
     fe4:	9f af       	std	Y+63, r25	; 0x3f
     fe6:	8e af       	std	Y+62, r24	; 0x3e
     fe8:	2c 97       	sbiw	r28, 0x0c	; 12
     fea:	2a 96       	adiw	r28, 0x0a	; 10
     fec:	ee ad       	ldd	r30, Y+62	; 0x3e
     fee:	ff ad       	ldd	r31, Y+63	; 0x3f
     ff0:	2a 97       	sbiw	r28, 0x0a	; 10
     ff2:	00 82       	st	Z, r0
     ff4:	2a 96       	adiw	r28, 0x0a	; 10
     ff6:	8e ad       	ldd	r24, Y+62	; 0x3e
     ff8:	9f ad       	ldd	r25, Y+63	; 0x3f
     ffa:	2a 97       	sbiw	r28, 0x0a	; 10
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	2a 96       	adiw	r28, 0x0a	; 10
    1000:	9f af       	std	Y+63, r25	; 0x3f
    1002:	8e af       	std	Y+62, r24	; 0x3e
    1004:	2a 97       	sbiw	r28, 0x0a	; 10
    1006:	2d 96       	adiw	r28, 0x0d	; 13
    1008:	9f ad       	ldd	r25, Y+63	; 0x3f
    100a:	2d 97       	sbiw	r28, 0x0d	; 13
    100c:	91 50       	subi	r25, 0x01	; 1
    100e:	2d 96       	adiw	r28, 0x0d	; 13
    1010:	9f af       	std	Y+63, r25	; 0x3f
    1012:	2d 97       	sbiw	r28, 0x0d	; 13
    1014:	2d 96       	adiw	r28, 0x0d	; 13
    1016:	ef ad       	ldd	r30, Y+63	; 0x3f
    1018:	2d 97       	sbiw	r28, 0x0d	; 13
    101a:	ee 23       	and	r30, r30
    101c:	c1 f6       	brne	.-80     	; 0xfce <main+0x488>
					 timer_init(&timer_Config);
    101e:	ce 01       	movw	r24, r28
    1020:	88 96       	adiw	r24, 0x28	; 40
    1022:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <timer_init>
					 timer1_setCallBack(buzzer);
    1026:	80 e1       	ldi	r24, 0x10	; 16
    1028:	9a e0       	ldi	r25, 0x0A	; 10
    102a:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <timer1_setCallBack>
					 buzzer_flag=0;
    102e:	10 92 c1 00 	sts	0x00C1, r1
    1032:	07 c0       	rjmp	.+14     	; 0x1042 <main+0x4fc>
					 while(buzzer_flag==0)
					 {
						 PORTA|=(1<<PA4);
    1034:	ab e3       	ldi	r26, 0x3B	; 59
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	eb e3       	ldi	r30, 0x3B	; 59
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	80 61       	ori	r24, 0x10	; 16
    1040:	8c 93       	st	X, r24
					 /* trigger buzzer for 1 minute*/
					 timer_ConfigType timer_Config={TIMER1,F_CPU_1024,CTC,0,62536} ;
					 timer_init(&timer_Config);
					 timer1_setCallBack(buzzer);
					 buzzer_flag=0;
					 while(buzzer_flag==0)
    1042:	80 91 c1 00 	lds	r24, 0x00C1
    1046:	88 23       	and	r24, r24
    1048:	a9 f3       	breq	.-22     	; 0x1034 <main+0x4ee>
					 {
						 PORTA|=(1<<PA4);
					 }
					 PORTA &=(~(1<<PA4));
    104a:	ab e3       	ldi	r26, 0x3B	; 59
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	eb e3       	ldi	r30, 0x3B	; 59
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	8f 7e       	andi	r24, 0xEF	; 239
    1056:	8c 93       	st	X, r24
    1058:	ef cd       	rjmp	.-1058   	; 0xc38 <main+0xf2>

0000105a <password>:


	}
}
void password (uint16 start_address)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	00 d0       	rcall	.+0      	; 0x1060 <password+0x6>
    1060:	0f 92       	push	r0
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	9b 83       	std	Y+3, r25	; 0x03
    1068:	8a 83       	std	Y+2, r24	; 0x02
	/*step1*/
	uint8 match_flag=1;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	89 83       	std	Y+1, r24	; 0x01
    106e:	0c c0       	rjmp	.+24     	; 0x1088 <password+0x2e>
	while(match_flag==1)
	{
		/*take pass for first time*/

		get_pass(start_address);
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	9b 81       	ldd	r25, Y+3	; 0x03
    1074:	0e 94 4d 08 	call	0x109a	; 0x109a <get_pass>

		/*take pass for second time and check if 2 pass match*/
		UART_sendByte(RE_ENTER_PASSWORD);
    1078:	83 e0       	ldi	r24, 0x03	; 3
    107a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <UART_sendByte>
		match_flag=check_pass(start_address);
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	9b 81       	ldd	r25, Y+3	; 0x03
    1082:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <check_pass>
    1086:	89 83       	std	Y+1, r24	; 0x01
}
void password (uint16 start_address)
{
	/*step1*/
	uint8 match_flag=1;
	while(match_flag==1)
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	89 f3       	breq	.-30     	; 0x1070 <password+0x16>
		/*take pass for second time and check if 2 pass match*/
		UART_sendByte(RE_ENTER_PASSWORD);
		match_flag=check_pass(start_address);
	}

}
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <get_pass>:
void get_pass(uint16 start_address)
{
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	60 97       	sbiw	r28, 0x10	; 16
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	98 8b       	std	Y+16, r25	; 0x10
    10b0:	8f 87       	std	Y+15, r24	; 0x0f

	do
	{
		pressed_key=UART_recieveByte();
    10b2:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <UART_recieveByte>
    10b6:	80 93 c2 00 	sts	0x00C2, r24
		EEPROM_writeByte(start_address, pressed_key);
    10ba:	20 91 c2 00 	lds	r18, 0x00C2
    10be:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c0:	98 89       	ldd	r25, Y+16	; 0x10
    10c2:	62 2f       	mov	r22, r18
    10c4:	0e 94 87 0a 	call	0x150e	; 0x150e <EEPROM_writeByte>
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	a0 e2       	ldi	r26, 0x20	; 32
    10ce:	b1 e4       	ldi	r27, 0x41	; 65
    10d0:	8b 87       	std	Y+11, r24	; 0x0b
    10d2:	9c 87       	std	Y+12, r25	; 0x0c
    10d4:	ad 87       	std	Y+13, r26	; 0x0d
    10d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10da:	7c 85       	ldd	r23, Y+12	; 0x0c
    10dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10de:	9e 85       	ldd	r25, Y+14	; 0x0e
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	4a ef       	ldi	r20, 0xFA	; 250
    10e6:	54 e4       	ldi	r21, 0x44	; 68
    10e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	8f 83       	std	Y+7, r24	; 0x07
    10f2:	98 87       	std	Y+8, r25	; 0x08
    10f4:	a9 87       	std	Y+9, r26	; 0x09
    10f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10f8:	6f 81       	ldd	r22, Y+7	; 0x07
    10fa:	78 85       	ldd	r23, Y+8	; 0x08
    10fc:	89 85       	ldd	r24, Y+9	; 0x09
    10fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e8       	ldi	r20, 0x80	; 128
    1106:	5f e3       	ldi	r21, 0x3F	; 63
    1108:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    110c:	88 23       	and	r24, r24
    110e:	2c f4       	brge	.+10     	; 0x111a <get_pass+0x80>
		__ticks = 1;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	9e 83       	std	Y+6, r25	; 0x06
    1116:	8d 83       	std	Y+5, r24	; 0x05
    1118:	3f c0       	rjmp	.+126    	; 0x1198 <get_pass+0xfe>
	else if (__tmp > 65535)
    111a:	6f 81       	ldd	r22, Y+7	; 0x07
    111c:	78 85       	ldd	r23, Y+8	; 0x08
    111e:	89 85       	ldd	r24, Y+9	; 0x09
    1120:	9a 85       	ldd	r25, Y+10	; 0x0a
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	3f ef       	ldi	r19, 0xFF	; 255
    1126:	4f e7       	ldi	r20, 0x7F	; 127
    1128:	57 e4       	ldi	r21, 0x47	; 71
    112a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    112e:	18 16       	cp	r1, r24
    1130:	4c f5       	brge	.+82     	; 0x1184 <get_pass+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1132:	6b 85       	ldd	r22, Y+11	; 0x0b
    1134:	7c 85       	ldd	r23, Y+12	; 0x0c
    1136:	8d 85       	ldd	r24, Y+13	; 0x0d
    1138:	9e 85       	ldd	r25, Y+14	; 0x0e
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	40 e2       	ldi	r20, 0x20	; 32
    1140:	51 e4       	ldi	r21, 0x41	; 65
    1142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	bc 01       	movw	r22, r24
    114c:	cd 01       	movw	r24, r26
    114e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	9e 83       	std	Y+6, r25	; 0x06
    1158:	8d 83       	std	Y+5, r24	; 0x05
    115a:	0f c0       	rjmp	.+30     	; 0x117a <get_pass+0xe0>
    115c:	88 ec       	ldi	r24, 0xC8	; 200
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	9c 83       	std	Y+4, r25	; 0x04
    1162:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	9c 81       	ldd	r25, Y+4	; 0x04
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	f1 f7       	brne	.-4      	; 0x1168 <get_pass+0xce>
    116c:	9c 83       	std	Y+4, r25	; 0x04
    116e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1170:	8d 81       	ldd	r24, Y+5	; 0x05
    1172:	9e 81       	ldd	r25, Y+6	; 0x06
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	9e 83       	std	Y+6, r25	; 0x06
    1178:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	9e 81       	ldd	r25, Y+6	; 0x06
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	69 f7       	brne	.-38     	; 0x115c <get_pass+0xc2>
    1182:	14 c0       	rjmp	.+40     	; 0x11ac <get_pass+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1184:	6f 81       	ldd	r22, Y+7	; 0x07
    1186:	78 85       	ldd	r23, Y+8	; 0x08
    1188:	89 85       	ldd	r24, Y+9	; 0x09
    118a:	9a 85       	ldd	r25, Y+10	; 0x0a
    118c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	9e 83       	std	Y+6, r25	; 0x06
    1196:	8d 83       	std	Y+5, r24	; 0x05
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
    119a:	9e 81       	ldd	r25, Y+6	; 0x06
    119c:	9a 83       	std	Y+2, r25	; 0x02
    119e:	89 83       	std	Y+1, r24	; 0x01
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	9a 81       	ldd	r25, Y+2	; 0x02
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	f1 f7       	brne	.-4      	; 0x11a4 <get_pass+0x10a>
    11a8:	9a 83       	std	Y+2, r25	; 0x02
    11aa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		start_address++;
    11ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ae:	98 89       	ldd	r25, Y+16	; 0x10
    11b0:	01 96       	adiw	r24, 0x01	; 1
    11b2:	98 8b       	std	Y+16, r25	; 0x10
    11b4:	8f 87       	std	Y+15, r24	; 0x0f


	}while(pressed_key != 13);
    11b6:	80 91 c2 00 	lds	r24, 0x00C2
    11ba:	8d 30       	cpi	r24, 0x0D	; 13
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <get_pass+0x126>
    11be:	79 cf       	rjmp	.-270    	; 0x10b2 <get_pass+0x18>


}
    11c0:	60 96       	adiw	r28, 0x10	; 16
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <check_pass>:

uint8 check_pass(uint16 start_address)
{
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <check_pass+0x6>
    11d8:	00 d0       	rcall	.+0      	; 0x11da <check_pass+0x8>
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	9c 83       	std	Y+4, r25	; 0x04
    11e0:	8b 83       	std	Y+3, r24	; 0x03

	uint8 saved_key;
	uint8 flag=0;
    11e2:	19 82       	std	Y+1, r1	; 0x01
	do
	{
		pressed_key=UART_recieveByte();
    11e4:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <UART_recieveByte>
    11e8:	80 93 c2 00 	sts	0x00C2, r24
		EEPROM_readByte(start_address, &saved_key);
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	9c 81       	ldd	r25, Y+4	; 0x04
    11f0:	9e 01       	movw	r18, r28
    11f2:	2e 5f       	subi	r18, 0xFE	; 254
    11f4:	3f 4f       	sbci	r19, 0xFF	; 255
    11f6:	b9 01       	movw	r22, r18
    11f8:	0e 94 c8 0a 	call	0x1590	; 0x1590 <EEPROM_readByte>
		start_address++;
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	9c 83       	std	Y+4, r25	; 0x04
    1204:	8b 83       	std	Y+3, r24	; 0x03
		if(pressed_key != saved_key)
    1206:	90 91 c2 00 	lds	r25, 0x00C2
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	98 17       	cp	r25, r24
    120e:	11 f0       	breq	.+4      	; 0x1214 <check_pass+0x42>
			flag=1;
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	89 83       	std	Y+1, r24	; 0x01

	}while(pressed_key != 13);
    1214:	80 91 c2 00 	lds	r24, 0x00C2
    1218:	8d 30       	cpi	r24, 0x0D	; 13
    121a:	21 f7       	brne	.-56     	; 0x11e4 <check_pass+0x12>
	return flag;
    121c:	89 81       	ldd	r24, Y+1	; 0x01

}
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <clockwise>:


void clockwise (void)
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	68 97       	sbiw	r28, 0x18	; 24
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61

	/* Create configuration structure for timer1 driver*/

	clockwise_count++;
    1240:	80 91 bd 00 	lds	r24, 0x00BD
    1244:	8f 5f       	subi	r24, 0xFF	; 255
    1246:	80 93 bd 00 	sts	0x00BD, r24

	if (clockwise_count ==1)
    124a:	80 91 bd 00 	lds	r24, 0x00BD
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	49 f5       	brne	.+82     	; 0x12a4 <clockwise+0x78>
	{
		/*T_TIMER=1024/8MHZ, 0->54719=7 SECS
		 */
		timer_ConfigType timer_Config={TIMER1,F_CPU_1024,CTC,0,54719} ;
    1252:	ce 01       	movw	r24, r28
    1254:	01 96       	adiw	r24, 0x01	; 1
    1256:	98 8b       	std	Y+16, r25	; 0x10
    1258:	8f 87       	std	Y+15, r24	; 0x0f
    125a:	e9 e9       	ldi	r30, 0x99	; 153
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	fa 8b       	std	Y+18, r31	; 0x12
    1260:	e9 8b       	std	Y+17, r30	; 0x11
    1262:	f7 e0       	ldi	r31, 0x07	; 7
    1264:	fb 8b       	std	Y+19, r31	; 0x13
    1266:	e9 89       	ldd	r30, Y+17	; 0x11
    1268:	fa 89       	ldd	r31, Y+18	; 0x12
    126a:	00 80       	ld	r0, Z
    126c:	89 89       	ldd	r24, Y+17	; 0x11
    126e:	9a 89       	ldd	r25, Y+18	; 0x12
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	9a 8b       	std	Y+18, r25	; 0x12
    1274:	89 8b       	std	Y+17, r24	; 0x11
    1276:	ef 85       	ldd	r30, Y+15	; 0x0f
    1278:	f8 89       	ldd	r31, Y+16	; 0x10
    127a:	00 82       	st	Z, r0
    127c:	8f 85       	ldd	r24, Y+15	; 0x0f
    127e:	98 89       	ldd	r25, Y+16	; 0x10
    1280:	01 96       	adiw	r24, 0x01	; 1
    1282:	98 8b       	std	Y+16, r25	; 0x10
    1284:	8f 87       	std	Y+15, r24	; 0x0f
    1286:	9b 89       	ldd	r25, Y+19	; 0x13
    1288:	91 50       	subi	r25, 0x01	; 1
    128a:	9b 8b       	std	Y+19, r25	; 0x13
    128c:	eb 89       	ldd	r30, Y+19	; 0x13
    128e:	ee 23       	and	r30, r30
    1290:	51 f7       	brne	.-44     	; 0x1266 <clockwise+0x3a>
		timer_init(&timer_Config);
    1292:	ce 01       	movw	r24, r28
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <timer_init>
		timer1_setCallBack(clockwise);
    129a:	86 e1       	ldi	r24, 0x16	; 22
    129c:	99 e0       	ldi	r25, 0x09	; 9
    129e:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <timer1_setCallBack>
    12a2:	2d c0       	rjmp	.+90     	; 0x12fe <clockwise+0xd2>
	}
	else
	{
		/* after 15 secs-> make flag_Clockwise=1, call the stop function*/

		flag_Clockwise=1;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	80 93 bc 00 	sts	0x00BC, r24
		clockwise_count=0;
    12aa:	10 92 bd 00 	sts	0x00BD, r1
		timer_ConfigType timer_Config={TIMER1,F_CPU_1024,CTC,0,23451} ;
    12ae:	ce 01       	movw	r24, r28
    12b0:	08 96       	adiw	r24, 0x08	; 8
    12b2:	9d 8b       	std	Y+21, r25	; 0x15
    12b4:	8c 8b       	std	Y+20, r24	; 0x14
    12b6:	e2 e9       	ldi	r30, 0x92	; 146
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	ff 8b       	std	Y+23, r31	; 0x17
    12bc:	ee 8b       	std	Y+22, r30	; 0x16
    12be:	f7 e0       	ldi	r31, 0x07	; 7
    12c0:	f8 8f       	std	Y+24, r31	; 0x18
    12c2:	ee 89       	ldd	r30, Y+22	; 0x16
    12c4:	ff 89       	ldd	r31, Y+23	; 0x17
    12c6:	00 80       	ld	r0, Z
    12c8:	8e 89       	ldd	r24, Y+22	; 0x16
    12ca:	9f 89       	ldd	r25, Y+23	; 0x17
    12cc:	01 96       	adiw	r24, 0x01	; 1
    12ce:	9f 8b       	std	Y+23, r25	; 0x17
    12d0:	8e 8b       	std	Y+22, r24	; 0x16
    12d2:	ec 89       	ldd	r30, Y+20	; 0x14
    12d4:	fd 89       	ldd	r31, Y+21	; 0x15
    12d6:	00 82       	st	Z, r0
    12d8:	8c 89       	ldd	r24, Y+20	; 0x14
    12da:	9d 89       	ldd	r25, Y+21	; 0x15
    12dc:	01 96       	adiw	r24, 0x01	; 1
    12de:	9d 8b       	std	Y+21, r25	; 0x15
    12e0:	8c 8b       	std	Y+20, r24	; 0x14
    12e2:	98 8d       	ldd	r25, Y+24	; 0x18
    12e4:	91 50       	subi	r25, 0x01	; 1
    12e6:	98 8f       	std	Y+24, r25	; 0x18
    12e8:	e8 8d       	ldd	r30, Y+24	; 0x18
    12ea:	ee 23       	and	r30, r30
    12ec:	51 f7       	brne	.-44     	; 0x12c2 <clockwise+0x96>
		timer_init(&timer_Config);
    12ee:	ce 01       	movw	r24, r28
    12f0:	08 96       	adiw	r24, 0x08	; 8
    12f2:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <timer_init>
		timer1_setCallBack(stop);
    12f6:	88 e8       	ldi	r24, 0x88	; 136
    12f8:	99 e0       	ldi	r25, 0x09	; 9
    12fa:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <timer1_setCallBack>

	}



}
    12fe:	68 96       	adiw	r28, 0x18	; 24
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <stop>:
void stop(void)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	2c 97       	sbiw	r28, 0x0c	; 12
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61

	/* Create configuration structure for timer1 driver
	 *T_TIMER=1024/8MHZ, 0->23451 =3 SECS
	 */
	flag_stop=1;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	80 93 c0 00 	sts	0x00C0, r24
	timer_ConfigType timer_Config={TIMER1,F_CPU_1024,CTC,0,62536} ;
    132a:	ce 01       	movw	r24, r28
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	99 87       	std	Y+9, r25	; 0x09
    1330:	88 87       	std	Y+8, r24	; 0x08
    1332:	e0 ea       	ldi	r30, 0xA0	; 160
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	fb 87       	std	Y+11, r31	; 0x0b
    1338:	ea 87       	std	Y+10, r30	; 0x0a
    133a:	f7 e0       	ldi	r31, 0x07	; 7
    133c:	fc 87       	std	Y+12, r31	; 0x0c
    133e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1340:	fb 85       	ldd	r31, Y+11	; 0x0b
    1342:	00 80       	ld	r0, Z
    1344:	8a 85       	ldd	r24, Y+10	; 0x0a
    1346:	9b 85       	ldd	r25, Y+11	; 0x0b
    1348:	01 96       	adiw	r24, 0x01	; 1
    134a:	9b 87       	std	Y+11, r25	; 0x0b
    134c:	8a 87       	std	Y+10, r24	; 0x0a
    134e:	e8 85       	ldd	r30, Y+8	; 0x08
    1350:	f9 85       	ldd	r31, Y+9	; 0x09
    1352:	00 82       	st	Z, r0
    1354:	88 85       	ldd	r24, Y+8	; 0x08
    1356:	99 85       	ldd	r25, Y+9	; 0x09
    1358:	01 96       	adiw	r24, 0x01	; 1
    135a:	99 87       	std	Y+9, r25	; 0x09
    135c:	88 87       	std	Y+8, r24	; 0x08
    135e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1360:	91 50       	subi	r25, 0x01	; 1
    1362:	9c 87       	std	Y+12, r25	; 0x0c
    1364:	ec 85       	ldd	r30, Y+12	; 0x0c
    1366:	ee 23       	and	r30, r30
    1368:	51 f7       	brne	.-44     	; 0x133e <stop+0x2e>
	timer_init(&timer_Config);
    136a:	ce 01       	movw	r24, r28
    136c:	01 96       	adiw	r24, 0x01	; 1
    136e:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <timer_init>
	timer1_setCallBack(anti_clockwise);
    1372:	86 ec       	ldi	r24, 0xC6	; 198
    1374:	99 e0       	ldi	r25, 0x09	; 9
    1376:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <timer1_setCallBack>
}
    137a:	2c 96       	adiw	r28, 0x0c	; 12
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <anti_clockwise>:
void anti_clockwise(void)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	2c 97       	sbiw	r28, 0x0c	; 12
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
	/* Create configuration structure for timer1 driver*/

		/*T_TIMER=1024/8MHZ, 0->62536 =8 SECS
		 */

		anticlockwise_count++;
    13a0:	80 91 bf 00 	lds	r24, 0x00BF
    13a4:	8f 5f       	subi	r24, 0xFF	; 255
    13a6:	80 93 bf 00 	sts	0x00BF, r24


	 if (anticlockwise_count ==1)
    13aa:	80 91 bf 00 	lds	r24, 0x00BF
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	49 f5       	brne	.+82     	; 0x1404 <anti_clockwise+0x78>
	{

		/*T_TIMER=1024/8MHZ, 0->54719=7 SECS
		 */
		timer_ConfigType timer_Config={TIMER1,F_CPU_1024,CTC,0,54719} ;
    13b2:	ce 01       	movw	r24, r28
    13b4:	01 96       	adiw	r24, 0x01	; 1
    13b6:	99 87       	std	Y+9, r25	; 0x09
    13b8:	88 87       	std	Y+8, r24	; 0x08
    13ba:	e7 ea       	ldi	r30, 0xA7	; 167
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	fb 87       	std	Y+11, r31	; 0x0b
    13c0:	ea 87       	std	Y+10, r30	; 0x0a
    13c2:	f7 e0       	ldi	r31, 0x07	; 7
    13c4:	fc 87       	std	Y+12, r31	; 0x0c
    13c6:	ea 85       	ldd	r30, Y+10	; 0x0a
    13c8:	fb 85       	ldd	r31, Y+11	; 0x0b
    13ca:	00 80       	ld	r0, Z
    13cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    13ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    13d0:	01 96       	adiw	r24, 0x01	; 1
    13d2:	9b 87       	std	Y+11, r25	; 0x0b
    13d4:	8a 87       	std	Y+10, r24	; 0x0a
    13d6:	e8 85       	ldd	r30, Y+8	; 0x08
    13d8:	f9 85       	ldd	r31, Y+9	; 0x09
    13da:	00 82       	st	Z, r0
    13dc:	88 85       	ldd	r24, Y+8	; 0x08
    13de:	99 85       	ldd	r25, Y+9	; 0x09
    13e0:	01 96       	adiw	r24, 0x01	; 1
    13e2:	99 87       	std	Y+9, r25	; 0x09
    13e4:	88 87       	std	Y+8, r24	; 0x08
    13e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    13e8:	91 50       	subi	r25, 0x01	; 1
    13ea:	9c 87       	std	Y+12, r25	; 0x0c
    13ec:	ec 85       	ldd	r30, Y+12	; 0x0c
    13ee:	ee 23       	and	r30, r30
    13f0:	51 f7       	brne	.-44     	; 0x13c6 <anti_clockwise+0x3a>
		timer_init(&timer_Config);
    13f2:	ce 01       	movw	r24, r28
    13f4:	01 96       	adiw	r24, 0x01	; 1
    13f6:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <timer_init>
		timer1_setCallBack(anti_clockwise);
    13fa:	86 ec       	ldi	r24, 0xC6	; 198
    13fc:	99 e0       	ldi	r25, 0x09	; 9
    13fe:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <timer1_setCallBack>
    1402:	05 c0       	rjmp	.+10     	; 0x140e <anti_clockwise+0x82>
	}
	else
	{
		/* after 60 secs-> make flag=1, stop the timer */
		anticlockwise_count=0;
    1404:	10 92 bf 00 	sts	0x00BF, r1
		flag_antiClockwise=1;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	80 93 be 00 	sts	0x00BE, r24

	}

}
    140e:	2c 96       	adiw	r28, 0x0c	; 12
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <buzzer>:
void buzzer(void)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	68 97       	sbiw	r28, 0x18	; 24
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61

	buzzer_count++;
    1434:	80 91 c3 00 	lds	r24, 0x00C3
    1438:	8f 5f       	subi	r24, 0xFF	; 255
    143a:	80 93 c3 00 	sts	0x00C3, r24
	/* count 8secs 7 times-> (8*7)=56 */
	if(buzzer_count <=6)
    143e:	80 91 c3 00 	lds	r24, 0x00C3
    1442:	87 30       	cpi	r24, 0x07	; 7
    1444:	48 f5       	brcc	.+82     	; 0x1498 <buzzer+0x78>
	{

		/* Create configuration structure for timer1 driver
		 *T_TIMER=1024/8MHZ, 0->62536  =8 SECS
		 */
		timer_ConfigType timer_Config={TIMER1,F_CPU_1024,CTC,0,62536} ;
    1446:	ce 01       	movw	r24, r28
    1448:	01 96       	adiw	r24, 0x01	; 1
    144a:	98 8b       	std	Y+16, r25	; 0x10
    144c:	8f 87       	std	Y+15, r24	; 0x0f
    144e:	e5 eb       	ldi	r30, 0xB5	; 181
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	fa 8b       	std	Y+18, r31	; 0x12
    1454:	e9 8b       	std	Y+17, r30	; 0x11
    1456:	f7 e0       	ldi	r31, 0x07	; 7
    1458:	fb 8b       	std	Y+19, r31	; 0x13
    145a:	e9 89       	ldd	r30, Y+17	; 0x11
    145c:	fa 89       	ldd	r31, Y+18	; 0x12
    145e:	00 80       	ld	r0, Z
    1460:	89 89       	ldd	r24, Y+17	; 0x11
    1462:	9a 89       	ldd	r25, Y+18	; 0x12
    1464:	01 96       	adiw	r24, 0x01	; 1
    1466:	9a 8b       	std	Y+18, r25	; 0x12
    1468:	89 8b       	std	Y+17, r24	; 0x11
    146a:	ef 85       	ldd	r30, Y+15	; 0x0f
    146c:	f8 89       	ldd	r31, Y+16	; 0x10
    146e:	00 82       	st	Z, r0
    1470:	8f 85       	ldd	r24, Y+15	; 0x0f
    1472:	98 89       	ldd	r25, Y+16	; 0x10
    1474:	01 96       	adiw	r24, 0x01	; 1
    1476:	98 8b       	std	Y+16, r25	; 0x10
    1478:	8f 87       	std	Y+15, r24	; 0x0f
    147a:	9b 89       	ldd	r25, Y+19	; 0x13
    147c:	91 50       	subi	r25, 0x01	; 1
    147e:	9b 8b       	std	Y+19, r25	; 0x13
    1480:	eb 89       	ldd	r30, Y+19	; 0x13
    1482:	ee 23       	and	r30, r30
    1484:	51 f7       	brne	.-44     	; 0x145a <buzzer+0x3a>
									timer_init(&timer_Config);
    1486:	ce 01       	movw	r24, r28
    1488:	01 96       	adiw	r24, 0x01	; 1
    148a:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <timer_init>
									timer1_setCallBack(buzzer);
    148e:	80 e1       	ldi	r24, 0x10	; 16
    1490:	9a e0       	ldi	r25, 0x0A	; 10
    1492:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <timer1_setCallBack>
    1496:	32 c0       	rjmp	.+100    	; 0x14fc <buzzer+0xdc>
	}
	/* count 4 secs 1 time-> total time 56+4= 60secs=1 minute*/
	else if(buzzer_count==7)
    1498:	80 91 c3 00 	lds	r24, 0x00C3
    149c:	87 30       	cpi	r24, 0x07	; 7
    149e:	49 f5       	brne	.+82     	; 0x14f2 <buzzer+0xd2>
	{
		/* Create configuration structure for timer1 driver
		 *F_TIMER=1024/8MHZ, 0->31268 =4SECS
		 */
		timer_ConfigType timer_Config={TIMER1,F_CPU_1024,CTC,0,31268} ;
    14a0:	ce 01       	movw	r24, r28
    14a2:	08 96       	adiw	r24, 0x08	; 8
    14a4:	9d 8b       	std	Y+21, r25	; 0x15
    14a6:	8c 8b       	std	Y+20, r24	; 0x14
    14a8:	ee ea       	ldi	r30, 0xAE	; 174
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	ff 8b       	std	Y+23, r31	; 0x17
    14ae:	ee 8b       	std	Y+22, r30	; 0x16
    14b0:	f7 e0       	ldi	r31, 0x07	; 7
    14b2:	f8 8f       	std	Y+24, r31	; 0x18
    14b4:	ee 89       	ldd	r30, Y+22	; 0x16
    14b6:	ff 89       	ldd	r31, Y+23	; 0x17
    14b8:	00 80       	ld	r0, Z
    14ba:	8e 89       	ldd	r24, Y+22	; 0x16
    14bc:	9f 89       	ldd	r25, Y+23	; 0x17
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	9f 8b       	std	Y+23, r25	; 0x17
    14c2:	8e 8b       	std	Y+22, r24	; 0x16
    14c4:	ec 89       	ldd	r30, Y+20	; 0x14
    14c6:	fd 89       	ldd	r31, Y+21	; 0x15
    14c8:	00 82       	st	Z, r0
    14ca:	8c 89       	ldd	r24, Y+20	; 0x14
    14cc:	9d 89       	ldd	r25, Y+21	; 0x15
    14ce:	01 96       	adiw	r24, 0x01	; 1
    14d0:	9d 8b       	std	Y+21, r25	; 0x15
    14d2:	8c 8b       	std	Y+20, r24	; 0x14
    14d4:	98 8d       	ldd	r25, Y+24	; 0x18
    14d6:	91 50       	subi	r25, 0x01	; 1
    14d8:	98 8f       	std	Y+24, r25	; 0x18
    14da:	e8 8d       	ldd	r30, Y+24	; 0x18
    14dc:	ee 23       	and	r30, r30
    14de:	51 f7       	brne	.-44     	; 0x14b4 <buzzer+0x94>
		timer_init(&timer_Config);
    14e0:	ce 01       	movw	r24, r28
    14e2:	08 96       	adiw	r24, 0x08	; 8
    14e4:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <timer_init>
		timer1_setCallBack(buzzer);
    14e8:	80 e1       	ldi	r24, 0x10	; 16
    14ea:	9a e0       	ldi	r25, 0x0A	; 10
    14ec:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <timer1_setCallBack>
    14f0:	05 c0       	rjmp	.+10     	; 0x14fc <buzzer+0xdc>
	}
	else
	{
		/* after 60 secs-> make flag=1, stop the timer */

		buzzer_count=0;
    14f2:	10 92 c3 00 	sts	0x00C3, r1
		buzzer_flag=1;
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	80 93 c1 00 	sts	0x00C1, r24
	}

}
    14fc:	68 96       	adiw	r28, 0x18	; 24
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	00 d0       	rcall	.+0      	; 0x1514 <EEPROM_writeByte+0x6>
    1514:	00 d0       	rcall	.+0      	; 0x1516 <EEPROM_writeByte+0x8>
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	9a 83       	std	Y+2, r25	; 0x02
    151c:	89 83       	std	Y+1, r24	; 0x01
    151e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1520:	0e 94 8c 0b 	call	0x1718	; 0x1718 <TWI_start>
    if (TWI_getStatus() != TW_START)
    1524:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <TWI_getStatus>
    1528:	88 30       	cpi	r24, 0x08	; 8
    152a:	11 f0       	breq	.+4      	; 0x1530 <EEPROM_writeByte+0x22>
        return ERROR;
    152c:	1c 82       	std	Y+4, r1	; 0x04
    152e:	28 c0       	rjmp	.+80     	; 0x1580 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	9a 81       	ldd	r25, Y+2	; 0x02
    1534:	80 70       	andi	r24, 0x00	; 0
    1536:	97 70       	andi	r25, 0x07	; 7
    1538:	88 0f       	add	r24, r24
    153a:	89 2f       	mov	r24, r25
    153c:	88 1f       	adc	r24, r24
    153e:	99 0b       	sbc	r25, r25
    1540:	91 95       	neg	r25
    1542:	80 6a       	ori	r24, 0xA0	; 160
    1544:	0e 94 a7 0b 	call	0x174e	; 0x174e <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1548:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <TWI_getStatus>
    154c:	88 31       	cpi	r24, 0x18	; 24
    154e:	11 f0       	breq	.+4      	; 0x1554 <EEPROM_writeByte+0x46>
        return ERROR;
    1550:	1c 82       	std	Y+4, r1	; 0x04
    1552:	16 c0       	rjmp	.+44     	; 0x1580 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	0e 94 a7 0b 	call	0x174e	; 0x174e <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    155a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <TWI_getStatus>
    155e:	88 32       	cpi	r24, 0x28	; 40
    1560:	11 f0       	breq	.+4      	; 0x1566 <EEPROM_writeByte+0x58>
        return ERROR;
    1562:	1c 82       	std	Y+4, r1	; 0x04
    1564:	0d c0       	rjmp	.+26     	; 0x1580 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_write(u8data);
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	0e 94 a7 0b 	call	0x174e	; 0x174e <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    156c:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <TWI_getStatus>
    1570:	88 32       	cpi	r24, 0x28	; 40
    1572:	11 f0       	breq	.+4      	; 0x1578 <EEPROM_writeByte+0x6a>
        return ERROR;
    1574:	1c 82       	std	Y+4, r1	; 0x04
    1576:	04 c0       	rjmp	.+8      	; 0x1580 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1578:	0e 94 9c 0b 	call	0x1738	; 0x1738 <TWI_stop>

    return SUCCESS;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	8c 83       	std	Y+4, r24	; 0x04
    1580:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	00 d0       	rcall	.+0      	; 0x1596 <EEPROM_readByte+0x6>
    1596:	00 d0       	rcall	.+0      	; 0x1598 <EEPROM_readByte+0x8>
    1598:	0f 92       	push	r0
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	9a 83       	std	Y+2, r25	; 0x02
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	7c 83       	std	Y+4, r23	; 0x04
    15a4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    15a6:	0e 94 8c 0b 	call	0x1718	; 0x1718 <TWI_start>
    if (TWI_getStatus() != TW_START)
    15aa:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <TWI_getStatus>
    15ae:	88 30       	cpi	r24, 0x08	; 8
    15b0:	11 f0       	breq	.+4      	; 0x15b6 <EEPROM_readByte+0x26>
        return ERROR;
    15b2:	1d 82       	std	Y+5, r1	; 0x05
    15b4:	44 c0       	rjmp	.+136    	; 0x163e <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ba:	80 70       	andi	r24, 0x00	; 0
    15bc:	97 70       	andi	r25, 0x07	; 7
    15be:	88 0f       	add	r24, r24
    15c0:	89 2f       	mov	r24, r25
    15c2:	88 1f       	adc	r24, r24
    15c4:	99 0b       	sbc	r25, r25
    15c6:	91 95       	neg	r25
    15c8:	80 6a       	ori	r24, 0xA0	; 160
    15ca:	0e 94 a7 0b 	call	0x174e	; 0x174e <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    15ce:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <TWI_getStatus>
    15d2:	88 31       	cpi	r24, 0x18	; 24
    15d4:	11 f0       	breq	.+4      	; 0x15da <EEPROM_readByte+0x4a>
        return ERROR;
    15d6:	1d 82       	std	Y+5, r1	; 0x05
    15d8:	32 c0       	rjmp	.+100    	; 0x163e <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	0e 94 a7 0b 	call	0x174e	; 0x174e <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    15e0:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <TWI_getStatus>
    15e4:	88 32       	cpi	r24, 0x28	; 40
    15e6:	11 f0       	breq	.+4      	; 0x15ec <EEPROM_readByte+0x5c>
        return ERROR;
    15e8:	1d 82       	std	Y+5, r1	; 0x05
    15ea:	29 c0       	rjmp	.+82     	; 0x163e <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    15ec:	0e 94 8c 0b 	call	0x1718	; 0x1718 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    15f0:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <TWI_getStatus>
    15f4:	80 31       	cpi	r24, 0x10	; 16
    15f6:	11 f0       	breq	.+4      	; 0x15fc <EEPROM_readByte+0x6c>
        return ERROR;
    15f8:	1d 82       	std	Y+5, r1	; 0x05
    15fa:	21 c0       	rjmp	.+66     	; 0x163e <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1600:	80 70       	andi	r24, 0x00	; 0
    1602:	97 70       	andi	r25, 0x07	; 7
    1604:	88 0f       	add	r24, r24
    1606:	89 2f       	mov	r24, r25
    1608:	88 1f       	adc	r24, r24
    160a:	99 0b       	sbc	r25, r25
    160c:	91 95       	neg	r25
    160e:	81 6a       	ori	r24, 0xA1	; 161
    1610:	0e 94 a7 0b 	call	0x174e	; 0x174e <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    1614:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <TWI_getStatus>
    1618:	80 34       	cpi	r24, 0x40	; 64
    161a:	11 f0       	breq	.+4      	; 0x1620 <EEPROM_readByte+0x90>
        return ERROR;
    161c:	1d 82       	std	Y+5, r1	; 0x05
    161e:	0f c0       	rjmp	.+30     	; 0x163e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    1620:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <TWI_readWithNACK>
    1624:	eb 81       	ldd	r30, Y+3	; 0x03
    1626:	fc 81       	ldd	r31, Y+4	; 0x04
    1628:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    162a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <TWI_getStatus>
    162e:	88 35       	cpi	r24, 0x58	; 88
    1630:	11 f0       	breq	.+4      	; 0x1636 <EEPROM_readByte+0xa6>
        return ERROR;
    1632:	1d 82       	std	Y+5, r1	; 0x05
    1634:	04 c0       	rjmp	.+8      	; 0x163e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1636:	0e 94 9c 0b 	call	0x1738	; 0x1738 <TWI_stop>
    return SUCCESS;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	8d 83       	std	Y+5, r24	; 0x05
    163e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(const I2C_ConfigType * Config_ptr)
{
    1650:	cf 92       	push	r12
    1652:	df 92       	push	r13
    1654:	ef 92       	push	r14
    1656:	ff 92       	push	r15
    1658:	0f 93       	push	r16
    165a:	1f 93       	push	r17
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	00 d0       	rcall	.+0      	; 0x1662 <TWI_init+0x12>
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	9a 83       	std	Y+2, r25	; 0x02
    1668:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR =((F_CPU/(Config_ptr->SCL_FREQ))-16)/(2*Config_ptr->PRESCALER);
    166a:	cc 24       	eor	r12, r12
    166c:	dd 24       	eor	r13, r13
    166e:	68 94       	set
    1670:	c5 f8       	bld	r12, 5
    1672:	e9 81       	ldd	r30, Y+1	; 0x01
    1674:	fa 81       	ldd	r31, Y+2	; 0x02
    1676:	23 81       	ldd	r18, Z+3	; 0x03
    1678:	34 81       	ldd	r19, Z+4	; 0x04
    167a:	45 81       	ldd	r20, Z+5	; 0x05
    167c:	56 81       	ldd	r21, Z+6	; 0x06
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	92 e1       	ldi	r25, 0x12	; 18
    1682:	aa e7       	ldi	r26, 0x7A	; 122
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	bc 01       	movw	r22, r24
    1688:	cd 01       	movw	r24, r26
    168a:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__udivmodsi4>
    168e:	da 01       	movw	r26, r20
    1690:	c9 01       	movw	r24, r18
    1692:	0f 2e       	mov	r0, r31
    1694:	f0 ef       	ldi	r31, 0xF0	; 240
    1696:	ef 2e       	mov	r14, r31
    1698:	ff ef       	ldi	r31, 0xFF	; 255
    169a:	ff 2e       	mov	r15, r31
    169c:	ff ef       	ldi	r31, 0xFF	; 255
    169e:	0f 2f       	mov	r16, r31
    16a0:	ff ef       	ldi	r31, 0xFF	; 255
    16a2:	1f 2f       	mov	r17, r31
    16a4:	f0 2d       	mov	r31, r0
    16a6:	e8 0e       	add	r14, r24
    16a8:	f9 1e       	adc	r15, r25
    16aa:	0a 1f       	adc	r16, r26
    16ac:	1b 1f       	adc	r17, r27
    16ae:	e9 81       	ldd	r30, Y+1	; 0x01
    16b0:	fa 81       	ldd	r31, Y+2	; 0x02
    16b2:	81 81       	ldd	r24, Z+1	; 0x01
    16b4:	88 2f       	mov	r24, r24
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	9c 01       	movw	r18, r24
    16be:	44 27       	eor	r20, r20
    16c0:	37 fd       	sbrc	r19, 7
    16c2:	40 95       	com	r20
    16c4:	54 2f       	mov	r21, r20
    16c6:	c8 01       	movw	r24, r16
    16c8:	b7 01       	movw	r22, r14
    16ca:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__udivmodsi4>
    16ce:	da 01       	movw	r26, r20
    16d0:	c9 01       	movw	r24, r18
    16d2:	f6 01       	movw	r30, r12
    16d4:	80 83       	st	Z, r24
    TWSR = (TWSR & 0xFC)|(Config_ptr->TWPS_BITS);
    16d6:	a1 e2       	ldi	r26, 0x21	; 33
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e1 e2       	ldi	r30, 0x21	; 33
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	98 2f       	mov	r25, r24
    16e2:	9c 7f       	andi	r25, 0xFC	; 252
    16e4:	e9 81       	ldd	r30, Y+1	; 0x01
    16e6:	fa 81       	ldd	r31, Y+2	; 0x02
    16e8:	80 81       	ld	r24, Z
    16ea:	89 2b       	or	r24, r25
    16ec:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_ptr->Slave_address ; // my address = 0x01 :)
    16ee:	a2 e2       	ldi	r26, 0x22	; 34
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e9 81       	ldd	r30, Y+1	; 0x01
    16f4:	fa 81       	ldd	r31, Y+2	; 0x02
    16f6:	82 81       	ldd	r24, Z+2	; 0x02
    16f8:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    16fa:	e6 e5       	ldi	r30, 0x56	; 86
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	84 e0       	ldi	r24, 0x04	; 4
    1700:	80 83       	st	Z, r24
}
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	08 95       	ret

00001718 <TWI_start>:

void TWI_start(void)
{
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1720:	e6 e5       	ldi	r30, 0x56	; 86
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	84 ea       	ldi	r24, 0xA4	; 164
    1726:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1728:	e6 e5       	ldi	r30, 0x56	; 86
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	88 23       	and	r24, r24
    1730:	dc f7       	brge	.-10     	; 0x1728 <TWI_start+0x10>
}
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <TWI_stop>:

void TWI_stop(void)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1740:	e6 e5       	ldi	r30, 0x56	; 86
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	84 e9       	ldi	r24, 0x94	; 148
    1746:	80 83       	st	Z, r24
}
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <TWI_write>:

void TWI_write(uint8 data)
{
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	0f 92       	push	r0
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    175a:	e3 e2       	ldi	r30, 0x23	; 35
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1762:	e6 e5       	ldi	r30, 0x56	; 86
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	84 e8       	ldi	r24, 0x84	; 132
    1768:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    176a:	e6 e5       	ldi	r30, 0x56	; 86
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	88 23       	and	r24, r24
    1772:	dc f7       	brge	.-10     	; 0x176a <TWI_write+0x1c>
}
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1784:	e6 e5       	ldi	r30, 0x56	; 86
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	84 ec       	ldi	r24, 0xC4	; 196
    178a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    178c:	e6 e5       	ldi	r30, 0x56	; 86
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	88 23       	and	r24, r24
    1794:	dc f7       	brge	.-10     	; 0x178c <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    1796:	e3 e2       	ldi	r30, 0x23	; 35
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
}
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    17aa:	e6 e5       	ldi	r30, 0x56	; 86
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	84 e8       	ldi	r24, 0x84	; 132
    17b0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    17b2:	e6 e5       	ldi	r30, 0x56	; 86
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	88 23       	and	r24, r24
    17ba:	dc f7       	brge	.-10     	; 0x17b2 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    17bc:	e3 e2       	ldi	r30, 0x23	; 35
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
}
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	0f 92       	push	r0
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    17d2:	e1 e2       	ldi	r30, 0x21	; 33
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	88 7f       	andi	r24, 0xF8	; 248
    17da:	89 83       	std	Y+1, r24	; 0x01
    return status;
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17de:	0f 90       	pop	r0
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	08 95       	ret

000017e6 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    17e6:	1f 92       	push	r1
    17e8:	0f 92       	push	r0
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	0f 92       	push	r0
    17ee:	11 24       	eor	r1, r1
    17f0:	2f 93       	push	r18
    17f2:	3f 93       	push	r19
    17f4:	4f 93       	push	r20
    17f6:	5f 93       	push	r21
    17f8:	6f 93       	push	r22
    17fa:	7f 93       	push	r23
    17fc:	8f 93       	push	r24
    17fe:	9f 93       	push	r25
    1800:	af 93       	push	r26
    1802:	bf 93       	push	r27
    1804:	ef 93       	push	r30
    1806:	ff 93       	push	r31
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0_callBackPtr != NULL_PTR)
    1810:	80 91 c4 00 	lds	r24, 0x00C4
    1814:	90 91 c5 00 	lds	r25, 0x00C5
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	29 f0       	breq	.+10     	; 0x1826 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer0_callBackPtr)();
    181c:	e0 91 c4 00 	lds	r30, 0x00C4
    1820:	f0 91 c5 00 	lds	r31, 0x00C5
    1824:	09 95       	icall
	}
}
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	ff 91       	pop	r31
    182c:	ef 91       	pop	r30
    182e:	bf 91       	pop	r27
    1830:	af 91       	pop	r26
    1832:	9f 91       	pop	r25
    1834:	8f 91       	pop	r24
    1836:	7f 91       	pop	r23
    1838:	6f 91       	pop	r22
    183a:	5f 91       	pop	r21
    183c:	4f 91       	pop	r20
    183e:	3f 91       	pop	r19
    1840:	2f 91       	pop	r18
    1842:	0f 90       	pop	r0
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	0f 90       	pop	r0
    1848:	1f 90       	pop	r1
    184a:	18 95       	reti

0000184c <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    184c:	1f 92       	push	r1
    184e:	0f 92       	push	r0
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	0f 92       	push	r0
    1854:	11 24       	eor	r1, r1
    1856:	2f 93       	push	r18
    1858:	3f 93       	push	r19
    185a:	4f 93       	push	r20
    185c:	5f 93       	push	r21
    185e:	6f 93       	push	r22
    1860:	7f 93       	push	r23
    1862:	8f 93       	push	r24
    1864:	9f 93       	push	r25
    1866:	af 93       	push	r26
    1868:	bf 93       	push	r27
    186a:	ef 93       	push	r30
    186c:	ff 93       	push	r31
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0_callBackPtr != NULL_PTR)
    1876:	80 91 c4 00 	lds	r24, 0x00C4
    187a:	90 91 c5 00 	lds	r25, 0x00C5
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	29 f0       	breq	.+10     	; 0x188c <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer0_callBackPtr)();
    1882:	e0 91 c4 00 	lds	r30, 0x00C4
    1886:	f0 91 c5 00 	lds	r31, 0x00C5
    188a:	09 95       	icall
	}
}
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	ff 91       	pop	r31
    1892:	ef 91       	pop	r30
    1894:	bf 91       	pop	r27
    1896:	af 91       	pop	r26
    1898:	9f 91       	pop	r25
    189a:	8f 91       	pop	r24
    189c:	7f 91       	pop	r23
    189e:	6f 91       	pop	r22
    18a0:	5f 91       	pop	r21
    18a2:	4f 91       	pop	r20
    18a4:	3f 91       	pop	r19
    18a6:	2f 91       	pop	r18
    18a8:	0f 90       	pop	r0
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	0f 90       	pop	r0
    18ae:	1f 90       	pop	r1
    18b0:	18 95       	reti

000018b2 <__vector_8>:
ISR(TIMER1_OVF_vect)
{
    18b2:	1f 92       	push	r1
    18b4:	0f 92       	push	r0
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	0f 92       	push	r0
    18ba:	11 24       	eor	r1, r1
    18bc:	2f 93       	push	r18
    18be:	3f 93       	push	r19
    18c0:	4f 93       	push	r20
    18c2:	5f 93       	push	r21
    18c4:	6f 93       	push	r22
    18c6:	7f 93       	push	r23
    18c8:	8f 93       	push	r24
    18ca:	9f 93       	push	r25
    18cc:	af 93       	push	r26
    18ce:	bf 93       	push	r27
    18d0:	ef 93       	push	r30
    18d2:	ff 93       	push	r31
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1_callBackPtr != NULL_PTR)
    18dc:	80 91 c6 00 	lds	r24, 0x00C6
    18e0:	90 91 c7 00 	lds	r25, 0x00C7
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	29 f0       	breq	.+10     	; 0x18f2 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer1_callBackPtr)();
    18e8:	e0 91 c6 00 	lds	r30, 0x00C6
    18ec:	f0 91 c7 00 	lds	r31, 0x00C7
    18f0:	09 95       	icall
	}
}
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	ff 91       	pop	r31
    18f8:	ef 91       	pop	r30
    18fa:	bf 91       	pop	r27
    18fc:	af 91       	pop	r26
    18fe:	9f 91       	pop	r25
    1900:	8f 91       	pop	r24
    1902:	7f 91       	pop	r23
    1904:	6f 91       	pop	r22
    1906:	5f 91       	pop	r21
    1908:	4f 91       	pop	r20
    190a:	3f 91       	pop	r19
    190c:	2f 91       	pop	r18
    190e:	0f 90       	pop	r0
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	0f 90       	pop	r0
    1914:	1f 90       	pop	r1
    1916:	18 95       	reti

00001918 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    1918:	1f 92       	push	r1
    191a:	0f 92       	push	r0
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	0f 92       	push	r0
    1920:	11 24       	eor	r1, r1
    1922:	2f 93       	push	r18
    1924:	3f 93       	push	r19
    1926:	4f 93       	push	r20
    1928:	5f 93       	push	r21
    192a:	6f 93       	push	r22
    192c:	7f 93       	push	r23
    192e:	8f 93       	push	r24
    1930:	9f 93       	push	r25
    1932:	af 93       	push	r26
    1934:	bf 93       	push	r27
    1936:	ef 93       	push	r30
    1938:	ff 93       	push	r31
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1_callBackPtr != NULL_PTR)
    1942:	80 91 c6 00 	lds	r24, 0x00C6
    1946:	90 91 c7 00 	lds	r25, 0x00C7
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	29 f0       	breq	.+10     	; 0x1958 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer1_callBackPtr)();
    194e:	e0 91 c6 00 	lds	r30, 0x00C6
    1952:	f0 91 c7 00 	lds	r31, 0x00C7
    1956:	09 95       	icall
	}
}
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	ff 91       	pop	r31
    195e:	ef 91       	pop	r30
    1960:	bf 91       	pop	r27
    1962:	af 91       	pop	r26
    1964:	9f 91       	pop	r25
    1966:	8f 91       	pop	r24
    1968:	7f 91       	pop	r23
    196a:	6f 91       	pop	r22
    196c:	5f 91       	pop	r21
    196e:	4f 91       	pop	r20
    1970:	3f 91       	pop	r19
    1972:	2f 91       	pop	r18
    1974:	0f 90       	pop	r0
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	0f 90       	pop	r0
    197a:	1f 90       	pop	r1
    197c:	18 95       	reti

0000197e <__vector_4>:

ISR(TIMER2_OVF_vect)
{
    197e:	1f 92       	push	r1
    1980:	0f 92       	push	r0
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	0f 92       	push	r0
    1986:	11 24       	eor	r1, r1
    1988:	2f 93       	push	r18
    198a:	3f 93       	push	r19
    198c:	4f 93       	push	r20
    198e:	5f 93       	push	r21
    1990:	6f 93       	push	r22
    1992:	7f 93       	push	r23
    1994:	8f 93       	push	r24
    1996:	9f 93       	push	r25
    1998:	af 93       	push	r26
    199a:	bf 93       	push	r27
    199c:	ef 93       	push	r30
    199e:	ff 93       	push	r31
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2_callBackPtr != NULL_PTR)
    19a8:	80 91 c8 00 	lds	r24, 0x00C8
    19ac:	90 91 c9 00 	lds	r25, 0x00C9
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	29 f0       	breq	.+10     	; 0x19be <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer2_callBackPtr)();
    19b4:	e0 91 c8 00 	lds	r30, 0x00C8
    19b8:	f0 91 c9 00 	lds	r31, 0x00C9
    19bc:	09 95       	icall
	}
}
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	ff 91       	pop	r31
    19c4:	ef 91       	pop	r30
    19c6:	bf 91       	pop	r27
    19c8:	af 91       	pop	r26
    19ca:	9f 91       	pop	r25
    19cc:	8f 91       	pop	r24
    19ce:	7f 91       	pop	r23
    19d0:	6f 91       	pop	r22
    19d2:	5f 91       	pop	r21
    19d4:	4f 91       	pop	r20
    19d6:	3f 91       	pop	r19
    19d8:	2f 91       	pop	r18
    19da:	0f 90       	pop	r0
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	0f 90       	pop	r0
    19e0:	1f 90       	pop	r1
    19e2:	18 95       	reti

000019e4 <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    19e4:	1f 92       	push	r1
    19e6:	0f 92       	push	r0
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	0f 92       	push	r0
    19ec:	11 24       	eor	r1, r1
    19ee:	2f 93       	push	r18
    19f0:	3f 93       	push	r19
    19f2:	4f 93       	push	r20
    19f4:	5f 93       	push	r21
    19f6:	6f 93       	push	r22
    19f8:	7f 93       	push	r23
    19fa:	8f 93       	push	r24
    19fc:	9f 93       	push	r25
    19fe:	af 93       	push	r26
    1a00:	bf 93       	push	r27
    1a02:	ef 93       	push	r30
    1a04:	ff 93       	push	r31
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2_callBackPtr != NULL_PTR)
    1a0e:	80 91 c8 00 	lds	r24, 0x00C8
    1a12:	90 91 c9 00 	lds	r25, 0x00C9
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	29 f0       	breq	.+10     	; 0x1a24 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer2_callBackPtr)();
    1a1a:	e0 91 c8 00 	lds	r30, 0x00C8
    1a1e:	f0 91 c9 00 	lds	r31, 0x00C9
    1a22:	09 95       	icall
	}
}
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	ff 91       	pop	r31
    1a2a:	ef 91       	pop	r30
    1a2c:	bf 91       	pop	r27
    1a2e:	af 91       	pop	r26
    1a30:	9f 91       	pop	r25
    1a32:	8f 91       	pop	r24
    1a34:	7f 91       	pop	r23
    1a36:	6f 91       	pop	r22
    1a38:	5f 91       	pop	r21
    1a3a:	4f 91       	pop	r20
    1a3c:	3f 91       	pop	r19
    1a3e:	2f 91       	pop	r18
    1a40:	0f 90       	pop	r0
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	0f 90       	pop	r0
    1a46:	1f 90       	pop	r1
    1a48:	18 95       	reti

00001a4a <timer_init>:
 *******************************************************************************/
/*
 * Description : Function to call  the Timer_init() function based on timer type
 */
void timer_init(const timer_ConfigType * Config_Ptr)
{
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <timer_init+0x6>
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->timer==0)
    1a58:	e9 81       	ldd	r30, Y+1	; 0x01
    1a5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a5c:	80 81       	ld	r24, Z
    1a5e:	88 23       	and	r24, r24
    1a60:	29 f4       	brne	.+10     	; 0x1a6c <timer_init+0x22>
		timer0_init(Config_Ptr);
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	9a 81       	ldd	r25, Y+2	; 0x02
    1a66:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <timer0_init>
    1a6a:	13 c0       	rjmp	.+38     	; 0x1a92 <timer_init+0x48>
	else if(Config_Ptr->timer==1)
    1a6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a70:	80 81       	ld	r24, Z
    1a72:	81 30       	cpi	r24, 0x01	; 1
    1a74:	29 f4       	brne	.+10     	; 0x1a80 <timer_init+0x36>
		timer1_init(Config_Ptr);
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7a:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <timer1_init>
    1a7e:	09 c0       	rjmp	.+18     	; 0x1a92 <timer_init+0x48>
	else if(Config_Ptr->timer==2)
    1a80:	e9 81       	ldd	r30, Y+1	; 0x01
    1a82:	fa 81       	ldd	r31, Y+2	; 0x02
    1a84:	80 81       	ld	r24, Z
    1a86:	82 30       	cpi	r24, 0x02	; 2
    1a88:	21 f4       	brne	.+8      	; 0x1a92 <timer_init+0x48>
		timer2_init(Config_Ptr);
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8e:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <timer2_init>
}
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <timer0_init>:
 * 	3. Enable timer0 overflow/compare match Interrupt.
 * 	4. Initialize Timer0 Registers
 */

void timer0_init(const timer_ConfigType * Config_Ptr)
{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <timer0_init+0x6>
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	9a 83       	std	Y+2, r25	; 0x02
    1aa8:	89 83       	std	Y+1, r24	; 0x01
	/* Timer0 always operates in a non-pwm mode*/
    TCCR0|=(1<<FOC0);
    1aaa:	a3 e5       	ldi	r26, 0x53	; 83
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e3 e5       	ldi	r30, 0x53	; 83
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	80 68       	ori	r24, 0x80	; 128
    1ab6:	8c 93       	st	X, r24
    /*
     * insert the required clock value in the first three bits (CS02, CS01 and CS00)
     * of TCCR0 Register
     */
    TCCR0= ( TCCR0 & 0xF8) | (Config_Ptr->clock);
    1ab8:	a3 e5       	ldi	r26, 0x53	; 83
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e3 e5       	ldi	r30, 0x53	; 83
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	98 2f       	mov	r25, r24
    1ac4:	98 7f       	andi	r25, 0xF8	; 248
    1ac6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aca:	81 81       	ldd	r24, Z+1	; 0x01
    1acc:	89 2b       	or	r24, r25
    1ace:	8c 93       	st	X, r24
    /*
     * insert the required waveform generation mode in bit no. 6 (WFGM00) bit &
     * bit no.3 (WFGM01) bit in TCCR0 Register
     */
    TCCR0= ( TCCR0 & 0xBF) | ((Config_Ptr->mode&0x01)<<6);
    1ad0:	a3 e5       	ldi	r26, 0x53	; 83
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e3 e5       	ldi	r30, 0x53	; 83
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	28 2f       	mov	r18, r24
    1adc:	2f 7b       	andi	r18, 0xBF	; 191
    1ade:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae2:	82 81       	ldd	r24, Z+2	; 0x02
    1ae4:	88 2f       	mov	r24, r24
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	81 70       	andi	r24, 0x01	; 1
    1aea:	90 70       	andi	r25, 0x00	; 0
    1aec:	00 24       	eor	r0, r0
    1aee:	96 95       	lsr	r25
    1af0:	87 95       	ror	r24
    1af2:	07 94       	ror	r0
    1af4:	96 95       	lsr	r25
    1af6:	87 95       	ror	r24
    1af8:	07 94       	ror	r0
    1afa:	98 2f       	mov	r25, r24
    1afc:	80 2d       	mov	r24, r0
    1afe:	82 2b       	or	r24, r18
    1b00:	8c 93       	st	X, r24
    TCCR0= ( TCCR0 & 0xF7) | ((Config_Ptr->mode&0x02)<<2);
    1b02:	a3 e5       	ldi	r26, 0x53	; 83
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e3 e5       	ldi	r30, 0x53	; 83
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	27 7f       	andi	r18, 0xF7	; 247
    1b10:	e9 81       	ldd	r30, Y+1	; 0x01
    1b12:	fa 81       	ldd	r31, Y+2	; 0x02
    1b14:	82 81       	ldd	r24, Z+2	; 0x02
    1b16:	88 2f       	mov	r24, r24
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	82 70       	andi	r24, 0x02	; 2
    1b1c:	90 70       	andi	r25, 0x00	; 0
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	82 2b       	or	r24, r18
    1b28:	8c 93       	st	X, r24

    /* Initial Value for Timer0 */
    TCNT0 =Config_Ptr->initialValue ;
    1b2a:	a2 e5       	ldi	r26, 0x52	; 82
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b30:	fa 81       	ldd	r31, Y+2	; 0x02
    1b32:	83 81       	ldd	r24, Z+3	; 0x03
    1b34:	94 81       	ldd	r25, Z+4	; 0x04
    1b36:	8c 93       	st	X, r24
    /* Compare Value for Timer0 */
    OCR0=Config_Ptr->compareValue ;
    1b38:	ac e5       	ldi	r26, 0x5C	; 92
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b40:	85 81       	ldd	r24, Z+5	; 0x05
    1b42:	96 81       	ldd	r25, Z+6	; 0x06
    1b44:	8c 93       	st	X, r24
    /*  Timer0 overflow interrupt enable*/
    if(Config_Ptr->mode==0)
    1b46:	e9 81       	ldd	r30, Y+1	; 0x01
    1b48:	fa 81       	ldd	r31, Y+2	; 0x02
    1b4a:	82 81       	ldd	r24, Z+2	; 0x02
    1b4c:	88 23       	and	r24, r24
    1b4e:	41 f4       	brne	.+16     	; 0x1b60 <timer0_init+0xc4>
    TIMSK|=(1<<TOIE0);
    1b50:	a9 e5       	ldi	r26, 0x59	; 89
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e9 e5       	ldi	r30, 0x59	; 89
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	81 60       	ori	r24, 0x01	; 1
    1b5c:	8c 93       	st	X, r24
    1b5e:	0c c0       	rjmp	.+24     	; 0x1b78 <timer0_init+0xdc>
    /*  Timer0 compare match interrupt enable*/
    else if(Config_Ptr->mode==2)
    1b60:	e9 81       	ldd	r30, Y+1	; 0x01
    1b62:	fa 81       	ldd	r31, Y+2	; 0x02
    1b64:	82 81       	ldd	r24, Z+2	; 0x02
    1b66:	82 30       	cpi	r24, 0x02	; 2
    1b68:	39 f4       	brne	.+14     	; 0x1b78 <timer0_init+0xdc>
    TIMSK|=(1<<OCIE0);
    1b6a:	a9 e5       	ldi	r26, 0x59	; 89
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e9 e5       	ldi	r30, 0x59	; 89
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	82 60       	ori	r24, 0x02	; 2
    1b76:	8c 93       	st	X, r24


}
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <timer0_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */
void timer0_setCallBack(void(*a_ptr)(void))
{
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	00 d0       	rcall	.+0      	; 0x1b88 <timer0_setCallBack+0x6>
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
    1b8c:	9a 83       	std	Y+2, r25	; 0x02
    1b8e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_timer0_callBackPtr= a_ptr;
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	9a 81       	ldd	r25, Y+2	; 0x02
    1b94:	90 93 c5 00 	sts	0x00C5, r25
    1b98:	80 93 c4 00 	sts	0x00C4, r24
}
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <timer1_init>:
void timer1_init(const timer_ConfigType * Config_Ptr)
{
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <timer1_init+0x6>
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	9a 83       	std	Y+2, r25	; 0x02
    1bb2:	89 83       	std	Y+1, r24	; 0x01
	/* Timer1 always operates in a non-pwm mode*/
	TCCR1A=(1<<FOC1A)|(1<<FOC1B);
    1bb4:	ef e4       	ldi	r30, 0x4F	; 79
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	8c e0       	ldi	r24, 0x0C	; 12
    1bba:	80 83       	st	Z, r24

    /*
     * insert the required clock value in the first three bits (CS12, CS11 and CS10)
     * of TCCR1B Register
     */
    TCCR1B= (TCCR1B & 0xF8) | Config_Ptr->clock;
    1bbc:	ae e4       	ldi	r26, 0x4E	; 78
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	ee e4       	ldi	r30, 0x4E	; 78
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	98 2f       	mov	r25, r24
    1bc8:	98 7f       	andi	r25, 0xF8	; 248
    1bca:	e9 81       	ldd	r30, Y+1	; 0x01
    1bcc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bce:	81 81       	ldd	r24, Z+1	; 0x01
    1bd0:	89 2b       	or	r24, r25
    1bd2:	8c 93       	st	X, r24
    /*
     * insert the required waveform generation mode in bit no. 4 (WFGM13) bit &
     * bit no.3 (WGM12) bit in TCCR1B Register
     * and bit no.1 (WGM11)& bit no.0(WGM10)in TCCR1A Register
     */
    if(Config_Ptr->mode==2)
    1bd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd8:	82 81       	ldd	r24, Z+2	; 0x02
    1bda:	82 30       	cpi	r24, 0x02	; 2
    1bdc:	39 f4       	brne	.+14     	; 0x1bec <timer1_init+0x46>
    TCCR1B|= (1<<WGM12);
    1bde:	ae e4       	ldi	r26, 0x4E	; 78
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	ee e4       	ldi	r30, 0x4E	; 78
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	88 60       	ori	r24, 0x08	; 8
    1bea:	8c 93       	st	X, r24


    /* Initial Value for Timer1 */
    TCNT1 =Config_Ptr->initialValue ;
    1bec:	ac e4       	ldi	r26, 0x4C	; 76
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf4:	83 81       	ldd	r24, Z+3	; 0x03
    1bf6:	94 81       	ldd	r25, Z+4	; 0x04
    1bf8:	11 96       	adiw	r26, 0x01	; 1
    1bfa:	9c 93       	st	X, r25
    1bfc:	8e 93       	st	-X, r24
    /* Compare Value for Timer1 */
    OCR1A=Config_Ptr->compareValue ;
    1bfe:	aa e4       	ldi	r26, 0x4A	; 74
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e9 81       	ldd	r30, Y+1	; 0x01
    1c04:	fa 81       	ldd	r31, Y+2	; 0x02
    1c06:	85 81       	ldd	r24, Z+5	; 0x05
    1c08:	96 81       	ldd	r25, Z+6	; 0x06
    1c0a:	11 96       	adiw	r26, 0x01	; 1
    1c0c:	9c 93       	st	X, r25
    1c0e:	8e 93       	st	-X, r24
    /*  Timer1 overflow interrupt enable*/
    if(Config_Ptr->mode==0)
    1c10:	e9 81       	ldd	r30, Y+1	; 0x01
    1c12:	fa 81       	ldd	r31, Y+2	; 0x02
    1c14:	82 81       	ldd	r24, Z+2	; 0x02
    1c16:	88 23       	and	r24, r24
    1c18:	41 f4       	brne	.+16     	; 0x1c2a <timer1_init+0x84>
    TIMSK|=(1<<TOIE1);
    1c1a:	a9 e5       	ldi	r26, 0x59	; 89
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e9 e5       	ldi	r30, 0x59	; 89
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	84 60       	ori	r24, 0x04	; 4
    1c26:	8c 93       	st	X, r24
    1c28:	09 c0       	rjmp	.+18     	; 0x1c3c <timer1_init+0x96>
    /*  Timer1 compare match interrupt enable for CHANNEL A*/
    else if(Config_Ptr->mode==2)
    1c2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2e:	82 81       	ldd	r24, Z+2	; 0x02
    1c30:	82 30       	cpi	r24, 0x02	; 2
    1c32:	21 f4       	brne	.+8      	; 0x1c3c <timer1_init+0x96>
    TIMSK=(1<<OCIE1A);
    1c34:	e9 e5       	ldi	r30, 0x59	; 89
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 e1       	ldi	r24, 0x10	; 16
    1c3a:	80 83       	st	Z, r24


}
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret

00001c46 <timer1_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */
void timer1_setCallBack(void(*a_ptr)(void))
{
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <timer1_setCallBack+0x6>
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	9a 83       	std	Y+2, r25	; 0x02
    1c52:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_timer1_callBackPtr= a_ptr;
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	9a 81       	ldd	r25, Y+2	; 0x02
    1c58:	90 93 c7 00 	sts	0x00C7, r25
    1c5c:	80 93 c6 00 	sts	0x00C6, r24
}
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <timer2_init>:
void timer2_init(const timer_ConfigType * Config_Ptr)
{
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	00 d0       	rcall	.+0      	; 0x1c70 <timer2_init+0x6>
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	9a 83       	std	Y+2, r25	; 0x02
    1c76:	89 83       	std	Y+1, r24	; 0x01
	/* Timer2 always operates in a non-pwm mode*/
    TCCR2|=(1<<FOC2);
    1c78:	a5 e4       	ldi	r26, 0x45	; 69
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e5 e4       	ldi	r30, 0x45	; 69
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	80 68       	ori	r24, 0x80	; 128
    1c84:	8c 93       	st	X, r24
    /*
     * insert the required clock value in the first three bits (CS22, CS21 and CS20)
     * of TCCR2 Register
     */
    TCCR2= ( TCCR2 & 0xF8) | (Config_Ptr->clock);
    1c86:	a5 e4       	ldi	r26, 0x45	; 69
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	e5 e4       	ldi	r30, 0x45	; 69
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	98 2f       	mov	r25, r24
    1c92:	98 7f       	andi	r25, 0xF8	; 248
    1c94:	e9 81       	ldd	r30, Y+1	; 0x01
    1c96:	fa 81       	ldd	r31, Y+2	; 0x02
    1c98:	81 81       	ldd	r24, Z+1	; 0x01
    1c9a:	89 2b       	or	r24, r25
    1c9c:	8c 93       	st	X, r24
    /*
     * insert the required waveform generation mode in bit no. 6 (WFGM20) bit &
     * bit no.3 (WFGM21) bit in TCCR2 Register
     */
    TCCR2= ( TCCR2 & 0xBF) | ((Config_Ptr->mode&0x01)<<6);
    1c9e:	a5 e4       	ldi	r26, 0x45	; 69
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e5 e4       	ldi	r30, 0x45	; 69
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	28 2f       	mov	r18, r24
    1caa:	2f 7b       	andi	r18, 0xBF	; 191
    1cac:	e9 81       	ldd	r30, Y+1	; 0x01
    1cae:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb0:	82 81       	ldd	r24, Z+2	; 0x02
    1cb2:	88 2f       	mov	r24, r24
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	81 70       	andi	r24, 0x01	; 1
    1cb8:	90 70       	andi	r25, 0x00	; 0
    1cba:	00 24       	eor	r0, r0
    1cbc:	96 95       	lsr	r25
    1cbe:	87 95       	ror	r24
    1cc0:	07 94       	ror	r0
    1cc2:	96 95       	lsr	r25
    1cc4:	87 95       	ror	r24
    1cc6:	07 94       	ror	r0
    1cc8:	98 2f       	mov	r25, r24
    1cca:	80 2d       	mov	r24, r0
    1ccc:	82 2b       	or	r24, r18
    1cce:	8c 93       	st	X, r24
    TCCR2= ( TCCR2 & 0xF7) | ((Config_Ptr->mode&0x02)<<2);
    1cd0:	a5 e4       	ldi	r26, 0x45	; 69
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e5 e4       	ldi	r30, 0x45	; 69
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	28 2f       	mov	r18, r24
    1cdc:	27 7f       	andi	r18, 0xF7	; 247
    1cde:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce2:	82 81       	ldd	r24, Z+2	; 0x02
    1ce4:	88 2f       	mov	r24, r24
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	82 70       	andi	r24, 0x02	; 2
    1cea:	90 70       	andi	r25, 0x00	; 0
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	82 2b       	or	r24, r18
    1cf6:	8c 93       	st	X, r24

    /* Initial Value for Timer0 */
    TCNT2 =Config_Ptr->initialValue ;
    1cf8:	a4 e4       	ldi	r26, 0x44	; 68
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cfe:	fa 81       	ldd	r31, Y+2	; 0x02
    1d00:	83 81       	ldd	r24, Z+3	; 0x03
    1d02:	94 81       	ldd	r25, Z+4	; 0x04
    1d04:	8c 93       	st	X, r24
    /* Compare Value for Timer0 */
    OCR2=Config_Ptr->compareValue ;
    1d06:	a3 e4       	ldi	r26, 0x43	; 67
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0e:	85 81       	ldd	r24, Z+5	; 0x05
    1d10:	96 81       	ldd	r25, Z+6	; 0x06
    1d12:	8c 93       	st	X, r24
    /*  Timer0 overflow interrupt enable*/
    if(Config_Ptr->mode==0)
    1d14:	e9 81       	ldd	r30, Y+1	; 0x01
    1d16:	fa 81       	ldd	r31, Y+2	; 0x02
    1d18:	82 81       	ldd	r24, Z+2	; 0x02
    1d1a:	88 23       	and	r24, r24
    1d1c:	41 f4       	brne	.+16     	; 0x1d2e <timer2_init+0xc4>
    TIMSK|=(1<<TOIE2);
    1d1e:	a9 e5       	ldi	r26, 0x59	; 89
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e9 e5       	ldi	r30, 0x59	; 89
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	80 64       	ori	r24, 0x40	; 64
    1d2a:	8c 93       	st	X, r24
    1d2c:	0c c0       	rjmp	.+24     	; 0x1d46 <timer2_init+0xdc>
    /*  Timer0 compare match interrupt enable*/
    else if(Config_Ptr->mode==2)
    1d2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d30:	fa 81       	ldd	r31, Y+2	; 0x02
    1d32:	82 81       	ldd	r24, Z+2	; 0x02
    1d34:	82 30       	cpi	r24, 0x02	; 2
    1d36:	39 f4       	brne	.+14     	; 0x1d46 <timer2_init+0xdc>
    TIMSK|=(1<<OCIE2);
    1d38:	a9 e5       	ldi	r26, 0x59	; 89
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e9 e5       	ldi	r30, 0x59	; 89
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	80 68       	ori	r24, 0x80	; 128
    1d44:	8c 93       	st	X, r24


}
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <timer2_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */
void timer2_setCallBack(void(*a_ptr)(void))
{
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	00 d0       	rcall	.+0      	; 0x1d56 <timer2_setCallBack+0x6>
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	9a 83       	std	Y+2, r25	; 0x02
    1d5c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_timer2_callBackPtr= a_ptr;
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	9a 81       	ldd	r25, Y+2	; 0x02
    1d62:	90 93 c9 00 	sts	0x00C9, r25
    1d66:	80 93 c8 00 	sts	0x00C8, r24
}
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const USART_ConfigType * Config_Ptr)
{
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	00 d0       	rcall	.+0      	; 0x1d7e <UART_init+0xa>
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    1d82:	9a 83       	std	Y+2, r25	; 0x02
    1d84:	89 83       	std	Y+1, r24	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1d86:	eb e2       	ldi	r30, 0x2B	; 43
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	82 e0       	ldi	r24, 0x02	; 2
    1d8c:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1d8e:	ea e2       	ldi	r30, 0x2A	; 42
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	88 e1       	ldi	r24, 0x18	; 24
    1d94:	80 83       	st	Z, r24
	UCSRB=(UCSRB&0xFB)|(((Config_Ptr->ch_size)&04));
    1d96:	aa e2       	ldi	r26, 0x2A	; 42
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	ea e2       	ldi	r30, 0x2A	; 42
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	98 2f       	mov	r25, r24
    1da2:	9b 7f       	andi	r25, 0xFB	; 251
    1da4:	e9 81       	ldd	r30, Y+1	; 0x01
    1da6:	fa 81       	ldd	r31, Y+2	; 0x02
    1da8:	82 81       	ldd	r24, Z+2	; 0x02
    1daa:	84 70       	andi	r24, 0x04	; 4
    1dac:	89 2b       	or	r24, r25
    1dae:	8c 93       	st	X, r24
	 * UPM1:0  = Selected parity mode
	 * USBS    = Selected number of stop bits
	 * UCSZ1:0 = Selected character size  mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    1db0:	e0 e4       	ldi	r30, 0x40	; 64
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 e8       	ldi	r24, 0x80	; 128
    1db6:	80 83       	st	Z, r24

	UCSRC=(UCSRC&0xF7)|(((Config_Ptr->stopBits)<<3));
    1db8:	a0 e4       	ldi	r26, 0x40	; 64
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e0 e4       	ldi	r30, 0x40	; 64
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	27 7f       	andi	r18, 0xF7	; 247
    1dc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1dc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1dca:	81 81       	ldd	r24, Z+1	; 0x01
    1dcc:	88 2f       	mov	r24, r24
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	88 0f       	add	r24, r24
    1dd2:	99 1f       	adc	r25, r25
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	88 0f       	add	r24, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	82 2b       	or	r24, r18
    1dde:	8c 93       	st	X, r24


	UCSRC=(UCSRC&0xF9)|((((Config_Ptr->ch_size)&03)<<1));
    1de0:	a0 e4       	ldi	r26, 0x40	; 64
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e0 e4       	ldi	r30, 0x40	; 64
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	28 2f       	mov	r18, r24
    1dec:	29 7f       	andi	r18, 0xF9	; 249
    1dee:	e9 81       	ldd	r30, Y+1	; 0x01
    1df0:	fa 81       	ldd	r31, Y+2	; 0x02
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	88 2f       	mov	r24, r24
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	83 70       	andi	r24, 0x03	; 3
    1dfa:	90 70       	andi	r25, 0x00	; 0
    1dfc:	88 0f       	add	r24, r24
    1dfe:	99 1f       	adc	r25, r25
    1e00:	82 2b       	or	r24, r18
    1e02:	8c 93       	st	X, r24

	UCSRC=(UCSRC&0xCF)|(((Config_Ptr->parity)<<4));
    1e04:	a0 e4       	ldi	r26, 0x40	; 64
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e0 e4       	ldi	r30, 0x40	; 64
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	28 2f       	mov	r18, r24
    1e10:	2f 7c       	andi	r18, 0xCF	; 207
    1e12:	e9 81       	ldd	r30, Y+1	; 0x01
    1e14:	fa 81       	ldd	r31, Y+2	; 0x02
    1e16:	80 81       	ld	r24, Z
    1e18:	88 2f       	mov	r24, r24
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	82 95       	swap	r24
    1e1e:	92 95       	swap	r25
    1e20:	90 7f       	andi	r25, 0xF0	; 240
    1e22:	98 27       	eor	r25, r24
    1e24:	80 7f       	andi	r24, 0xF0	; 240
    1e26:	98 27       	eor	r25, r24
    1e28:	82 2b       	or	r24, r18
    1e2a:	8c 93       	st	X, r24



	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
UBRRH = (((F_CPU / (Config_Ptr->BAUD_RATE * 8))) - 1)>>8;
    1e2c:	00 e4       	ldi	r16, 0x40	; 64
    1e2e:	10 e0       	ldi	r17, 0x00	; 0
    1e30:	e9 81       	ldd	r30, Y+1	; 0x01
    1e32:	fa 81       	ldd	r31, Y+2	; 0x02
    1e34:	83 81       	ldd	r24, Z+3	; 0x03
    1e36:	94 81       	ldd	r25, Z+4	; 0x04
    1e38:	a5 81       	ldd	r26, Z+5	; 0x05
    1e3a:	b6 81       	ldd	r27, Z+6	; 0x06
    1e3c:	88 0f       	add	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	aa 1f       	adc	r26, r26
    1e42:	bb 1f       	adc	r27, r27
    1e44:	88 0f       	add	r24, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	aa 1f       	adc	r26, r26
    1e4a:	bb 1f       	adc	r27, r27
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	aa 1f       	adc	r26, r26
    1e52:	bb 1f       	adc	r27, r27
    1e54:	9c 01       	movw	r18, r24
    1e56:	ad 01       	movw	r20, r26
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	92 e1       	ldi	r25, 0x12	; 18
    1e5c:	aa e7       	ldi	r26, 0x7A	; 122
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	bc 01       	movw	r22, r24
    1e62:	cd 01       	movw	r24, r26
    1e64:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__udivmodsi4>
    1e68:	da 01       	movw	r26, r20
    1e6a:	c9 01       	movw	r24, r18
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	a1 09       	sbc	r26, r1
    1e70:	b1 09       	sbc	r27, r1
    1e72:	89 2f       	mov	r24, r25
    1e74:	9a 2f       	mov	r25, r26
    1e76:	ab 2f       	mov	r26, r27
    1e78:	bb 27       	eor	r27, r27
    1e7a:	f8 01       	movw	r30, r16
    1e7c:	80 83       	st	Z, r24
		UBRRL = (((F_CPU / (Config_Ptr->BAUD_RATE * 8))) - 1);// UBRRL=103;
    1e7e:	09 e2       	ldi	r16, 0x29	; 41
    1e80:	10 e0       	ldi	r17, 0x00	; 0
    1e82:	e9 81       	ldd	r30, Y+1	; 0x01
    1e84:	fa 81       	ldd	r31, Y+2	; 0x02
    1e86:	83 81       	ldd	r24, Z+3	; 0x03
    1e88:	94 81       	ldd	r25, Z+4	; 0x04
    1e8a:	a5 81       	ldd	r26, Z+5	; 0x05
    1e8c:	b6 81       	ldd	r27, Z+6	; 0x06
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	aa 1f       	adc	r26, r26
    1e94:	bb 1f       	adc	r27, r27
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	aa 1f       	adc	r26, r26
    1e9c:	bb 1f       	adc	r27, r27
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	aa 1f       	adc	r26, r26
    1ea4:	bb 1f       	adc	r27, r27
    1ea6:	9c 01       	movw	r18, r24
    1ea8:	ad 01       	movw	r20, r26
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	92 e1       	ldi	r25, 0x12	; 18
    1eae:	aa e7       	ldi	r26, 0x7A	; 122
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	bc 01       	movw	r22, r24
    1eb4:	cd 01       	movw	r24, r26
    1eb6:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__udivmodsi4>
    1eba:	da 01       	movw	r26, r20
    1ebc:	c9 01       	movw	r24, r18
    1ebe:	81 50       	subi	r24, 0x01	; 1
    1ec0:	f8 01       	movw	r30, r16
    1ec2:	80 83       	st	Z, r24
}
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	1f 91       	pop	r17
    1ece:	0f 91       	pop	r16
    1ed0:	08 95       	ret

00001ed2 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	0f 92       	push	r0
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1ede:	eb e2       	ldi	r30, 0x2B	; 43
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	88 2f       	mov	r24, r24
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	80 72       	andi	r24, 0x20	; 32
    1eea:	90 70       	andi	r25, 0x00	; 0
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	b9 f3       	breq	.-18     	; 0x1ede <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    1ef0:	ec e2       	ldi	r30, 0x2C	; 44
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    1ef8:	0f 90       	pop	r0
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1f08:	eb e2       	ldi	r30, 0x2B	; 43
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	88 23       	and	r24, r24
    1f10:	dc f7       	brge	.-10     	; 0x1f08 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    1f12:	ec e2       	ldi	r30, 0x2C	; 44
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
}
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	08 95       	ret

00001f1e <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <UART_sendString+0x6>
    1f24:	0f 92       	push	r0
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	9b 83       	std	Y+3, r25	; 0x03
    1f2c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f2e:	19 82       	std	Y+1, r1	; 0x01
    1f30:	0e c0       	rjmp	.+28     	; 0x1f4e <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	e2 0f       	add	r30, r18
    1f40:	f3 1f       	adc	r31, r19
    1f42:	80 81       	ld	r24, Z
    1f44:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <UART_sendByte>
		i++;
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	8f 5f       	subi	r24, 0xFF	; 255
    1f4c:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	28 2f       	mov	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	9b 81       	ldd	r25, Y+3	; 0x03
    1f58:	fc 01       	movw	r30, r24
    1f5a:	e2 0f       	add	r30, r18
    1f5c:	f3 1f       	adc	r31, r19
    1f5e:	80 81       	ld	r24, Z
    1f60:	88 23       	and	r24, r24
    1f62:	39 f7       	brne	.-50     	; 0x1f32 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    1f70:	0f 93       	push	r16
    1f72:	1f 93       	push	r17
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	00 d0       	rcall	.+0      	; 0x1f7a <UART_receiveString+0xa>
    1f7a:	0f 92       	push	r0
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	9b 83       	std	Y+3, r25	; 0x03
    1f82:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f84:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f90:	8c 01       	movw	r16, r24
    1f92:	02 0f       	add	r16, r18
    1f94:	13 1f       	adc	r17, r19
    1f96:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <UART_recieveByte>
    1f9a:	f8 01       	movw	r30, r16
    1f9c:	80 83       	st	Z, r24
    1f9e:	0f c0       	rjmp	.+30     	; 0x1fbe <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	8f 5f       	subi	r24, 0xFF	; 255
    1fa4:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	28 2f       	mov	r18, r24
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	8a 81       	ldd	r24, Y+2	; 0x02
    1fae:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb0:	8c 01       	movw	r16, r24
    1fb2:	02 0f       	add	r16, r18
    1fb4:	13 1f       	adc	r17, r19
    1fb6:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <UART_recieveByte>
    1fba:	f8 01       	movw	r30, r16
    1fbc:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	28 2f       	mov	r18, r24
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc8:	fc 01       	movw	r30, r24
    1fca:	e2 0f       	add	r30, r18
    1fcc:	f3 1f       	adc	r31, r19
    1fce:	80 81       	ld	r24, Z
    1fd0:	83 32       	cpi	r24, 0x23	; 35
    1fd2:	31 f7       	brne	.-52     	; 0x1fa0 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fde:	fc 01       	movw	r30, r24
    1fe0:	e2 0f       	add	r30, r18
    1fe2:	f3 1f       	adc	r31, r19
    1fe4:	10 82       	st	Z, r1
}
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	1f 91       	pop	r17
    1ff2:	0f 91       	pop	r16
    1ff4:	08 95       	ret

00001ff6 <__udivmodsi4>:
    1ff6:	a1 e2       	ldi	r26, 0x21	; 33
    1ff8:	1a 2e       	mov	r1, r26
    1ffa:	aa 1b       	sub	r26, r26
    1ffc:	bb 1b       	sub	r27, r27
    1ffe:	fd 01       	movw	r30, r26
    2000:	0d c0       	rjmp	.+26     	; 0x201c <__udivmodsi4_ep>

00002002 <__udivmodsi4_loop>:
    2002:	aa 1f       	adc	r26, r26
    2004:	bb 1f       	adc	r27, r27
    2006:	ee 1f       	adc	r30, r30
    2008:	ff 1f       	adc	r31, r31
    200a:	a2 17       	cp	r26, r18
    200c:	b3 07       	cpc	r27, r19
    200e:	e4 07       	cpc	r30, r20
    2010:	f5 07       	cpc	r31, r21
    2012:	20 f0       	brcs	.+8      	; 0x201c <__udivmodsi4_ep>
    2014:	a2 1b       	sub	r26, r18
    2016:	b3 0b       	sbc	r27, r19
    2018:	e4 0b       	sbc	r30, r20
    201a:	f5 0b       	sbc	r31, r21

0000201c <__udivmodsi4_ep>:
    201c:	66 1f       	adc	r22, r22
    201e:	77 1f       	adc	r23, r23
    2020:	88 1f       	adc	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	1a 94       	dec	r1
    2026:	69 f7       	brne	.-38     	; 0x2002 <__udivmodsi4_loop>
    2028:	60 95       	com	r22
    202a:	70 95       	com	r23
    202c:	80 95       	com	r24
    202e:	90 95       	com	r25
    2030:	9b 01       	movw	r18, r22
    2032:	ac 01       	movw	r20, r24
    2034:	bd 01       	movw	r22, r26
    2036:	cf 01       	movw	r24, r30
    2038:	08 95       	ret

0000203a <__prologue_saves__>:
    203a:	2f 92       	push	r2
    203c:	3f 92       	push	r3
    203e:	4f 92       	push	r4
    2040:	5f 92       	push	r5
    2042:	6f 92       	push	r6
    2044:	7f 92       	push	r7
    2046:	8f 92       	push	r8
    2048:	9f 92       	push	r9
    204a:	af 92       	push	r10
    204c:	bf 92       	push	r11
    204e:	cf 92       	push	r12
    2050:	df 92       	push	r13
    2052:	ef 92       	push	r14
    2054:	ff 92       	push	r15
    2056:	0f 93       	push	r16
    2058:	1f 93       	push	r17
    205a:	cf 93       	push	r28
    205c:	df 93       	push	r29
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	ca 1b       	sub	r28, r26
    2064:	db 0b       	sbc	r29, r27
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	de bf       	out	0x3e, r29	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	cd bf       	out	0x3d, r28	; 61
    2070:	09 94       	ijmp

00002072 <__epilogue_restores__>:
    2072:	2a 88       	ldd	r2, Y+18	; 0x12
    2074:	39 88       	ldd	r3, Y+17	; 0x11
    2076:	48 88       	ldd	r4, Y+16	; 0x10
    2078:	5f 84       	ldd	r5, Y+15	; 0x0f
    207a:	6e 84       	ldd	r6, Y+14	; 0x0e
    207c:	7d 84       	ldd	r7, Y+13	; 0x0d
    207e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2080:	9b 84       	ldd	r9, Y+11	; 0x0b
    2082:	aa 84       	ldd	r10, Y+10	; 0x0a
    2084:	b9 84       	ldd	r11, Y+9	; 0x09
    2086:	c8 84       	ldd	r12, Y+8	; 0x08
    2088:	df 80       	ldd	r13, Y+7	; 0x07
    208a:	ee 80       	ldd	r14, Y+6	; 0x06
    208c:	fd 80       	ldd	r15, Y+5	; 0x05
    208e:	0c 81       	ldd	r16, Y+4	; 0x04
    2090:	1b 81       	ldd	r17, Y+3	; 0x03
    2092:	aa 81       	ldd	r26, Y+2	; 0x02
    2094:	b9 81       	ldd	r27, Y+1	; 0x01
    2096:	ce 0f       	add	r28, r30
    2098:	d1 1d       	adc	r29, r1
    209a:	0f b6       	in	r0, 0x3f	; 63
    209c:	f8 94       	cli
    209e:	de bf       	out	0x3e, r29	; 62
    20a0:	0f be       	out	0x3f, r0	; 63
    20a2:	cd bf       	out	0x3d, r28	; 61
    20a4:	ed 01       	movw	r28, r26
    20a6:	08 95       	ret

000020a8 <_exit>:
    20a8:	f8 94       	cli

000020aa <__stop_program>:
    20aa:	ff cf       	rjmp	.-2      	; 0x20aa <__stop_program>
