
door_locker_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000241c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00800060  0000241c  000024b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000ce  008000ce  0000251e  2**0
                  ALLOC
  3 .stab         00001fd4  00000000  00000000  00002520  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001117  00000000  00000000  000044f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000560b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000574b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000058bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007504  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000083ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000919c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000092fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009589  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009d57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 65 0e 	jmp	0x1cca	; 0x1cca <__vector_3>
      10:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__vector_8>
      24:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3c       	cpi	r26, 0xCE	; 206
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ec       	ldi	r26, 0xCE	; 206
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3d       	cpi	r26, 0xD6	; 214
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 eb       	ldi	r26, 0xB7	; 183
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	87 eb       	ldi	r24, 0xB7	; 183
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
static uint8 error_flag=0;

void error_timer(void);

int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	e6 97       	sbiw	r28, 0x36	; 54
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	uint8 MC2_RequiredAction;

	uint8 stars_count=0;
     b5a:	1d 8e       	std	Y+29, r1	; 0x1d
	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
     b5c:	af e5       	ldi	r26, 0x5F	; 95
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ef e5       	ldi	r30, 0x5F	; 95
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 68       	ori	r24, 0x80	; 128
     b68:	8c 93       	st	X, r24


	/* Initialize both the LCD and ICU driver */
	LCD_init();
     b6a:	0e 94 a2 08 	call	0x1144	; 0x1144 <LCD_init>

	USART_ConfigType USART_Config={DISABLE,ONE_BIT,EGIHT,standard_6} ;
     b6e:	ce 01       	movw	r24, r28
     b70:	4f 96       	adiw	r24, 0x1f	; 31
     b72:	9e a7       	std	Y+46, r25	; 0x2e
     b74:	8d a7       	std	Y+45, r24	; 0x2d
     b76:	e6 ec       	ldi	r30, 0xC6	; 198
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	f8 ab       	std	Y+48, r31	; 0x30
     b7c:	ef a7       	std	Y+47, r30	; 0x2f
     b7e:	f7 e0       	ldi	r31, 0x07	; 7
     b80:	f9 ab       	std	Y+49, r31	; 0x31
     b82:	ef a5       	ldd	r30, Y+47	; 0x2f
     b84:	f8 a9       	ldd	r31, Y+48	; 0x30
     b86:	00 80       	ld	r0, Z
     b88:	8f a5       	ldd	r24, Y+47	; 0x2f
     b8a:	98 a9       	ldd	r25, Y+48	; 0x30
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	98 ab       	std	Y+48, r25	; 0x30
     b90:	8f a7       	std	Y+47, r24	; 0x2f
     b92:	ed a5       	ldd	r30, Y+45	; 0x2d
     b94:	fe a5       	ldd	r31, Y+46	; 0x2e
     b96:	00 82       	st	Z, r0
     b98:	8d a5       	ldd	r24, Y+45	; 0x2d
     b9a:	9e a5       	ldd	r25, Y+46	; 0x2e
     b9c:	01 96       	adiw	r24, 0x01	; 1
     b9e:	9e a7       	std	Y+46, r25	; 0x2e
     ba0:	8d a7       	std	Y+45, r24	; 0x2d
     ba2:	99 a9       	ldd	r25, Y+49	; 0x31
     ba4:	91 50       	subi	r25, 0x01	; 1
     ba6:	99 ab       	std	Y+49, r25	; 0x31
     ba8:	e9 a9       	ldd	r30, Y+49	; 0x31
     baa:	ee 23       	and	r30, r30
     bac:	51 f7       	brne	.-44     	; 0xb82 <main+0x3c>
	UART_init(&USART_Config);
     bae:	ce 01       	movw	r24, r28
     bb0:	4f 96       	adiw	r24, 0x1f	; 31
     bb2:	0e 94 2d 10 	call	0x205a	; 0x205a <UART_init>

	UART_sendByte(M1_READY); // MC1 is ready
     bb6:	80 e1       	ldi	r24, 0x10	; 16
     bb8:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <UART_sendByte>
	while(1)
	{
		MC2_RequiredAction=UART_recieveByte();
     bbc:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <UART_recieveByte>
     bc0:	8e 8f       	std	Y+30, r24	; 0x1e

		if(MC2_RequiredAction==NEW_PASSWORD)
     bc2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	29 f5       	brne	.+74     	; 0xc12 <main+0xcc>
		{
			stars_count=0;
     bc8:	1d 8e       	std	Y+29, r1	; 0x1d
			LCD_clearScreen();
     bca:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_clearScreen>

           do
           {
        	   LCD_displayStringRowColumn(0,0,"PleaseEnterPass:");
     bce:	20 e6       	ldi	r18, 0x60	; 96
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	a9 01       	movw	r20, r18
     bd8:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <LCD_displayStringRowColumn>
        	   pressed_key=KeyPad_getPressedKey();
     bdc:	0e 94 a4 07 	call	0xf48	; 0xf48 <KeyPad_getPressedKey>
     be0:	80 93 cf 00 	sts	0x00CF, r24

        	   if(pressed_key !=13)
     be4:	80 91 cf 00 	lds	r24, 0x00CF
     be8:	8d 30       	cpi	r24, 0x0D	; 13
     bea:	39 f0       	breq	.+14     	; 0xbfa <main+0xb4>
        	   {
        		   LCD_goToRowColumn(1,stars_count);
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	6d 8d       	ldd	r22, Y+29	; 0x1d
     bf0:	0e 94 de 0c 	call	0x19bc	; 0x19bc <LCD_goToRowColumn>
        		   LCD_displayCharacter('*');
     bf4:	8a e2       	ldi	r24, 0x2A	; 42
     bf6:	0e 94 b9 0a 	call	0x1572	; 0x1572 <LCD_displayCharacter>
        	   }
        	    UART_sendByte(pressed_key);
     bfa:	80 91 cf 00 	lds	r24, 0x00CF
     bfe:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <UART_sendByte>
        	    stars_count++;
     c02:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c04:	8f 5f       	subi	r24, 0xFF	; 255
     c06:	8d 8f       	std	Y+29, r24	; 0x1d

           }while(pressed_key != 13 );
     c08:	80 91 cf 00 	lds	r24, 0x00CF
     c0c:	8d 30       	cpi	r24, 0x0D	; 13
     c0e:	f9 f6       	brne	.-66     	; 0xbce <main+0x88>
     c10:	d5 cf       	rjmp	.-86     	; 0xbbc <main+0x76>

		}

		//check_for match
		else if(MC2_RequiredAction==RE_ENTER_PASSWORD)
     c12:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c14:	83 30       	cpi	r24, 0x03	; 3
     c16:	09 f0       	breq	.+2      	; 0xc1a <main+0xd4>
     c18:	98 c0       	rjmp	.+304    	; 0xd4a <main+0x204>
		{
			stars_count=0;
     c1a:	1d 8e       	std	Y+29, r1	; 0x1d
			LCD_clearScreen();
     c1c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Pls.Re-EnterPass:");
     c20:	21 e7       	ldi	r18, 0x71	; 113
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	a9 01       	movw	r20, r18
     c2a:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <LCD_displayStringRowColumn>
			do
			{
				pressed_key=KeyPad_getPressedKey();
     c2e:	0e 94 a4 07 	call	0xf48	; 0xf48 <KeyPad_getPressedKey>
     c32:	80 93 cf 00 	sts	0x00CF, r24
				if(pressed_key !=13 )
     c36:	80 91 cf 00 	lds	r24, 0x00CF
     c3a:	8d 30       	cpi	r24, 0x0D	; 13
     c3c:	39 f0       	breq	.+14     	; 0xc4c <main+0x106>
				{
					LCD_goToRowColumn(1,stars_count);
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	6d 8d       	ldd	r22, Y+29	; 0x1d
     c42:	0e 94 de 0c 	call	0x19bc	; 0x19bc <LCD_goToRowColumn>
					LCD_displayCharacter('*');
     c46:	8a e2       	ldi	r24, 0x2A	; 42
     c48:	0e 94 b9 0a 	call	0x1572	; 0x1572 <LCD_displayCharacter>
				}
				UART_sendByte(pressed_key);
     c4c:	80 91 cf 00 	lds	r24, 0x00CF
     c50:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <UART_sendByte>
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	aa ef       	ldi	r26, 0xFA	; 250
     c5a:	b3 e4       	ldi	r27, 0x43	; 67
     c5c:	89 8f       	std	Y+25, r24	; 0x19
     c5e:	9a 8f       	std	Y+26, r25	; 0x1a
     c60:	ab 8f       	std	Y+27, r26	; 0x1b
     c62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c64:	69 8d       	ldd	r22, Y+25	; 0x19
     c66:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c68:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	4a e7       	ldi	r20, 0x7A	; 122
     c72:	53 e4       	ldi	r21, 0x43	; 67
     c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c78:	dc 01       	movw	r26, r24
     c7a:	cb 01       	movw	r24, r22
     c7c:	8d 8b       	std	Y+21, r24	; 0x15
     c7e:	9e 8b       	std	Y+22, r25	; 0x16
     c80:	af 8b       	std	Y+23, r26	; 0x17
     c82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c84:	6d 89       	ldd	r22, Y+21	; 0x15
     c86:	7e 89       	ldd	r23, Y+22	; 0x16
     c88:	8f 89       	ldd	r24, Y+23	; 0x17
     c8a:	98 8d       	ldd	r25, Y+24	; 0x18
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	40 e8       	ldi	r20, 0x80	; 128
     c92:	5f e3       	ldi	r21, 0x3F	; 63
     c94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c98:	88 23       	and	r24, r24
     c9a:	2c f4       	brge	.+10     	; 0xca6 <main+0x160>
		__ticks = 1;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	9c 8b       	std	Y+20, r25	; 0x14
     ca2:	8b 8b       	std	Y+19, r24	; 0x13
     ca4:	3f c0       	rjmp	.+126    	; 0xd24 <main+0x1de>
	else if (__tmp > 65535)
     ca6:	6d 89       	ldd	r22, Y+21	; 0x15
     ca8:	7e 89       	ldd	r23, Y+22	; 0x16
     caa:	8f 89       	ldd	r24, Y+23	; 0x17
     cac:	98 8d       	ldd	r25, Y+24	; 0x18
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	3f ef       	ldi	r19, 0xFF	; 255
     cb2:	4f e7       	ldi	r20, 0x7F	; 127
     cb4:	57 e4       	ldi	r21, 0x47	; 71
     cb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cba:	18 16       	cp	r1, r24
     cbc:	4c f5       	brge	.+82     	; 0xd10 <main+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cbe:	69 8d       	ldd	r22, Y+25	; 0x19
     cc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	40 e2       	ldi	r20, 0x20	; 32
     ccc:	51 e4       	ldi	r21, 0x41	; 65
     cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	bc 01       	movw	r22, r24
     cd8:	cd 01       	movw	r24, r26
     cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cde:	dc 01       	movw	r26, r24
     ce0:	cb 01       	movw	r24, r22
     ce2:	9c 8b       	std	Y+20, r25	; 0x14
     ce4:	8b 8b       	std	Y+19, r24	; 0x13
     ce6:	0f c0       	rjmp	.+30     	; 0xd06 <main+0x1c0>
     ce8:	89 e1       	ldi	r24, 0x19	; 25
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	9a 8b       	std	Y+18, r25	; 0x12
     cee:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cf0:	89 89       	ldd	r24, Y+17	; 0x11
     cf2:	9a 89       	ldd	r25, Y+18	; 0x12
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	f1 f7       	brne	.-4      	; 0xcf4 <main+0x1ae>
     cf8:	9a 8b       	std	Y+18, r25	; 0x12
     cfa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cfc:	8b 89       	ldd	r24, Y+19	; 0x13
     cfe:	9c 89       	ldd	r25, Y+20	; 0x14
     d00:	01 97       	sbiw	r24, 0x01	; 1
     d02:	9c 8b       	std	Y+20, r25	; 0x14
     d04:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d06:	8b 89       	ldd	r24, Y+19	; 0x13
     d08:	9c 89       	ldd	r25, Y+20	; 0x14
     d0a:	00 97       	sbiw	r24, 0x00	; 0
     d0c:	69 f7       	brne	.-38     	; 0xce8 <main+0x1a2>
     d0e:	14 c0       	rjmp	.+40     	; 0xd38 <main+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d10:	6d 89       	ldd	r22, Y+21	; 0x15
     d12:	7e 89       	ldd	r23, Y+22	; 0x16
     d14:	8f 89       	ldd	r24, Y+23	; 0x17
     d16:	98 8d       	ldd	r25, Y+24	; 0x18
     d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	9c 8b       	std	Y+20, r25	; 0x14
     d22:	8b 8b       	std	Y+19, r24	; 0x13
     d24:	8b 89       	ldd	r24, Y+19	; 0x13
     d26:	9c 89       	ldd	r25, Y+20	; 0x14
     d28:	98 8b       	std	Y+16, r25	; 0x10
     d2a:	8f 87       	std	Y+15, r24	; 0x0f
     d2c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d2e:	98 89       	ldd	r25, Y+16	; 0x10
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	f1 f7       	brne	.-4      	; 0xd30 <main+0x1ea>
     d34:	98 8b       	std	Y+16, r25	; 0x10
     d36:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				stars_count++;
     d38:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d3a:	8f 5f       	subi	r24, 0xFF	; 255
     d3c:	8d 8f       	std	Y+29, r24	; 0x1d
			}while(pressed_key !=13 );
     d3e:	80 91 cf 00 	lds	r24, 0x00CF
     d42:	8d 30       	cpi	r24, 0x0D	; 13
     d44:	09 f0       	breq	.+2      	; 0xd48 <main+0x202>
     d46:	73 cf       	rjmp	.-282    	; 0xc2e <main+0xe8>
     d48:	39 cf       	rjmp	.-398    	; 0xbbc <main+0x76>
		}
		else if(MC2_RequiredAction==CURRENT_PASSWORD)
     d4a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d4c:	82 30       	cpi	r24, 0x02	; 2
     d4e:	09 f0       	breq	.+2      	; 0xd52 <main+0x20c>
     d50:	98 c0       	rjmp	.+304    	; 0xe82 <main+0x33c>
		{
			stars_count=0;
     d52:	1d 8e       	std	Y+29, r1	; 0x1d
			LCD_clearScreen();
     d54:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"CURRENT PASSWORD:");
     d58:	23 e8       	ldi	r18, 0x83	; 131
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	a9 01       	movw	r20, r18
     d62:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <LCD_displayStringRowColumn>
			do
			{
				pressed_key=KeyPad_getPressedKey();
     d66:	0e 94 a4 07 	call	0xf48	; 0xf48 <KeyPad_getPressedKey>
     d6a:	80 93 cf 00 	sts	0x00CF, r24
				if(pressed_key !=13 )
     d6e:	80 91 cf 00 	lds	r24, 0x00CF
     d72:	8d 30       	cpi	r24, 0x0D	; 13
     d74:	39 f0       	breq	.+14     	; 0xd84 <main+0x23e>
				{
					LCD_goToRowColumn(1,stars_count);
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	6d 8d       	ldd	r22, Y+29	; 0x1d
     d7a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <LCD_goToRowColumn>
					LCD_displayCharacter('*');
     d7e:	8a e2       	ldi	r24, 0x2A	; 42
     d80:	0e 94 b9 0a 	call	0x1572	; 0x1572 <LCD_displayCharacter>
				}
				UART_sendByte(pressed_key);
     d84:	80 91 cf 00 	lds	r24, 0x00CF
     d88:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <UART_sendByte>
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	aa ef       	ldi	r26, 0xFA	; 250
     d92:	b3 e4       	ldi	r27, 0x43	; 67
     d94:	8b 87       	std	Y+11, r24	; 0x0b
     d96:	9c 87       	std	Y+12, r25	; 0x0c
     d98:	ad 87       	std	Y+13, r26	; 0x0d
     d9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d9c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d9e:	7c 85       	ldd	r23, Y+12	; 0x0c
     da0:	8d 85       	ldd	r24, Y+13	; 0x0d
     da2:	9e 85       	ldd	r25, Y+14	; 0x0e
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	4a e7       	ldi	r20, 0x7A	; 122
     daa:	53 e4       	ldi	r21, 0x43	; 67
     dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     db0:	dc 01       	movw	r26, r24
     db2:	cb 01       	movw	r24, r22
     db4:	8f 83       	std	Y+7, r24	; 0x07
     db6:	98 87       	std	Y+8, r25	; 0x08
     db8:	a9 87       	std	Y+9, r26	; 0x09
     dba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dbc:	6f 81       	ldd	r22, Y+7	; 0x07
     dbe:	78 85       	ldd	r23, Y+8	; 0x08
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	40 e8       	ldi	r20, 0x80	; 128
     dca:	5f e3       	ldi	r21, 0x3F	; 63
     dcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dd0:	88 23       	and	r24, r24
     dd2:	2c f4       	brge	.+10     	; 0xdde <main+0x298>
		__ticks = 1;
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	9e 83       	std	Y+6, r25	; 0x06
     dda:	8d 83       	std	Y+5, r24	; 0x05
     ddc:	3f c0       	rjmp	.+126    	; 0xe5c <main+0x316>
	else if (__tmp > 65535)
     dde:	6f 81       	ldd	r22, Y+7	; 0x07
     de0:	78 85       	ldd	r23, Y+8	; 0x08
     de2:	89 85       	ldd	r24, Y+9	; 0x09
     de4:	9a 85       	ldd	r25, Y+10	; 0x0a
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	3f ef       	ldi	r19, 0xFF	; 255
     dea:	4f e7       	ldi	r20, 0x7F	; 127
     dec:	57 e4       	ldi	r21, 0x47	; 71
     dee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     df2:	18 16       	cp	r1, r24
     df4:	4c f5       	brge	.+82     	; 0xe48 <main+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     df6:	6b 85       	ldd	r22, Y+11	; 0x0b
     df8:	7c 85       	ldd	r23, Y+12	; 0x0c
     dfa:	8d 85       	ldd	r24, Y+13	; 0x0d
     dfc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e2       	ldi	r20, 0x20	; 32
     e04:	51 e4       	ldi	r21, 0x41	; 65
     e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	bc 01       	movw	r22, r24
     e10:	cd 01       	movw	r24, r26
     e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	9e 83       	std	Y+6, r25	; 0x06
     e1c:	8d 83       	std	Y+5, r24	; 0x05
     e1e:	0f c0       	rjmp	.+30     	; 0xe3e <main+0x2f8>
     e20:	89 e1       	ldi	r24, 0x19	; 25
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	9c 83       	std	Y+4, r25	; 0x04
     e26:	8b 83       	std	Y+3, r24	; 0x03
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	9c 81       	ldd	r25, Y+4	; 0x04
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <main+0x2e6>
     e30:	9c 83       	std	Y+4, r25	; 0x04
     e32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e34:	8d 81       	ldd	r24, Y+5	; 0x05
     e36:	9e 81       	ldd	r25, Y+6	; 0x06
     e38:	01 97       	sbiw	r24, 0x01	; 1
     e3a:	9e 83       	std	Y+6, r25	; 0x06
     e3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e3e:	8d 81       	ldd	r24, Y+5	; 0x05
     e40:	9e 81       	ldd	r25, Y+6	; 0x06
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	69 f7       	brne	.-38     	; 0xe20 <main+0x2da>
     e46:	14 c0       	rjmp	.+40     	; 0xe70 <main+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e48:	6f 81       	ldd	r22, Y+7	; 0x07
     e4a:	78 85       	ldd	r23, Y+8	; 0x08
     e4c:	89 85       	ldd	r24, Y+9	; 0x09
     e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	9e 83       	std	Y+6, r25	; 0x06
     e5a:	8d 83       	std	Y+5, r24	; 0x05
     e5c:	8d 81       	ldd	r24, Y+5	; 0x05
     e5e:	9e 81       	ldd	r25, Y+6	; 0x06
     e60:	9a 83       	std	Y+2, r25	; 0x02
     e62:	89 83       	std	Y+1, r24	; 0x01
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	9a 81       	ldd	r25, Y+2	; 0x02
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <main+0x322>
     e6c:	9a 83       	std	Y+2, r25	; 0x02
     e6e:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				stars_count++;
     e70:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e72:	8f 5f       	subi	r24, 0xFF	; 255
     e74:	8d 8f       	std	Y+29, r24	; 0x1d
			}while(pressed_key !=13 );
     e76:	80 91 cf 00 	lds	r24, 0x00CF
     e7a:	8d 30       	cpi	r24, 0x0D	; 13
     e7c:	09 f0       	breq	.+2      	; 0xe80 <main+0x33a>
     e7e:	73 cf       	rjmp	.-282    	; 0xd66 <main+0x220>
     e80:	9d ce       	rjmp	.-710    	; 0xbbc <main+0x76>
		}
		//options menu
		else if(MC2_RequiredAction==OPTIONS_MENU)
     e82:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e84:	86 30       	cpi	r24, 0x06	; 6
     e86:	c9 f4       	brne	.+50     	; 0xeba <main+0x374>
		{

			LCD_clearScreen();
     e88:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"+: change pass");
     e8c:	25 e9       	ldi	r18, 0x95	; 149
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	a9 01       	movw	r20, r18
     e96:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"-: open door");
     e9a:	24 ea       	ldi	r18, 0xA4	; 164
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	a9 01       	movw	r20, r18
     ea4:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <LCD_displayStringRowColumn>
			pressed_key=KeyPad_getPressedKey();
     ea8:	0e 94 a4 07 	call	0xf48	; 0xf48 <KeyPad_getPressedKey>
     eac:	80 93 cf 00 	sts	0x00CF, r24
			UART_sendByte(pressed_key);
     eb0:	80 91 cf 00 	lds	r24, 0x00CF
     eb4:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <UART_sendByte>
     eb8:	81 ce       	rjmp	.-766    	; 0xbbc <main+0x76>

		}
		//password doesnt match for 3 times
		else if(MC2_RequiredAction==PASSWORDS_NOT_MATCHED)
     eba:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ebc:	84 30       	cpi	r24, 0x04	; 4
     ebe:	09 f0       	breq	.+2      	; 0xec2 <main+0x37c>
     ec0:	7d ce       	rjmp	.-774    	; 0xbbc <main+0x76>
		{
			LCD_clearScreen();
     ec2:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_clearScreen>
			// T_TIMER=1024/1MHZ , 0->58600 60SECS
			timer_ConfigType timer_Config={TIMER1,F_CPU_1024,CTC,0,58600} ;
     ec6:	ce 01       	movw	r24, r28
     ec8:	86 96       	adiw	r24, 0x26	; 38
     eca:	9b ab       	std	Y+51, r25	; 0x33
     ecc:	8a ab       	std	Y+50, r24	; 0x32
     ece:	ef eb       	ldi	r30, 0xBF	; 191
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	fd ab       	std	Y+53, r31	; 0x35
     ed4:	ec ab       	std	Y+52, r30	; 0x34
     ed6:	f7 e0       	ldi	r31, 0x07	; 7
     ed8:	fe ab       	std	Y+54, r31	; 0x36
     eda:	ec a9       	ldd	r30, Y+52	; 0x34
     edc:	fd a9       	ldd	r31, Y+53	; 0x35
     ede:	00 80       	ld	r0, Z
     ee0:	8c a9       	ldd	r24, Y+52	; 0x34
     ee2:	9d a9       	ldd	r25, Y+53	; 0x35
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	9d ab       	std	Y+53, r25	; 0x35
     ee8:	8c ab       	std	Y+52, r24	; 0x34
     eea:	ea a9       	ldd	r30, Y+50	; 0x32
     eec:	fb a9       	ldd	r31, Y+51	; 0x33
     eee:	00 82       	st	Z, r0
     ef0:	8a a9       	ldd	r24, Y+50	; 0x32
     ef2:	9b a9       	ldd	r25, Y+51	; 0x33
     ef4:	01 96       	adiw	r24, 0x01	; 1
     ef6:	9b ab       	std	Y+51, r25	; 0x33
     ef8:	8a ab       	std	Y+50, r24	; 0x32
     efa:	9e a9       	ldd	r25, Y+54	; 0x36
     efc:	91 50       	subi	r25, 0x01	; 1
     efe:	9e ab       	std	Y+54, r25	; 0x36
     f00:	ee a9       	ldd	r30, Y+54	; 0x36
     f02:	ee 23       	and	r30, r30
     f04:	51 f7       	brne	.-44     	; 0xeda <main+0x394>
			timer_init(&timer_Config);
     f06:	ce 01       	movw	r24, r28
     f08:	86 96       	adiw	r24, 0x26	; 38
     f0a:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <timer_init>
			timer1_setCallBack(error_timer);
     f0e:	8a e9       	ldi	r24, 0x9A	; 154
     f10:	97 e0       	ldi	r25, 0x07	; 7
     f12:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <timer1_setCallBack>

			error_flag=0;
     f16:	10 92 ce 00 	sts	0x00CE, r1
     f1a:	07 c0       	rjmp	.+14     	; 0xf2a <main+0x3e4>
			while(error_flag==0)
			{

				LCD_displayStringRowColumn(0,0,"ERROR");
     f1c:	21 eb       	ldi	r18, 0xB1	; 177
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	a9 01       	movw	r20, r18
     f26:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <LCD_displayStringRowColumn>
			timer_ConfigType timer_Config={TIMER1,F_CPU_1024,CTC,0,58600} ;
			timer_init(&timer_Config);
			timer1_setCallBack(error_timer);

			error_flag=0;
			while(error_flag==0)
     f2a:	80 91 ce 00 	lds	r24, 0x00CE
     f2e:	88 23       	and	r24, r24
     f30:	a9 f3       	breq	.-22     	; 0xf1c <main+0x3d6>
     f32:	44 ce       	rjmp	.-888    	; 0xbbc <main+0x76>

00000f34 <error_timer>:

}


void error_timer(void)
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62


	/* after 60 secs-> make error_flag=1 */

		error_flag=1;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	80 93 ce 00 	sts	0x00CE, r24

}
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <KeyPad_getPressedKey+0x6>
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     f52:	1a 82       	std	Y+2, r1	; 0x02
     f54:	4c c0       	rjmp	.+152    	; 0xfee <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
     f56:	ea e3       	ldi	r30, 0x3A	; 58
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	80 e1       	ldi	r24, 0x10	; 16
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <KeyPad_getPressedKey+0x22>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	2a 95       	dec	r18
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <KeyPad_getPressedKey+0x1e>
     f6e:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
     f70:	eb e3       	ldi	r30, 0x3B	; 59
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	80 e1       	ldi	r24, 0x10	; 16
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 2e       	mov	r0, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <KeyPad_getPressedKey+0x3e>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	0a 94       	dec	r0
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <KeyPad_getPressedKey+0x3a>
     f8a:	80 95       	com	r24
     f8c:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
     f8e:	19 82       	std	Y+1, r1	; 0x01
     f90:	28 c0       	rjmp	.+80     	; 0xfe2 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
     f92:	e9 e3       	ldi	r30, 0x39	; 57
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	88 2f       	mov	r24, r24
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	a9 01       	movw	r20, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <KeyPad_getPressedKey+0x62>
     fa6:	55 95       	asr	r21
     fa8:	47 95       	ror	r20
     faa:	8a 95       	dec	r24
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <KeyPad_getPressedKey+0x5e>
     fae:	ca 01       	movw	r24, r20
     fb0:	81 70       	andi	r24, 0x01	; 1
     fb2:	90 70       	andi	r25, 0x00	; 0
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	91 f4       	brne	.+36     	; 0xfdc <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	88 2f       	mov	r24, r24
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	98 2f       	mov	r25, r24
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	89 0f       	add	r24, r25
     fcc:	8f 5f       	subi	r24, 0xFF	; 255
     fce:	0e 94 fc 07 	call	0xff8	; 0xff8 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	cf 91       	pop	r28
     fd8:	df 91       	pop	r29
     fda:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	8f 5f       	subi	r24, 0xFF	; 255
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	84 30       	cpi	r24, 0x04	; 4
     fe6:	a8 f2       	brcs	.-86     	; 0xf92 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	8f 5f       	subi	r24, 0xFF	; 255
     fec:	8a 83       	std	Y+2, r24	; 0x02
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	84 30       	cpi	r24, 0x04	; 4
     ff2:	08 f4       	brcc	.+2      	; 0xff6 <KeyPad_getPressedKey+0xae>
     ff4:	b0 cf       	rjmp	.-160    	; 0xf56 <KeyPad_getPressedKey+0xe>
     ff6:	ad cf       	rjmp	.-166    	; 0xf52 <KeyPad_getPressedKey+0xa>

00000ff8 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	00 d0       	rcall	.+0      	; 0xffe <KeyPad_4x4_adjustKeyNumber+0x6>
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <KeyPad_4x4_adjustKeyNumber+0x8>
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	3c 83       	std	Y+4, r19	; 0x04
    100e:	2b 83       	std	Y+3, r18	; 0x03
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	9c 81       	ldd	r25, Y+4	; 0x04
    1014:	88 30       	cpi	r24, 0x08	; 8
    1016:	91 05       	cpc	r25, r1
    1018:	09 f4       	brne	.+2      	; 0x101c <KeyPad_4x4_adjustKeyNumber+0x24>
    101a:	70 c0       	rjmp	.+224    	; 0x10fc <KeyPad_4x4_adjustKeyNumber+0x104>
    101c:	2b 81       	ldd	r18, Y+3	; 0x03
    101e:	3c 81       	ldd	r19, Y+4	; 0x04
    1020:	29 30       	cpi	r18, 0x09	; 9
    1022:	31 05       	cpc	r19, r1
    1024:	5c f5       	brge	.+86     	; 0x107c <KeyPad_4x4_adjustKeyNumber+0x84>
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9c 81       	ldd	r25, Y+4	; 0x04
    102a:	84 30       	cpi	r24, 0x04	; 4
    102c:	91 05       	cpc	r25, r1
    102e:	09 f4       	brne	.+2      	; 0x1032 <KeyPad_4x4_adjustKeyNumber+0x3a>
    1030:	59 c0       	rjmp	.+178    	; 0x10e4 <KeyPad_4x4_adjustKeyNumber+0xec>
    1032:	2b 81       	ldd	r18, Y+3	; 0x03
    1034:	3c 81       	ldd	r19, Y+4	; 0x04
    1036:	25 30       	cpi	r18, 0x05	; 5
    1038:	31 05       	cpc	r19, r1
    103a:	9c f4       	brge	.+38     	; 0x1062 <KeyPad_4x4_adjustKeyNumber+0x6a>
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	82 30       	cpi	r24, 0x02	; 2
    1042:	91 05       	cpc	r25, r1
    1044:	09 f4       	brne	.+2      	; 0x1048 <KeyPad_4x4_adjustKeyNumber+0x50>
    1046:	48 c0       	rjmp	.+144    	; 0x10d8 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1048:	2b 81       	ldd	r18, Y+3	; 0x03
    104a:	3c 81       	ldd	r19, Y+4	; 0x04
    104c:	23 30       	cpi	r18, 0x03	; 3
    104e:	31 05       	cpc	r19, r1
    1050:	0c f0       	brlt	.+2      	; 0x1054 <KeyPad_4x4_adjustKeyNumber+0x5c>
    1052:	45 c0       	rjmp	.+138    	; 0x10de <KeyPad_4x4_adjustKeyNumber+0xe6>
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	9c 81       	ldd	r25, Y+4	; 0x04
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	91 05       	cpc	r25, r1
    105c:	09 f4       	brne	.+2      	; 0x1060 <KeyPad_4x4_adjustKeyNumber+0x68>
    105e:	39 c0       	rjmp	.+114    	; 0x10d2 <KeyPad_4x4_adjustKeyNumber+0xda>
    1060:	67 c0       	rjmp	.+206    	; 0x1130 <KeyPad_4x4_adjustKeyNumber+0x138>
    1062:	2b 81       	ldd	r18, Y+3	; 0x03
    1064:	3c 81       	ldd	r19, Y+4	; 0x04
    1066:	26 30       	cpi	r18, 0x06	; 6
    1068:	31 05       	cpc	r19, r1
    106a:	09 f4       	brne	.+2      	; 0x106e <KeyPad_4x4_adjustKeyNumber+0x76>
    106c:	41 c0       	rjmp	.+130    	; 0x10f0 <KeyPad_4x4_adjustKeyNumber+0xf8>
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	9c 81       	ldd	r25, Y+4	; 0x04
    1072:	87 30       	cpi	r24, 0x07	; 7
    1074:	91 05       	cpc	r25, r1
    1076:	0c f0       	brlt	.+2      	; 0x107a <KeyPad_4x4_adjustKeyNumber+0x82>
    1078:	3e c0       	rjmp	.+124    	; 0x10f6 <KeyPad_4x4_adjustKeyNumber+0xfe>
    107a:	37 c0       	rjmp	.+110    	; 0x10ea <KeyPad_4x4_adjustKeyNumber+0xf2>
    107c:	2b 81       	ldd	r18, Y+3	; 0x03
    107e:	3c 81       	ldd	r19, Y+4	; 0x04
    1080:	2c 30       	cpi	r18, 0x0C	; 12
    1082:	31 05       	cpc	r19, r1
    1084:	09 f4       	brne	.+2      	; 0x1088 <KeyPad_4x4_adjustKeyNumber+0x90>
    1086:	46 c0       	rjmp	.+140    	; 0x1114 <KeyPad_4x4_adjustKeyNumber+0x11c>
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	9c 81       	ldd	r25, Y+4	; 0x04
    108c:	8d 30       	cpi	r24, 0x0D	; 13
    108e:	91 05       	cpc	r25, r1
    1090:	5c f4       	brge	.+22     	; 0x10a8 <KeyPad_4x4_adjustKeyNumber+0xb0>
    1092:	2b 81       	ldd	r18, Y+3	; 0x03
    1094:	3c 81       	ldd	r19, Y+4	; 0x04
    1096:	2a 30       	cpi	r18, 0x0A	; 10
    1098:	31 05       	cpc	r19, r1
    109a:	b1 f1       	breq	.+108    	; 0x1108 <KeyPad_4x4_adjustKeyNumber+0x110>
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	9c 81       	ldd	r25, Y+4	; 0x04
    10a0:	8b 30       	cpi	r24, 0x0B	; 11
    10a2:	91 05       	cpc	r25, r1
    10a4:	a4 f5       	brge	.+104    	; 0x110e <KeyPad_4x4_adjustKeyNumber+0x116>
    10a6:	2d c0       	rjmp	.+90     	; 0x1102 <KeyPad_4x4_adjustKeyNumber+0x10a>
    10a8:	2b 81       	ldd	r18, Y+3	; 0x03
    10aa:	3c 81       	ldd	r19, Y+4	; 0x04
    10ac:	2e 30       	cpi	r18, 0x0E	; 14
    10ae:	31 05       	cpc	r19, r1
    10b0:	b9 f1       	breq	.+110    	; 0x1120 <KeyPad_4x4_adjustKeyNumber+0x128>
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	9c 81       	ldd	r25, Y+4	; 0x04
    10b6:	8e 30       	cpi	r24, 0x0E	; 14
    10b8:	91 05       	cpc	r25, r1
    10ba:	7c f1       	brlt	.+94     	; 0x111a <KeyPad_4x4_adjustKeyNumber+0x122>
    10bc:	2b 81       	ldd	r18, Y+3	; 0x03
    10be:	3c 81       	ldd	r19, Y+4	; 0x04
    10c0:	2f 30       	cpi	r18, 0x0F	; 15
    10c2:	31 05       	cpc	r19, r1
    10c4:	79 f1       	breq	.+94     	; 0x1124 <KeyPad_4x4_adjustKeyNumber+0x12c>
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ca:	80 31       	cpi	r24, 0x10	; 16
    10cc:	91 05       	cpc	r25, r1
    10ce:	69 f1       	breq	.+90     	; 0x112a <KeyPad_4x4_adjustKeyNumber+0x132>
    10d0:	2f c0       	rjmp	.+94     	; 0x1130 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    10d2:	97 e0       	ldi	r25, 0x07	; 7
    10d4:	9a 83       	std	Y+2, r25	; 0x02
    10d6:	2e c0       	rjmp	.+92     	; 0x1134 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    10d8:	28 e0       	ldi	r18, 0x08	; 8
    10da:	2a 83       	std	Y+2, r18	; 0x02
    10dc:	2b c0       	rjmp	.+86     	; 0x1134 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    10de:	39 e0       	ldi	r19, 0x09	; 9
    10e0:	3a 83       	std	Y+2, r19	; 0x02
    10e2:	28 c0       	rjmp	.+80     	; 0x1134 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    10e4:	85 e2       	ldi	r24, 0x25	; 37
    10e6:	8a 83       	std	Y+2, r24	; 0x02
    10e8:	25 c0       	rjmp	.+74     	; 0x1134 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    10ea:	94 e0       	ldi	r25, 0x04	; 4
    10ec:	9a 83       	std	Y+2, r25	; 0x02
    10ee:	22 c0       	rjmp	.+68     	; 0x1134 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    10f0:	25 e0       	ldi	r18, 0x05	; 5
    10f2:	2a 83       	std	Y+2, r18	; 0x02
    10f4:	1f c0       	rjmp	.+62     	; 0x1134 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    10f6:	36 e0       	ldi	r19, 0x06	; 6
    10f8:	3a 83       	std	Y+2, r19	; 0x02
    10fa:	1c c0       	rjmp	.+56     	; 0x1134 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    10fc:	8a e2       	ldi	r24, 0x2A	; 42
    10fe:	8a 83       	std	Y+2, r24	; 0x02
    1100:	19 c0       	rjmp	.+50     	; 0x1134 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	9a 83       	std	Y+2, r25	; 0x02
    1106:	16 c0       	rjmp	.+44     	; 0x1134 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    1108:	22 e0       	ldi	r18, 0x02	; 2
    110a:	2a 83       	std	Y+2, r18	; 0x02
    110c:	13 c0       	rjmp	.+38     	; 0x1134 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    110e:	33 e0       	ldi	r19, 0x03	; 3
    1110:	3a 83       	std	Y+2, r19	; 0x02
    1112:	10 c0       	rjmp	.+32     	; 0x1134 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    1114:	8d e2       	ldi	r24, 0x2D	; 45
    1116:	8a 83       	std	Y+2, r24	; 0x02
    1118:	0d c0       	rjmp	.+26     	; 0x1134 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    111a:	9d e0       	ldi	r25, 0x0D	; 13
    111c:	9a 83       	std	Y+2, r25	; 0x02
    111e:	0a c0       	rjmp	.+20     	; 0x1134 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    1120:	1a 82       	std	Y+2, r1	; 0x02
    1122:	08 c0       	rjmp	.+16     	; 0x1134 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    1124:	2d e3       	ldi	r18, 0x3D	; 61
    1126:	2a 83       	std	Y+2, r18	; 0x02
    1128:	05 c0       	rjmp	.+10     	; 0x1134 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    112a:	3b e2       	ldi	r19, 0x2B	; 43
    112c:	3a 83       	std	Y+2, r19	; 0x02
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	8a 83       	std	Y+2, r24	; 0x02
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    114c:	e4 e3       	ldi	r30, 0x34	; 52
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	8f ef       	ldi	r24, 0xFF	; 255
    1152:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1154:	a1 e3       	ldi	r26, 0x31	; 49
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e1 e3       	ldi	r30, 0x31	; 49
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	80 67       	ori	r24, 0x70	; 112
    1160:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1162:	88 e3       	ldi	r24, 0x38	; 56
    1164:	0e 94 bd 08 	call	0x117a	; 0x117a <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1168:	8c e0       	ldi	r24, 0x0C	; 12
    116a:	0e 94 bd 08 	call	0x117a	; 0x117a <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	0e 94 bd 08 	call	0x117a	; 0x117a <LCD_sendCommand>
}
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	e9 97       	sbiw	r28, 0x39	; 57
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1190:	a2 e3       	ldi	r26, 0x32	; 50
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e2 e3       	ldi	r30, 0x32	; 50
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	8f 7e       	andi	r24, 0xEF	; 239
    119c:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    119e:	a2 e3       	ldi	r26, 0x32	; 50
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e2 e3       	ldi	r30, 0x32	; 50
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	8f 7d       	andi	r24, 0xDF	; 223
    11aa:	8c 93       	st	X, r24
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	a0 e8       	ldi	r26, 0x80	; 128
    11b2:	bf e3       	ldi	r27, 0x3F	; 63
    11b4:	8d ab       	std	Y+53, r24	; 0x35
    11b6:	9e ab       	std	Y+54, r25	; 0x36
    11b8:	af ab       	std	Y+55, r26	; 0x37
    11ba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11bc:	6d a9       	ldd	r22, Y+53	; 0x35
    11be:	7e a9       	ldd	r23, Y+54	; 0x36
    11c0:	8f a9       	ldd	r24, Y+55	; 0x37
    11c2:	98 ad       	ldd	r25, Y+56	; 0x38
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	4a e7       	ldi	r20, 0x7A	; 122
    11ca:	53 e4       	ldi	r21, 0x43	; 67
    11cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	89 ab       	std	Y+49, r24	; 0x31
    11d6:	9a ab       	std	Y+50, r25	; 0x32
    11d8:	ab ab       	std	Y+51, r26	; 0x33
    11da:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11dc:	69 a9       	ldd	r22, Y+49	; 0x31
    11de:	7a a9       	ldd	r23, Y+50	; 0x32
    11e0:	8b a9       	ldd	r24, Y+51	; 0x33
    11e2:	9c a9       	ldd	r25, Y+52	; 0x34
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	40 e8       	ldi	r20, 0x80	; 128
    11ea:	5f e3       	ldi	r21, 0x3F	; 63
    11ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11f0:	88 23       	and	r24, r24
    11f2:	2c f4       	brge	.+10     	; 0x11fe <LCD_sendCommand+0x84>
		__ticks = 1;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	98 ab       	std	Y+48, r25	; 0x30
    11fa:	8f a7       	std	Y+47, r24	; 0x2f
    11fc:	3f c0       	rjmp	.+126    	; 0x127c <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    11fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1200:	7a a9       	ldd	r23, Y+50	; 0x32
    1202:	8b a9       	ldd	r24, Y+51	; 0x33
    1204:	9c a9       	ldd	r25, Y+52	; 0x34
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	3f ef       	ldi	r19, 0xFF	; 255
    120a:	4f e7       	ldi	r20, 0x7F	; 127
    120c:	57 e4       	ldi	r21, 0x47	; 71
    120e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1212:	18 16       	cp	r1, r24
    1214:	4c f5       	brge	.+82     	; 0x1268 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1216:	6d a9       	ldd	r22, Y+53	; 0x35
    1218:	7e a9       	ldd	r23, Y+54	; 0x36
    121a:	8f a9       	ldd	r24, Y+55	; 0x37
    121c:	98 ad       	ldd	r25, Y+56	; 0x38
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	40 e2       	ldi	r20, 0x20	; 32
    1224:	51 e4       	ldi	r21, 0x41	; 65
    1226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122a:	dc 01       	movw	r26, r24
    122c:	cb 01       	movw	r24, r22
    122e:	bc 01       	movw	r22, r24
    1230:	cd 01       	movw	r24, r26
    1232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	98 ab       	std	Y+48, r25	; 0x30
    123c:	8f a7       	std	Y+47, r24	; 0x2f
    123e:	0f c0       	rjmp	.+30     	; 0x125e <LCD_sendCommand+0xe4>
    1240:	89 e1       	ldi	r24, 0x19	; 25
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	9e a7       	std	Y+46, r25	; 0x2e
    1246:	8d a7       	std	Y+45, r24	; 0x2d
    1248:	8d a5       	ldd	r24, Y+45	; 0x2d
    124a:	9e a5       	ldd	r25, Y+46	; 0x2e
    124c:	01 97       	sbiw	r24, 0x01	; 1
    124e:	f1 f7       	brne	.-4      	; 0x124c <LCD_sendCommand+0xd2>
    1250:	9e a7       	std	Y+46, r25	; 0x2e
    1252:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1254:	8f a5       	ldd	r24, Y+47	; 0x2f
    1256:	98 a9       	ldd	r25, Y+48	; 0x30
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	98 ab       	std	Y+48, r25	; 0x30
    125c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    125e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1260:	98 a9       	ldd	r25, Y+48	; 0x30
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	69 f7       	brne	.-38     	; 0x1240 <LCD_sendCommand+0xc6>
    1266:	14 c0       	rjmp	.+40     	; 0x1290 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1268:	69 a9       	ldd	r22, Y+49	; 0x31
    126a:	7a a9       	ldd	r23, Y+50	; 0x32
    126c:	8b a9       	ldd	r24, Y+51	; 0x33
    126e:	9c a9       	ldd	r25, Y+52	; 0x34
    1270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	98 ab       	std	Y+48, r25	; 0x30
    127a:	8f a7       	std	Y+47, r24	; 0x2f
    127c:	8f a5       	ldd	r24, Y+47	; 0x2f
    127e:	98 a9       	ldd	r25, Y+48	; 0x30
    1280:	9c a7       	std	Y+44, r25	; 0x2c
    1282:	8b a7       	std	Y+43, r24	; 0x2b
    1284:	8b a5       	ldd	r24, Y+43	; 0x2b
    1286:	9c a5       	ldd	r25, Y+44	; 0x2c
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	f1 f7       	brne	.-4      	; 0x1288 <LCD_sendCommand+0x10e>
    128c:	9c a7       	std	Y+44, r25	; 0x2c
    128e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1290:	a2 e3       	ldi	r26, 0x32	; 50
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e2 e3       	ldi	r30, 0x32	; 50
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	80 64       	ori	r24, 0x40	; 64
    129c:	8c 93       	st	X, r24
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	a0 e8       	ldi	r26, 0x80	; 128
    12a4:	bf e3       	ldi	r27, 0x3F	; 63
    12a6:	8f a3       	std	Y+39, r24	; 0x27
    12a8:	98 a7       	std	Y+40, r25	; 0x28
    12aa:	a9 a7       	std	Y+41, r26	; 0x29
    12ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ae:	6f a1       	ldd	r22, Y+39	; 0x27
    12b0:	78 a5       	ldd	r23, Y+40	; 0x28
    12b2:	89 a5       	ldd	r24, Y+41	; 0x29
    12b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	4a e7       	ldi	r20, 0x7A	; 122
    12bc:	53 e4       	ldi	r21, 0x43	; 67
    12be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	8b a3       	std	Y+35, r24	; 0x23
    12c8:	9c a3       	std	Y+36, r25	; 0x24
    12ca:	ad a3       	std	Y+37, r26	; 0x25
    12cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12ce:	6b a1       	ldd	r22, Y+35	; 0x23
    12d0:	7c a1       	ldd	r23, Y+36	; 0x24
    12d2:	8d a1       	ldd	r24, Y+37	; 0x25
    12d4:	9e a1       	ldd	r25, Y+38	; 0x26
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	40 e8       	ldi	r20, 0x80	; 128
    12dc:	5f e3       	ldi	r21, 0x3F	; 63
    12de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12e2:	88 23       	and	r24, r24
    12e4:	2c f4       	brge	.+10     	; 0x12f0 <LCD_sendCommand+0x176>
		__ticks = 1;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	9a a3       	std	Y+34, r25	; 0x22
    12ec:	89 a3       	std	Y+33, r24	; 0x21
    12ee:	3f c0       	rjmp	.+126    	; 0x136e <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    12f0:	6b a1       	ldd	r22, Y+35	; 0x23
    12f2:	7c a1       	ldd	r23, Y+36	; 0x24
    12f4:	8d a1       	ldd	r24, Y+37	; 0x25
    12f6:	9e a1       	ldd	r25, Y+38	; 0x26
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	3f ef       	ldi	r19, 0xFF	; 255
    12fc:	4f e7       	ldi	r20, 0x7F	; 127
    12fe:	57 e4       	ldi	r21, 0x47	; 71
    1300:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1304:	18 16       	cp	r1, r24
    1306:	4c f5       	brge	.+82     	; 0x135a <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1308:	6f a1       	ldd	r22, Y+39	; 0x27
    130a:	78 a5       	ldd	r23, Y+40	; 0x28
    130c:	89 a5       	ldd	r24, Y+41	; 0x29
    130e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e2       	ldi	r20, 0x20	; 32
    1316:	51 e4       	ldi	r21, 0x41	; 65
    1318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	bc 01       	movw	r22, r24
    1322:	cd 01       	movw	r24, r26
    1324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	9a a3       	std	Y+34, r25	; 0x22
    132e:	89 a3       	std	Y+33, r24	; 0x21
    1330:	0f c0       	rjmp	.+30     	; 0x1350 <LCD_sendCommand+0x1d6>
    1332:	89 e1       	ldi	r24, 0x19	; 25
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	98 a3       	std	Y+32, r25	; 0x20
    1338:	8f 8f       	std	Y+31, r24	; 0x1f
    133a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    133c:	98 a1       	ldd	r25, Y+32	; 0x20
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <LCD_sendCommand+0x1c4>
    1342:	98 a3       	std	Y+32, r25	; 0x20
    1344:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1346:	89 a1       	ldd	r24, Y+33	; 0x21
    1348:	9a a1       	ldd	r25, Y+34	; 0x22
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	9a a3       	std	Y+34, r25	; 0x22
    134e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1350:	89 a1       	ldd	r24, Y+33	; 0x21
    1352:	9a a1       	ldd	r25, Y+34	; 0x22
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	69 f7       	brne	.-38     	; 0x1332 <LCD_sendCommand+0x1b8>
    1358:	14 c0       	rjmp	.+40     	; 0x1382 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    135a:	6b a1       	ldd	r22, Y+35	; 0x23
    135c:	7c a1       	ldd	r23, Y+36	; 0x24
    135e:	8d a1       	ldd	r24, Y+37	; 0x25
    1360:	9e a1       	ldd	r25, Y+38	; 0x26
    1362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	9a a3       	std	Y+34, r25	; 0x22
    136c:	89 a3       	std	Y+33, r24	; 0x21
    136e:	89 a1       	ldd	r24, Y+33	; 0x21
    1370:	9a a1       	ldd	r25, Y+34	; 0x22
    1372:	9e 8f       	std	Y+30, r25	; 0x1e
    1374:	8d 8f       	std	Y+29, r24	; 0x1d
    1376:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1378:	9e 8d       	ldd	r25, Y+30	; 0x1e
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <LCD_sendCommand+0x200>
    137e:	9e 8f       	std	Y+30, r25	; 0x1e
    1380:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1382:	e5 e3       	ldi	r30, 0x35	; 53
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	89 ad       	ldd	r24, Y+57	; 0x39
    1388:	80 83       	st	Z, r24
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	a0 e8       	ldi	r26, 0x80	; 128
    1390:	bf e3       	ldi	r27, 0x3F	; 63
    1392:	89 8f       	std	Y+25, r24	; 0x19
    1394:	9a 8f       	std	Y+26, r25	; 0x1a
    1396:	ab 8f       	std	Y+27, r26	; 0x1b
    1398:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    139a:	69 8d       	ldd	r22, Y+25	; 0x19
    139c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    139e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	4a e7       	ldi	r20, 0x7A	; 122
    13a8:	53 e4       	ldi	r21, 0x43	; 67
    13aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	8d 8b       	std	Y+21, r24	; 0x15
    13b4:	9e 8b       	std	Y+22, r25	; 0x16
    13b6:	af 8b       	std	Y+23, r26	; 0x17
    13b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13ba:	6d 89       	ldd	r22, Y+21	; 0x15
    13bc:	7e 89       	ldd	r23, Y+22	; 0x16
    13be:	8f 89       	ldd	r24, Y+23	; 0x17
    13c0:	98 8d       	ldd	r25, Y+24	; 0x18
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e8       	ldi	r20, 0x80	; 128
    13c8:	5f e3       	ldi	r21, 0x3F	; 63
    13ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ce:	88 23       	and	r24, r24
    13d0:	2c f4       	brge	.+10     	; 0x13dc <LCD_sendCommand+0x262>
		__ticks = 1;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	9c 8b       	std	Y+20, r25	; 0x14
    13d8:	8b 8b       	std	Y+19, r24	; 0x13
    13da:	3f c0       	rjmp	.+126    	; 0x145a <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    13dc:	6d 89       	ldd	r22, Y+21	; 0x15
    13de:	7e 89       	ldd	r23, Y+22	; 0x16
    13e0:	8f 89       	ldd	r24, Y+23	; 0x17
    13e2:	98 8d       	ldd	r25, Y+24	; 0x18
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	3f ef       	ldi	r19, 0xFF	; 255
    13e8:	4f e7       	ldi	r20, 0x7F	; 127
    13ea:	57 e4       	ldi	r21, 0x47	; 71
    13ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13f0:	18 16       	cp	r1, r24
    13f2:	4c f5       	brge	.+82     	; 0x1446 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13f4:	69 8d       	ldd	r22, Y+25	; 0x19
    13f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e2       	ldi	r20, 0x20	; 32
    1402:	51 e4       	ldi	r21, 0x41	; 65
    1404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	bc 01       	movw	r22, r24
    140e:	cd 01       	movw	r24, r26
    1410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	9c 8b       	std	Y+20, r25	; 0x14
    141a:	8b 8b       	std	Y+19, r24	; 0x13
    141c:	0f c0       	rjmp	.+30     	; 0x143c <LCD_sendCommand+0x2c2>
    141e:	89 e1       	ldi	r24, 0x19	; 25
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	9a 8b       	std	Y+18, r25	; 0x12
    1424:	89 8b       	std	Y+17, r24	; 0x11
    1426:	89 89       	ldd	r24, Y+17	; 0x11
    1428:	9a 89       	ldd	r25, Y+18	; 0x12
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	f1 f7       	brne	.-4      	; 0x142a <LCD_sendCommand+0x2b0>
    142e:	9a 8b       	std	Y+18, r25	; 0x12
    1430:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1432:	8b 89       	ldd	r24, Y+19	; 0x13
    1434:	9c 89       	ldd	r25, Y+20	; 0x14
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	9c 8b       	std	Y+20, r25	; 0x14
    143a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    143c:	8b 89       	ldd	r24, Y+19	; 0x13
    143e:	9c 89       	ldd	r25, Y+20	; 0x14
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	69 f7       	brne	.-38     	; 0x141e <LCD_sendCommand+0x2a4>
    1444:	14 c0       	rjmp	.+40     	; 0x146e <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1446:	6d 89       	ldd	r22, Y+21	; 0x15
    1448:	7e 89       	ldd	r23, Y+22	; 0x16
    144a:	8f 89       	ldd	r24, Y+23	; 0x17
    144c:	98 8d       	ldd	r25, Y+24	; 0x18
    144e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	9c 8b       	std	Y+20, r25	; 0x14
    1458:	8b 8b       	std	Y+19, r24	; 0x13
    145a:	8b 89       	ldd	r24, Y+19	; 0x13
    145c:	9c 89       	ldd	r25, Y+20	; 0x14
    145e:	98 8b       	std	Y+16, r25	; 0x10
    1460:	8f 87       	std	Y+15, r24	; 0x0f
    1462:	8f 85       	ldd	r24, Y+15	; 0x0f
    1464:	98 89       	ldd	r25, Y+16	; 0x10
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <LCD_sendCommand+0x2ec>
    146a:	98 8b       	std	Y+16, r25	; 0x10
    146c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    146e:	a2 e3       	ldi	r26, 0x32	; 50
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e2 e3       	ldi	r30, 0x32	; 50
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	8f 7b       	andi	r24, 0xBF	; 191
    147a:	8c 93       	st	X, r24
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	a0 e8       	ldi	r26, 0x80	; 128
    1482:	bf e3       	ldi	r27, 0x3F	; 63
    1484:	8b 87       	std	Y+11, r24	; 0x0b
    1486:	9c 87       	std	Y+12, r25	; 0x0c
    1488:	ad 87       	std	Y+13, r26	; 0x0d
    148a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    148c:	6b 85       	ldd	r22, Y+11	; 0x0b
    148e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1490:	8d 85       	ldd	r24, Y+13	; 0x0d
    1492:	9e 85       	ldd	r25, Y+14	; 0x0e
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	4a e7       	ldi	r20, 0x7A	; 122
    149a:	53 e4       	ldi	r21, 0x43	; 67
    149c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	8f 83       	std	Y+7, r24	; 0x07
    14a6:	98 87       	std	Y+8, r25	; 0x08
    14a8:	a9 87       	std	Y+9, r26	; 0x09
    14aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14ac:	6f 81       	ldd	r22, Y+7	; 0x07
    14ae:	78 85       	ldd	r23, Y+8	; 0x08
    14b0:	89 85       	ldd	r24, Y+9	; 0x09
    14b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e8       	ldi	r20, 0x80	; 128
    14ba:	5f e3       	ldi	r21, 0x3F	; 63
    14bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14c0:	88 23       	and	r24, r24
    14c2:	2c f4       	brge	.+10     	; 0x14ce <LCD_sendCommand+0x354>
		__ticks = 1;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	9e 83       	std	Y+6, r25	; 0x06
    14ca:	8d 83       	std	Y+5, r24	; 0x05
    14cc:	3f c0       	rjmp	.+126    	; 0x154c <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    14ce:	6f 81       	ldd	r22, Y+7	; 0x07
    14d0:	78 85       	ldd	r23, Y+8	; 0x08
    14d2:	89 85       	ldd	r24, Y+9	; 0x09
    14d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	3f ef       	ldi	r19, 0xFF	; 255
    14da:	4f e7       	ldi	r20, 0x7F	; 127
    14dc:	57 e4       	ldi	r21, 0x47	; 71
    14de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14e2:	18 16       	cp	r1, r24
    14e4:	4c f5       	brge	.+82     	; 0x1538 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	40 e2       	ldi	r20, 0x20	; 32
    14f4:	51 e4       	ldi	r21, 0x41	; 65
    14f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	9e 83       	std	Y+6, r25	; 0x06
    150c:	8d 83       	std	Y+5, r24	; 0x05
    150e:	0f c0       	rjmp	.+30     	; 0x152e <LCD_sendCommand+0x3b4>
    1510:	89 e1       	ldi	r24, 0x19	; 25
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	9c 83       	std	Y+4, r25	; 0x04
    1516:	8b 83       	std	Y+3, r24	; 0x03
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	f1 f7       	brne	.-4      	; 0x151c <LCD_sendCommand+0x3a2>
    1520:	9c 83       	std	Y+4, r25	; 0x04
    1522:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	9e 83       	std	Y+6, r25	; 0x06
    152c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152e:	8d 81       	ldd	r24, Y+5	; 0x05
    1530:	9e 81       	ldd	r25, Y+6	; 0x06
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	69 f7       	brne	.-38     	; 0x1510 <LCD_sendCommand+0x396>
    1536:	14 c0       	rjmp	.+40     	; 0x1560 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1538:	6f 81       	ldd	r22, Y+7	; 0x07
    153a:	78 85       	ldd	r23, Y+8	; 0x08
    153c:	89 85       	ldd	r24, Y+9	; 0x09
    153e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	9e 83       	std	Y+6, r25	; 0x06
    154a:	8d 83       	std	Y+5, r24	; 0x05
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	9a 83       	std	Y+2, r25	; 0x02
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	9a 81       	ldd	r25, Y+2	; 0x02
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <LCD_sendCommand+0x3de>
    155c:	9a 83       	std	Y+2, r25	; 0x02
    155e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1560:	e9 96       	adiw	r28, 0x39	; 57
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	e9 97       	sbiw	r28, 0x39	; 57
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	cd bf       	out	0x3d, r28	; 61
    1586:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1588:	a2 e3       	ldi	r26, 0x32	; 50
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e2 e3       	ldi	r30, 0x32	; 50
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	80 61       	ori	r24, 0x10	; 16
    1594:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1596:	a2 e3       	ldi	r26, 0x32	; 50
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e2 e3       	ldi	r30, 0x32	; 50
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	8f 7d       	andi	r24, 0xDF	; 223
    15a2:	8c 93       	st	X, r24
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	a0 e8       	ldi	r26, 0x80	; 128
    15aa:	bf e3       	ldi	r27, 0x3F	; 63
    15ac:	8d ab       	std	Y+53, r24	; 0x35
    15ae:	9e ab       	std	Y+54, r25	; 0x36
    15b0:	af ab       	std	Y+55, r26	; 0x37
    15b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b4:	6d a9       	ldd	r22, Y+53	; 0x35
    15b6:	7e a9       	ldd	r23, Y+54	; 0x36
    15b8:	8f a9       	ldd	r24, Y+55	; 0x37
    15ba:	98 ad       	ldd	r25, Y+56	; 0x38
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	4a e7       	ldi	r20, 0x7A	; 122
    15c2:	53 e4       	ldi	r21, 0x43	; 67
    15c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	89 ab       	std	Y+49, r24	; 0x31
    15ce:	9a ab       	std	Y+50, r25	; 0x32
    15d0:	ab ab       	std	Y+51, r26	; 0x33
    15d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15d4:	69 a9       	ldd	r22, Y+49	; 0x31
    15d6:	7a a9       	ldd	r23, Y+50	; 0x32
    15d8:	8b a9       	ldd	r24, Y+51	; 0x33
    15da:	9c a9       	ldd	r25, Y+52	; 0x34
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e8       	ldi	r20, 0x80	; 128
    15e2:	5f e3       	ldi	r21, 0x3F	; 63
    15e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15e8:	88 23       	and	r24, r24
    15ea:	2c f4       	brge	.+10     	; 0x15f6 <LCD_displayCharacter+0x84>
		__ticks = 1;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	98 ab       	std	Y+48, r25	; 0x30
    15f2:	8f a7       	std	Y+47, r24	; 0x2f
    15f4:	3f c0       	rjmp	.+126    	; 0x1674 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    15f6:	69 a9       	ldd	r22, Y+49	; 0x31
    15f8:	7a a9       	ldd	r23, Y+50	; 0x32
    15fa:	8b a9       	ldd	r24, Y+51	; 0x33
    15fc:	9c a9       	ldd	r25, Y+52	; 0x34
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	3f ef       	ldi	r19, 0xFF	; 255
    1602:	4f e7       	ldi	r20, 0x7F	; 127
    1604:	57 e4       	ldi	r21, 0x47	; 71
    1606:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    160a:	18 16       	cp	r1, r24
    160c:	4c f5       	brge	.+82     	; 0x1660 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    160e:	6d a9       	ldd	r22, Y+53	; 0x35
    1610:	7e a9       	ldd	r23, Y+54	; 0x36
    1612:	8f a9       	ldd	r24, Y+55	; 0x37
    1614:	98 ad       	ldd	r25, Y+56	; 0x38
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e2       	ldi	r20, 0x20	; 32
    161c:	51 e4       	ldi	r21, 0x41	; 65
    161e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	bc 01       	movw	r22, r24
    1628:	cd 01       	movw	r24, r26
    162a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	98 ab       	std	Y+48, r25	; 0x30
    1634:	8f a7       	std	Y+47, r24	; 0x2f
    1636:	0f c0       	rjmp	.+30     	; 0x1656 <LCD_displayCharacter+0xe4>
    1638:	89 e1       	ldi	r24, 0x19	; 25
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	9e a7       	std	Y+46, r25	; 0x2e
    163e:	8d a7       	std	Y+45, r24	; 0x2d
    1640:	8d a5       	ldd	r24, Y+45	; 0x2d
    1642:	9e a5       	ldd	r25, Y+46	; 0x2e
    1644:	01 97       	sbiw	r24, 0x01	; 1
    1646:	f1 f7       	brne	.-4      	; 0x1644 <LCD_displayCharacter+0xd2>
    1648:	9e a7       	std	Y+46, r25	; 0x2e
    164a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    164c:	8f a5       	ldd	r24, Y+47	; 0x2f
    164e:	98 a9       	ldd	r25, Y+48	; 0x30
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	98 ab       	std	Y+48, r25	; 0x30
    1654:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1656:	8f a5       	ldd	r24, Y+47	; 0x2f
    1658:	98 a9       	ldd	r25, Y+48	; 0x30
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	69 f7       	brne	.-38     	; 0x1638 <LCD_displayCharacter+0xc6>
    165e:	14 c0       	rjmp	.+40     	; 0x1688 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1660:	69 a9       	ldd	r22, Y+49	; 0x31
    1662:	7a a9       	ldd	r23, Y+50	; 0x32
    1664:	8b a9       	ldd	r24, Y+51	; 0x33
    1666:	9c a9       	ldd	r25, Y+52	; 0x34
    1668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	98 ab       	std	Y+48, r25	; 0x30
    1672:	8f a7       	std	Y+47, r24	; 0x2f
    1674:	8f a5       	ldd	r24, Y+47	; 0x2f
    1676:	98 a9       	ldd	r25, Y+48	; 0x30
    1678:	9c a7       	std	Y+44, r25	; 0x2c
    167a:	8b a7       	std	Y+43, r24	; 0x2b
    167c:	8b a5       	ldd	r24, Y+43	; 0x2b
    167e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	f1 f7       	brne	.-4      	; 0x1680 <LCD_displayCharacter+0x10e>
    1684:	9c a7       	std	Y+44, r25	; 0x2c
    1686:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1688:	a2 e3       	ldi	r26, 0x32	; 50
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e2 e3       	ldi	r30, 0x32	; 50
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	80 64       	ori	r24, 0x40	; 64
    1694:	8c 93       	st	X, r24
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	a0 e8       	ldi	r26, 0x80	; 128
    169c:	bf e3       	ldi	r27, 0x3F	; 63
    169e:	8f a3       	std	Y+39, r24	; 0x27
    16a0:	98 a7       	std	Y+40, r25	; 0x28
    16a2:	a9 a7       	std	Y+41, r26	; 0x29
    16a4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a6:	6f a1       	ldd	r22, Y+39	; 0x27
    16a8:	78 a5       	ldd	r23, Y+40	; 0x28
    16aa:	89 a5       	ldd	r24, Y+41	; 0x29
    16ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	4a e7       	ldi	r20, 0x7A	; 122
    16b4:	53 e4       	ldi	r21, 0x43	; 67
    16b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	8b a3       	std	Y+35, r24	; 0x23
    16c0:	9c a3       	std	Y+36, r25	; 0x24
    16c2:	ad a3       	std	Y+37, r26	; 0x25
    16c4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16c6:	6b a1       	ldd	r22, Y+35	; 0x23
    16c8:	7c a1       	ldd	r23, Y+36	; 0x24
    16ca:	8d a1       	ldd	r24, Y+37	; 0x25
    16cc:	9e a1       	ldd	r25, Y+38	; 0x26
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e8       	ldi	r20, 0x80	; 128
    16d4:	5f e3       	ldi	r21, 0x3F	; 63
    16d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16da:	88 23       	and	r24, r24
    16dc:	2c f4       	brge	.+10     	; 0x16e8 <LCD_displayCharacter+0x176>
		__ticks = 1;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	9a a3       	std	Y+34, r25	; 0x22
    16e4:	89 a3       	std	Y+33, r24	; 0x21
    16e6:	3f c0       	rjmp	.+126    	; 0x1766 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    16e8:	6b a1       	ldd	r22, Y+35	; 0x23
    16ea:	7c a1       	ldd	r23, Y+36	; 0x24
    16ec:	8d a1       	ldd	r24, Y+37	; 0x25
    16ee:	9e a1       	ldd	r25, Y+38	; 0x26
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	3f ef       	ldi	r19, 0xFF	; 255
    16f4:	4f e7       	ldi	r20, 0x7F	; 127
    16f6:	57 e4       	ldi	r21, 0x47	; 71
    16f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16fc:	18 16       	cp	r1, r24
    16fe:	4c f5       	brge	.+82     	; 0x1752 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1700:	6f a1       	ldd	r22, Y+39	; 0x27
    1702:	78 a5       	ldd	r23, Y+40	; 0x28
    1704:	89 a5       	ldd	r24, Y+41	; 0x29
    1706:	9a a5       	ldd	r25, Y+42	; 0x2a
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	40 e2       	ldi	r20, 0x20	; 32
    170e:	51 e4       	ldi	r21, 0x41	; 65
    1710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	bc 01       	movw	r22, r24
    171a:	cd 01       	movw	r24, r26
    171c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	9a a3       	std	Y+34, r25	; 0x22
    1726:	89 a3       	std	Y+33, r24	; 0x21
    1728:	0f c0       	rjmp	.+30     	; 0x1748 <LCD_displayCharacter+0x1d6>
    172a:	89 e1       	ldi	r24, 0x19	; 25
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	98 a3       	std	Y+32, r25	; 0x20
    1730:	8f 8f       	std	Y+31, r24	; 0x1f
    1732:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1734:	98 a1       	ldd	r25, Y+32	; 0x20
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <LCD_displayCharacter+0x1c4>
    173a:	98 a3       	std	Y+32, r25	; 0x20
    173c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173e:	89 a1       	ldd	r24, Y+33	; 0x21
    1740:	9a a1       	ldd	r25, Y+34	; 0x22
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	9a a3       	std	Y+34, r25	; 0x22
    1746:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1748:	89 a1       	ldd	r24, Y+33	; 0x21
    174a:	9a a1       	ldd	r25, Y+34	; 0x22
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	69 f7       	brne	.-38     	; 0x172a <LCD_displayCharacter+0x1b8>
    1750:	14 c0       	rjmp	.+40     	; 0x177a <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1752:	6b a1       	ldd	r22, Y+35	; 0x23
    1754:	7c a1       	ldd	r23, Y+36	; 0x24
    1756:	8d a1       	ldd	r24, Y+37	; 0x25
    1758:	9e a1       	ldd	r25, Y+38	; 0x26
    175a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	9a a3       	std	Y+34, r25	; 0x22
    1764:	89 a3       	std	Y+33, r24	; 0x21
    1766:	89 a1       	ldd	r24, Y+33	; 0x21
    1768:	9a a1       	ldd	r25, Y+34	; 0x22
    176a:	9e 8f       	std	Y+30, r25	; 0x1e
    176c:	8d 8f       	std	Y+29, r24	; 0x1d
    176e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1770:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	f1 f7       	brne	.-4      	; 0x1772 <LCD_displayCharacter+0x200>
    1776:	9e 8f       	std	Y+30, r25	; 0x1e
    1778:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    177a:	e5 e3       	ldi	r30, 0x35	; 53
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	89 ad       	ldd	r24, Y+57	; 0x39
    1780:	80 83       	st	Z, r24
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	a0 e8       	ldi	r26, 0x80	; 128
    1788:	bf e3       	ldi	r27, 0x3F	; 63
    178a:	89 8f       	std	Y+25, r24	; 0x19
    178c:	9a 8f       	std	Y+26, r25	; 0x1a
    178e:	ab 8f       	std	Y+27, r26	; 0x1b
    1790:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1792:	69 8d       	ldd	r22, Y+25	; 0x19
    1794:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1796:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1798:	9c 8d       	ldd	r25, Y+28	; 0x1c
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	4a e7       	ldi	r20, 0x7A	; 122
    17a0:	53 e4       	ldi	r21, 0x43	; 67
    17a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	8d 8b       	std	Y+21, r24	; 0x15
    17ac:	9e 8b       	std	Y+22, r25	; 0x16
    17ae:	af 8b       	std	Y+23, r26	; 0x17
    17b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17b2:	6d 89       	ldd	r22, Y+21	; 0x15
    17b4:	7e 89       	ldd	r23, Y+22	; 0x16
    17b6:	8f 89       	ldd	r24, Y+23	; 0x17
    17b8:	98 8d       	ldd	r25, Y+24	; 0x18
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e8       	ldi	r20, 0x80	; 128
    17c0:	5f e3       	ldi	r21, 0x3F	; 63
    17c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c6:	88 23       	and	r24, r24
    17c8:	2c f4       	brge	.+10     	; 0x17d4 <LCD_displayCharacter+0x262>
		__ticks = 1;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	9c 8b       	std	Y+20, r25	; 0x14
    17d0:	8b 8b       	std	Y+19, r24	; 0x13
    17d2:	3f c0       	rjmp	.+126    	; 0x1852 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    17d4:	6d 89       	ldd	r22, Y+21	; 0x15
    17d6:	7e 89       	ldd	r23, Y+22	; 0x16
    17d8:	8f 89       	ldd	r24, Y+23	; 0x17
    17da:	98 8d       	ldd	r25, Y+24	; 0x18
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	3f ef       	ldi	r19, 0xFF	; 255
    17e0:	4f e7       	ldi	r20, 0x7F	; 127
    17e2:	57 e4       	ldi	r21, 0x47	; 71
    17e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e8:	18 16       	cp	r1, r24
    17ea:	4c f5       	brge	.+82     	; 0x183e <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ec:	69 8d       	ldd	r22, Y+25	; 0x19
    17ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e2       	ldi	r20, 0x20	; 32
    17fa:	51 e4       	ldi	r21, 0x41	; 65
    17fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	bc 01       	movw	r22, r24
    1806:	cd 01       	movw	r24, r26
    1808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	9c 8b       	std	Y+20, r25	; 0x14
    1812:	8b 8b       	std	Y+19, r24	; 0x13
    1814:	0f c0       	rjmp	.+30     	; 0x1834 <LCD_displayCharacter+0x2c2>
    1816:	89 e1       	ldi	r24, 0x19	; 25
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	9a 8b       	std	Y+18, r25	; 0x12
    181c:	89 8b       	std	Y+17, r24	; 0x11
    181e:	89 89       	ldd	r24, Y+17	; 0x11
    1820:	9a 89       	ldd	r25, Y+18	; 0x12
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	f1 f7       	brne	.-4      	; 0x1822 <LCD_displayCharacter+0x2b0>
    1826:	9a 8b       	std	Y+18, r25	; 0x12
    1828:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182a:	8b 89       	ldd	r24, Y+19	; 0x13
    182c:	9c 89       	ldd	r25, Y+20	; 0x14
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	9c 8b       	std	Y+20, r25	; 0x14
    1832:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1834:	8b 89       	ldd	r24, Y+19	; 0x13
    1836:	9c 89       	ldd	r25, Y+20	; 0x14
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	69 f7       	brne	.-38     	; 0x1816 <LCD_displayCharacter+0x2a4>
    183c:	14 c0       	rjmp	.+40     	; 0x1866 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183e:	6d 89       	ldd	r22, Y+21	; 0x15
    1840:	7e 89       	ldd	r23, Y+22	; 0x16
    1842:	8f 89       	ldd	r24, Y+23	; 0x17
    1844:	98 8d       	ldd	r25, Y+24	; 0x18
    1846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	9c 8b       	std	Y+20, r25	; 0x14
    1850:	8b 8b       	std	Y+19, r24	; 0x13
    1852:	8b 89       	ldd	r24, Y+19	; 0x13
    1854:	9c 89       	ldd	r25, Y+20	; 0x14
    1856:	98 8b       	std	Y+16, r25	; 0x10
    1858:	8f 87       	std	Y+15, r24	; 0x0f
    185a:	8f 85       	ldd	r24, Y+15	; 0x0f
    185c:	98 89       	ldd	r25, Y+16	; 0x10
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	f1 f7       	brne	.-4      	; 0x185e <LCD_displayCharacter+0x2ec>
    1862:	98 8b       	std	Y+16, r25	; 0x10
    1864:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1866:	a2 e3       	ldi	r26, 0x32	; 50
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e2 e3       	ldi	r30, 0x32	; 50
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	8f 7b       	andi	r24, 0xBF	; 191
    1872:	8c 93       	st	X, r24
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	a0 e8       	ldi	r26, 0x80	; 128
    187a:	bf e3       	ldi	r27, 0x3F	; 63
    187c:	8b 87       	std	Y+11, r24	; 0x0b
    187e:	9c 87       	std	Y+12, r25	; 0x0c
    1880:	ad 87       	std	Y+13, r26	; 0x0d
    1882:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1884:	6b 85       	ldd	r22, Y+11	; 0x0b
    1886:	7c 85       	ldd	r23, Y+12	; 0x0c
    1888:	8d 85       	ldd	r24, Y+13	; 0x0d
    188a:	9e 85       	ldd	r25, Y+14	; 0x0e
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	4a e7       	ldi	r20, 0x7A	; 122
    1892:	53 e4       	ldi	r21, 0x43	; 67
    1894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	8f 83       	std	Y+7, r24	; 0x07
    189e:	98 87       	std	Y+8, r25	; 0x08
    18a0:	a9 87       	std	Y+9, r26	; 0x09
    18a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18a4:	6f 81       	ldd	r22, Y+7	; 0x07
    18a6:	78 85       	ldd	r23, Y+8	; 0x08
    18a8:	89 85       	ldd	r24, Y+9	; 0x09
    18aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e8       	ldi	r20, 0x80	; 128
    18b2:	5f e3       	ldi	r21, 0x3F	; 63
    18b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18b8:	88 23       	and	r24, r24
    18ba:	2c f4       	brge	.+10     	; 0x18c6 <LCD_displayCharacter+0x354>
		__ticks = 1;
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	9e 83       	std	Y+6, r25	; 0x06
    18c2:	8d 83       	std	Y+5, r24	; 0x05
    18c4:	3f c0       	rjmp	.+126    	; 0x1944 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    18c6:	6f 81       	ldd	r22, Y+7	; 0x07
    18c8:	78 85       	ldd	r23, Y+8	; 0x08
    18ca:	89 85       	ldd	r24, Y+9	; 0x09
    18cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	3f ef       	ldi	r19, 0xFF	; 255
    18d2:	4f e7       	ldi	r20, 0x7F	; 127
    18d4:	57 e4       	ldi	r21, 0x47	; 71
    18d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18da:	18 16       	cp	r1, r24
    18dc:	4c f5       	brge	.+82     	; 0x1930 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18de:	6b 85       	ldd	r22, Y+11	; 0x0b
    18e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e2       	ldi	r20, 0x20	; 32
    18ec:	51 e4       	ldi	r21, 0x41	; 65
    18ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	bc 01       	movw	r22, r24
    18f8:	cd 01       	movw	r24, r26
    18fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	9e 83       	std	Y+6, r25	; 0x06
    1904:	8d 83       	std	Y+5, r24	; 0x05
    1906:	0f c0       	rjmp	.+30     	; 0x1926 <LCD_displayCharacter+0x3b4>
    1908:	89 e1       	ldi	r24, 0x19	; 25
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	9c 83       	std	Y+4, r25	; 0x04
    190e:	8b 83       	std	Y+3, r24	; 0x03
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	9c 81       	ldd	r25, Y+4	; 0x04
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	f1 f7       	brne	.-4      	; 0x1914 <LCD_displayCharacter+0x3a2>
    1918:	9c 83       	std	Y+4, r25	; 0x04
    191a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191c:	8d 81       	ldd	r24, Y+5	; 0x05
    191e:	9e 81       	ldd	r25, Y+6	; 0x06
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	9e 83       	std	Y+6, r25	; 0x06
    1924:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1926:	8d 81       	ldd	r24, Y+5	; 0x05
    1928:	9e 81       	ldd	r25, Y+6	; 0x06
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	69 f7       	brne	.-38     	; 0x1908 <LCD_displayCharacter+0x396>
    192e:	14 c0       	rjmp	.+40     	; 0x1958 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1930:	6f 81       	ldd	r22, Y+7	; 0x07
    1932:	78 85       	ldd	r23, Y+8	; 0x08
    1934:	89 85       	ldd	r24, Y+9	; 0x09
    1936:	9a 85       	ldd	r25, Y+10	; 0x0a
    1938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	9e 83       	std	Y+6, r25	; 0x06
    1942:	8d 83       	std	Y+5, r24	; 0x05
    1944:	8d 81       	ldd	r24, Y+5	; 0x05
    1946:	9e 81       	ldd	r25, Y+6	; 0x06
    1948:	9a 83       	std	Y+2, r25	; 0x02
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	9a 81       	ldd	r25, Y+2	; 0x02
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	f1 f7       	brne	.-4      	; 0x1950 <LCD_displayCharacter+0x3de>
    1954:	9a 83       	std	Y+2, r25	; 0x02
    1956:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    1958:	e9 96       	adiw	r28, 0x39	; 57
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	00 d0       	rcall	.+0      	; 0x1970 <LCD_displayString+0x6>
    1970:	0f 92       	push	r0
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	9b 83       	std	Y+3, r25	; 0x03
    1978:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    197a:	19 82       	std	Y+1, r1	; 0x01
    197c:	0e c0       	rjmp	.+28     	; 0x199a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	9b 81       	ldd	r25, Y+3	; 0x03
    1988:	fc 01       	movw	r30, r24
    198a:	e2 0f       	add	r30, r18
    198c:	f3 1f       	adc	r31, r19
    198e:	80 81       	ld	r24, Z
    1990:	0e 94 b9 0a 	call	0x1572	; 0x1572 <LCD_displayCharacter>
		i++;
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	8f 5f       	subi	r24, 0xFF	; 255
    1998:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	9b 81       	ldd	r25, Y+3	; 0x03
    19a4:	fc 01       	movw	r30, r24
    19a6:	e2 0f       	add	r30, r18
    19a8:	f3 1f       	adc	r31, r19
    19aa:	80 81       	ld	r24, Z
    19ac:	88 23       	and	r24, r24
    19ae:	39 f7       	brne	.-50     	; 0x197e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <LCD_goToRowColumn+0x6>
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <LCD_goToRowColumn+0x8>
    19c4:	0f 92       	push	r0
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	8a 83       	std	Y+2, r24	; 0x02
    19cc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	3d 83       	std	Y+5, r19	; 0x05
    19d6:	2c 83       	std	Y+4, r18	; 0x04
    19d8:	8c 81       	ldd	r24, Y+4	; 0x04
    19da:	9d 81       	ldd	r25, Y+5	; 0x05
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	91 05       	cpc	r25, r1
    19e0:	c1 f0       	breq	.+48     	; 0x1a12 <LCD_goToRowColumn+0x56>
    19e2:	2c 81       	ldd	r18, Y+4	; 0x04
    19e4:	3d 81       	ldd	r19, Y+5	; 0x05
    19e6:	22 30       	cpi	r18, 0x02	; 2
    19e8:	31 05       	cpc	r19, r1
    19ea:	2c f4       	brge	.+10     	; 0x19f6 <LCD_goToRowColumn+0x3a>
    19ec:	8c 81       	ldd	r24, Y+4	; 0x04
    19ee:	9d 81       	ldd	r25, Y+5	; 0x05
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	61 f0       	breq	.+24     	; 0x1a0c <LCD_goToRowColumn+0x50>
    19f4:	19 c0       	rjmp	.+50     	; 0x1a28 <LCD_goToRowColumn+0x6c>
    19f6:	2c 81       	ldd	r18, Y+4	; 0x04
    19f8:	3d 81       	ldd	r19, Y+5	; 0x05
    19fa:	22 30       	cpi	r18, 0x02	; 2
    19fc:	31 05       	cpc	r19, r1
    19fe:	69 f0       	breq	.+26     	; 0x1a1a <LCD_goToRowColumn+0x5e>
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	9d 81       	ldd	r25, Y+5	; 0x05
    1a04:	83 30       	cpi	r24, 0x03	; 3
    1a06:	91 05       	cpc	r25, r1
    1a08:	61 f0       	breq	.+24     	; 0x1a22 <LCD_goToRowColumn+0x66>
    1a0a:	0e c0       	rjmp	.+28     	; 0x1a28 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	0b c0       	rjmp	.+22     	; 0x1a28 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	80 5c       	subi	r24, 0xC0	; 192
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	07 c0       	rjmp	.+14     	; 0x1a28 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	80 5f       	subi	r24, 0xF0	; 240
    1a1e:	89 83       	std	Y+1, r24	; 0x01
    1a20:	03 c0       	rjmp	.+6      	; 0x1a28 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	80 5b       	subi	r24, 0xB0	; 176
    1a26:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	80 68       	ori	r24, 0x80	; 128
    1a2c:	0e 94 bd 08 	call	0x117a	; 0x117a <LCD_sendCommand>
}
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <LCD_displayStringRowColumn+0x6>
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <LCD_displayStringRowColumn+0x8>
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	6a 83       	std	Y+2, r22	; 0x02
    1a50:	5c 83       	std	Y+4, r21	; 0x04
    1a52:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	6a 81       	ldd	r22, Y+2	; 0x02
    1a58:	0e 94 de 0c 	call	0x19bc	; 0x19bc <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a60:	0e 94 b5 0c 	call	0x196a	; 0x196a <LCD_displayString>
}
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	62 97       	sbiw	r28, 0x12	; 18
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	de bf       	out	0x3e, r29	; 62
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	cd bf       	out	0x3d, r28	; 61
    1a86:	9a 8b       	std	Y+18, r25	; 0x12
    1a88:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1a8a:	89 89       	ldd	r24, Y+17	; 0x11
    1a8c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a8e:	9e 01       	movw	r18, r28
    1a90:	2f 5f       	subi	r18, 0xFF	; 255
    1a92:	3f 4f       	sbci	r19, 0xFF	; 255
    1a94:	b9 01       	movw	r22, r18
    1a96:	4a e0       	ldi	r20, 0x0A	; 10
    1a98:	50 e0       	ldi	r21, 0x00	; 0
    1a9a:	0e 94 c7 11 	call	0x238e	; 0x238e <itoa>
   LCD_displayString(buff);
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	01 96       	adiw	r24, 0x01	; 1
    1aa2:	0e 94 b5 0c 	call	0x196a	; 0x196a <LCD_displayString>
}
    1aa6:	62 96       	adiw	r28, 0x12	; 18
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	f8 94       	cli
    1aac:	de bf       	out	0x3e, r29	; 62
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	cd bf       	out	0x3d, r28	; 61
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	0e 94 bd 08 	call	0x117a	; 0x117a <LCD_sendCommand>
}
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    1acc:	1f 92       	push	r1
    1ace:	0f 92       	push	r0
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	0f 92       	push	r0
    1ad4:	11 24       	eor	r1, r1
    1ad6:	2f 93       	push	r18
    1ad8:	3f 93       	push	r19
    1ada:	4f 93       	push	r20
    1adc:	5f 93       	push	r21
    1ade:	6f 93       	push	r22
    1ae0:	7f 93       	push	r23
    1ae2:	8f 93       	push	r24
    1ae4:	9f 93       	push	r25
    1ae6:	af 93       	push	r26
    1ae8:	bf 93       	push	r27
    1aea:	ef 93       	push	r30
    1aec:	ff 93       	push	r31
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0_callBackPtr != NULL_PTR)
    1af6:	80 91 d0 00 	lds	r24, 0x00D0
    1afa:	90 91 d1 00 	lds	r25, 0x00D1
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	29 f0       	breq	.+10     	; 0x1b0c <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer0_callBackPtr)();
    1b02:	e0 91 d0 00 	lds	r30, 0x00D0
    1b06:	f0 91 d1 00 	lds	r31, 0x00D1
    1b0a:	09 95       	icall
	}
}
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	ff 91       	pop	r31
    1b12:	ef 91       	pop	r30
    1b14:	bf 91       	pop	r27
    1b16:	af 91       	pop	r26
    1b18:	9f 91       	pop	r25
    1b1a:	8f 91       	pop	r24
    1b1c:	7f 91       	pop	r23
    1b1e:	6f 91       	pop	r22
    1b20:	5f 91       	pop	r21
    1b22:	4f 91       	pop	r20
    1b24:	3f 91       	pop	r19
    1b26:	2f 91       	pop	r18
    1b28:	0f 90       	pop	r0
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	0f 90       	pop	r0
    1b2e:	1f 90       	pop	r1
    1b30:	18 95       	reti

00001b32 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    1b32:	1f 92       	push	r1
    1b34:	0f 92       	push	r0
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	0f 92       	push	r0
    1b3a:	11 24       	eor	r1, r1
    1b3c:	2f 93       	push	r18
    1b3e:	3f 93       	push	r19
    1b40:	4f 93       	push	r20
    1b42:	5f 93       	push	r21
    1b44:	6f 93       	push	r22
    1b46:	7f 93       	push	r23
    1b48:	8f 93       	push	r24
    1b4a:	9f 93       	push	r25
    1b4c:	af 93       	push	r26
    1b4e:	bf 93       	push	r27
    1b50:	ef 93       	push	r30
    1b52:	ff 93       	push	r31
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0_callBackPtr != NULL_PTR)
    1b5c:	80 91 d0 00 	lds	r24, 0x00D0
    1b60:	90 91 d1 00 	lds	r25, 0x00D1
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	29 f0       	breq	.+10     	; 0x1b72 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer0_callBackPtr)();
    1b68:	e0 91 d0 00 	lds	r30, 0x00D0
    1b6c:	f0 91 d1 00 	lds	r31, 0x00D1
    1b70:	09 95       	icall
	}
}
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	ff 91       	pop	r31
    1b78:	ef 91       	pop	r30
    1b7a:	bf 91       	pop	r27
    1b7c:	af 91       	pop	r26
    1b7e:	9f 91       	pop	r25
    1b80:	8f 91       	pop	r24
    1b82:	7f 91       	pop	r23
    1b84:	6f 91       	pop	r22
    1b86:	5f 91       	pop	r21
    1b88:	4f 91       	pop	r20
    1b8a:	3f 91       	pop	r19
    1b8c:	2f 91       	pop	r18
    1b8e:	0f 90       	pop	r0
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	0f 90       	pop	r0
    1b94:	1f 90       	pop	r1
    1b96:	18 95       	reti

00001b98 <__vector_8>:
ISR(TIMER1_OVF_vect)
{
    1b98:	1f 92       	push	r1
    1b9a:	0f 92       	push	r0
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	0f 92       	push	r0
    1ba0:	11 24       	eor	r1, r1
    1ba2:	2f 93       	push	r18
    1ba4:	3f 93       	push	r19
    1ba6:	4f 93       	push	r20
    1ba8:	5f 93       	push	r21
    1baa:	6f 93       	push	r22
    1bac:	7f 93       	push	r23
    1bae:	8f 93       	push	r24
    1bb0:	9f 93       	push	r25
    1bb2:	af 93       	push	r26
    1bb4:	bf 93       	push	r27
    1bb6:	ef 93       	push	r30
    1bb8:	ff 93       	push	r31
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1_callBackPtr != NULL_PTR)
    1bc2:	80 91 d2 00 	lds	r24, 0x00D2
    1bc6:	90 91 d3 00 	lds	r25, 0x00D3
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	29 f0       	breq	.+10     	; 0x1bd8 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer1_callBackPtr)();
    1bce:	e0 91 d2 00 	lds	r30, 0x00D2
    1bd2:	f0 91 d3 00 	lds	r31, 0x00D3
    1bd6:	09 95       	icall
	}
}
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	ff 91       	pop	r31
    1bde:	ef 91       	pop	r30
    1be0:	bf 91       	pop	r27
    1be2:	af 91       	pop	r26
    1be4:	9f 91       	pop	r25
    1be6:	8f 91       	pop	r24
    1be8:	7f 91       	pop	r23
    1bea:	6f 91       	pop	r22
    1bec:	5f 91       	pop	r21
    1bee:	4f 91       	pop	r20
    1bf0:	3f 91       	pop	r19
    1bf2:	2f 91       	pop	r18
    1bf4:	0f 90       	pop	r0
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	0f 90       	pop	r0
    1bfa:	1f 90       	pop	r1
    1bfc:	18 95       	reti

00001bfe <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    1bfe:	1f 92       	push	r1
    1c00:	0f 92       	push	r0
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	0f 92       	push	r0
    1c06:	11 24       	eor	r1, r1
    1c08:	2f 93       	push	r18
    1c0a:	3f 93       	push	r19
    1c0c:	4f 93       	push	r20
    1c0e:	5f 93       	push	r21
    1c10:	6f 93       	push	r22
    1c12:	7f 93       	push	r23
    1c14:	8f 93       	push	r24
    1c16:	9f 93       	push	r25
    1c18:	af 93       	push	r26
    1c1a:	bf 93       	push	r27
    1c1c:	ef 93       	push	r30
    1c1e:	ff 93       	push	r31
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1_callBackPtr != NULL_PTR)
    1c28:	80 91 d2 00 	lds	r24, 0x00D2
    1c2c:	90 91 d3 00 	lds	r25, 0x00D3
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	29 f0       	breq	.+10     	; 0x1c3e <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer1_callBackPtr)();
    1c34:	e0 91 d2 00 	lds	r30, 0x00D2
    1c38:	f0 91 d3 00 	lds	r31, 0x00D3
    1c3c:	09 95       	icall
	}
}
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	ff 91       	pop	r31
    1c44:	ef 91       	pop	r30
    1c46:	bf 91       	pop	r27
    1c48:	af 91       	pop	r26
    1c4a:	9f 91       	pop	r25
    1c4c:	8f 91       	pop	r24
    1c4e:	7f 91       	pop	r23
    1c50:	6f 91       	pop	r22
    1c52:	5f 91       	pop	r21
    1c54:	4f 91       	pop	r20
    1c56:	3f 91       	pop	r19
    1c58:	2f 91       	pop	r18
    1c5a:	0f 90       	pop	r0
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	0f 90       	pop	r0
    1c60:	1f 90       	pop	r1
    1c62:	18 95       	reti

00001c64 <__vector_4>:

ISR(TIMER2_OVF_vect)
{
    1c64:	1f 92       	push	r1
    1c66:	0f 92       	push	r0
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	0f 92       	push	r0
    1c6c:	11 24       	eor	r1, r1
    1c6e:	2f 93       	push	r18
    1c70:	3f 93       	push	r19
    1c72:	4f 93       	push	r20
    1c74:	5f 93       	push	r21
    1c76:	6f 93       	push	r22
    1c78:	7f 93       	push	r23
    1c7a:	8f 93       	push	r24
    1c7c:	9f 93       	push	r25
    1c7e:	af 93       	push	r26
    1c80:	bf 93       	push	r27
    1c82:	ef 93       	push	r30
    1c84:	ff 93       	push	r31
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2_callBackPtr != NULL_PTR)
    1c8e:	80 91 d4 00 	lds	r24, 0x00D4
    1c92:	90 91 d5 00 	lds	r25, 0x00D5
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	29 f0       	breq	.+10     	; 0x1ca4 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer2_callBackPtr)();
    1c9a:	e0 91 d4 00 	lds	r30, 0x00D4
    1c9e:	f0 91 d5 00 	lds	r31, 0x00D5
    1ca2:	09 95       	icall
	}
}
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	ff 91       	pop	r31
    1caa:	ef 91       	pop	r30
    1cac:	bf 91       	pop	r27
    1cae:	af 91       	pop	r26
    1cb0:	9f 91       	pop	r25
    1cb2:	8f 91       	pop	r24
    1cb4:	7f 91       	pop	r23
    1cb6:	6f 91       	pop	r22
    1cb8:	5f 91       	pop	r21
    1cba:	4f 91       	pop	r20
    1cbc:	3f 91       	pop	r19
    1cbe:	2f 91       	pop	r18
    1cc0:	0f 90       	pop	r0
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	0f 90       	pop	r0
    1cc6:	1f 90       	pop	r1
    1cc8:	18 95       	reti

00001cca <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    1cca:	1f 92       	push	r1
    1ccc:	0f 92       	push	r0
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	0f 92       	push	r0
    1cd2:	11 24       	eor	r1, r1
    1cd4:	2f 93       	push	r18
    1cd6:	3f 93       	push	r19
    1cd8:	4f 93       	push	r20
    1cda:	5f 93       	push	r21
    1cdc:	6f 93       	push	r22
    1cde:	7f 93       	push	r23
    1ce0:	8f 93       	push	r24
    1ce2:	9f 93       	push	r25
    1ce4:	af 93       	push	r26
    1ce6:	bf 93       	push	r27
    1ce8:	ef 93       	push	r30
    1cea:	ff 93       	push	r31
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2_callBackPtr != NULL_PTR)
    1cf4:	80 91 d4 00 	lds	r24, 0x00D4
    1cf8:	90 91 d5 00 	lds	r25, 0x00D5
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	29 f0       	breq	.+10     	; 0x1d0a <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_timer2_callBackPtr)();
    1d00:	e0 91 d4 00 	lds	r30, 0x00D4
    1d04:	f0 91 d5 00 	lds	r31, 0x00D5
    1d08:	09 95       	icall
	}
}
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	ff 91       	pop	r31
    1d10:	ef 91       	pop	r30
    1d12:	bf 91       	pop	r27
    1d14:	af 91       	pop	r26
    1d16:	9f 91       	pop	r25
    1d18:	8f 91       	pop	r24
    1d1a:	7f 91       	pop	r23
    1d1c:	6f 91       	pop	r22
    1d1e:	5f 91       	pop	r21
    1d20:	4f 91       	pop	r20
    1d22:	3f 91       	pop	r19
    1d24:	2f 91       	pop	r18
    1d26:	0f 90       	pop	r0
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	0f 90       	pop	r0
    1d2c:	1f 90       	pop	r1
    1d2e:	18 95       	reti

00001d30 <timer_init>:
 *******************************************************************************/
/*
 * Description : Function to call  the Timer_init() function based on timer type
 */
void timer_init(const timer_ConfigType * Config_Ptr)
{
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	00 d0       	rcall	.+0      	; 0x1d36 <timer_init+0x6>
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
    1d3a:	9a 83       	std	Y+2, r25	; 0x02
    1d3c:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->timer==0)
    1d3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d40:	fa 81       	ldd	r31, Y+2	; 0x02
    1d42:	80 81       	ld	r24, Z
    1d44:	88 23       	and	r24, r24
    1d46:	29 f4       	brne	.+10     	; 0x1d52 <timer_init+0x22>
		timer0_init(Config_Ptr);
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4c:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <timer0_init>
    1d50:	13 c0       	rjmp	.+38     	; 0x1d78 <timer_init+0x48>
	else if(Config_Ptr->timer==1)
    1d52:	e9 81       	ldd	r30, Y+1	; 0x01
    1d54:	fa 81       	ldd	r31, Y+2	; 0x02
    1d56:	80 81       	ld	r24, Z
    1d58:	81 30       	cpi	r24, 0x01	; 1
    1d5a:	29 f4       	brne	.+10     	; 0x1d66 <timer_init+0x36>
		timer1_init(Config_Ptr);
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d60:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <timer1_init>
    1d64:	09 c0       	rjmp	.+18     	; 0x1d78 <timer_init+0x48>
	else if(Config_Ptr->timer==2)
    1d66:	e9 81       	ldd	r30, Y+1	; 0x01
    1d68:	fa 81       	ldd	r31, Y+2	; 0x02
    1d6a:	80 81       	ld	r24, Z
    1d6c:	82 30       	cpi	r24, 0x02	; 2
    1d6e:	21 f4       	brne	.+8      	; 0x1d78 <timer_init+0x48>
		timer2_init(Config_Ptr);
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	9a 81       	ldd	r25, Y+2	; 0x02
    1d74:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <timer2_init>
}
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <timer0_init>:
 * 	3. Enable timer0 overflow/compare match Interrupt.
 * 	4. Initialize Timer0 Registers
 */

void timer0_init(const timer_ConfigType * Config_Ptr)
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <timer0_init+0x6>
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	89 83       	std	Y+1, r24	; 0x01
	/* Timer0 always operates in a non-pwm mode*/
    TCCR0|=(1<<FOC0);
    1d90:	a3 e5       	ldi	r26, 0x53	; 83
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e3 e5       	ldi	r30, 0x53	; 83
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	80 68       	ori	r24, 0x80	; 128
    1d9c:	8c 93       	st	X, r24
    /*
     * insert the required clock value in the first three bits (CS02, CS01 and CS00)
     * of TCCR0 Register
     */
    TCCR0= ( TCCR0 & 0xF8) | (Config_Ptr->clock);
    1d9e:	a3 e5       	ldi	r26, 0x53	; 83
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e3 e5       	ldi	r30, 0x53	; 83
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	98 2f       	mov	r25, r24
    1daa:	98 7f       	andi	r25, 0xF8	; 248
    1dac:	e9 81       	ldd	r30, Y+1	; 0x01
    1dae:	fa 81       	ldd	r31, Y+2	; 0x02
    1db0:	81 81       	ldd	r24, Z+1	; 0x01
    1db2:	89 2b       	or	r24, r25
    1db4:	8c 93       	st	X, r24
    /*
     * insert the required waveform generation mode in bit no. 6 (WFGM00) bit &
     * bit no.3 (WFGM01) bit in TCCR0 Register
     */
    TCCR0= ( TCCR0 & 0xBF) | ((Config_Ptr->mode&0x01)<<6);
    1db6:	a3 e5       	ldi	r26, 0x53	; 83
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e3 e5       	ldi	r30, 0x53	; 83
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	2f 7b       	andi	r18, 0xBF	; 191
    1dc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1dc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	88 2f       	mov	r24, r24
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	81 70       	andi	r24, 0x01	; 1
    1dd0:	90 70       	andi	r25, 0x00	; 0
    1dd2:	00 24       	eor	r0, r0
    1dd4:	96 95       	lsr	r25
    1dd6:	87 95       	ror	r24
    1dd8:	07 94       	ror	r0
    1dda:	96 95       	lsr	r25
    1ddc:	87 95       	ror	r24
    1dde:	07 94       	ror	r0
    1de0:	98 2f       	mov	r25, r24
    1de2:	80 2d       	mov	r24, r0
    1de4:	82 2b       	or	r24, r18
    1de6:	8c 93       	st	X, r24
    TCCR0= ( TCCR0 & 0xF7) | ((Config_Ptr->mode&0x02)<<2);
    1de8:	a3 e5       	ldi	r26, 0x53	; 83
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	e3 e5       	ldi	r30, 0x53	; 83
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	28 2f       	mov	r18, r24
    1df4:	27 7f       	andi	r18, 0xF7	; 247
    1df6:	e9 81       	ldd	r30, Y+1	; 0x01
    1df8:	fa 81       	ldd	r31, Y+2	; 0x02
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	88 2f       	mov	r24, r24
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	82 70       	andi	r24, 0x02	; 2
    1e02:	90 70       	andi	r25, 0x00	; 0
    1e04:	88 0f       	add	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	82 2b       	or	r24, r18
    1e0e:	8c 93       	st	X, r24

    /* Initial Value for Timer0 */
    TCNT0 =Config_Ptr->initialValue ;
    1e10:	a2 e5       	ldi	r26, 0x52	; 82
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e9 81       	ldd	r30, Y+1	; 0x01
    1e16:	fa 81       	ldd	r31, Y+2	; 0x02
    1e18:	83 81       	ldd	r24, Z+3	; 0x03
    1e1a:	94 81       	ldd	r25, Z+4	; 0x04
    1e1c:	8c 93       	st	X, r24
    /* Compare Value for Timer0 */
    OCR0=Config_Ptr->compareValue ;
    1e1e:	ac e5       	ldi	r26, 0x5C	; 92
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	e9 81       	ldd	r30, Y+1	; 0x01
    1e24:	fa 81       	ldd	r31, Y+2	; 0x02
    1e26:	85 81       	ldd	r24, Z+5	; 0x05
    1e28:	96 81       	ldd	r25, Z+6	; 0x06
    1e2a:	8c 93       	st	X, r24
    /*  Timer0 overflow interrupt enable*/
    if(Config_Ptr->mode==0)
    1e2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e30:	82 81       	ldd	r24, Z+2	; 0x02
    1e32:	88 23       	and	r24, r24
    1e34:	41 f4       	brne	.+16     	; 0x1e46 <timer0_init+0xc4>
    TIMSK|=(1<<TOIE0);
    1e36:	a9 e5       	ldi	r26, 0x59	; 89
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	e9 e5       	ldi	r30, 0x59	; 89
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	81 60       	ori	r24, 0x01	; 1
    1e42:	8c 93       	st	X, r24
    1e44:	0c c0       	rjmp	.+24     	; 0x1e5e <timer0_init+0xdc>
    /*  Timer0 compare match interrupt enable*/
    else if(Config_Ptr->mode==2)
    1e46:	e9 81       	ldd	r30, Y+1	; 0x01
    1e48:	fa 81       	ldd	r31, Y+2	; 0x02
    1e4a:	82 81       	ldd	r24, Z+2	; 0x02
    1e4c:	82 30       	cpi	r24, 0x02	; 2
    1e4e:	39 f4       	brne	.+14     	; 0x1e5e <timer0_init+0xdc>
    TIMSK|=(1<<OCIE0);
    1e50:	a9 e5       	ldi	r26, 0x59	; 89
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e9 e5       	ldi	r30, 0x59	; 89
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	82 60       	ori	r24, 0x02	; 2
    1e5c:	8c 93       	st	X, r24


}
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <timer0_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */
void timer0_setCallBack(void(*a_ptr)(void))
{
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	00 d0       	rcall	.+0      	; 0x1e6e <timer0_setCallBack+0x6>
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	9a 83       	std	Y+2, r25	; 0x02
    1e74:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_timer0_callBackPtr= a_ptr;
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7a:	90 93 d1 00 	sts	0x00D1, r25
    1e7e:	80 93 d0 00 	sts	0x00D0, r24
}
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	cf 91       	pop	r28
    1e88:	df 91       	pop	r29
    1e8a:	08 95       	ret

00001e8c <timer1_init>:
void timer1_init(const timer_ConfigType * Config_Ptr)
{
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <timer1_init+0x6>
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	9a 83       	std	Y+2, r25	; 0x02
    1e98:	89 83       	std	Y+1, r24	; 0x01
	/* Timer1 always operates in a non-pwm mode*/
	TCCR1A=(1<<FOC1A)|(1<<FOC1B);
    1e9a:	ef e4       	ldi	r30, 0x4F	; 79
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	8c e0       	ldi	r24, 0x0C	; 12
    1ea0:	80 83       	st	Z, r24

    /*
     * insert the required clock value in the first three bits (CS12, CS11 and CS10)
     * of TCCR1B Register
     */
    TCCR1B= (TCCR1B & 0xF8) | Config_Ptr->clock;
    1ea2:	ae e4       	ldi	r26, 0x4E	; 78
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	ee e4       	ldi	r30, 0x4E	; 78
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	98 2f       	mov	r25, r24
    1eae:	98 7f       	andi	r25, 0xF8	; 248
    1eb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb4:	81 81       	ldd	r24, Z+1	; 0x01
    1eb6:	89 2b       	or	r24, r25
    1eb8:	8c 93       	st	X, r24
    /*
     * insert the required waveform generation mode in bit no. 4 (WFGM13) bit &
     * bit no.3 (WGM12) bit in TCCR1B Register
     * and bit no.1 (WGM11)& bit no.0(WGM10)in TCCR1A Register
     */
    if(Config_Ptr->mode==2)
    1eba:	e9 81       	ldd	r30, Y+1	; 0x01
    1ebc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ebe:	82 81       	ldd	r24, Z+2	; 0x02
    1ec0:	82 30       	cpi	r24, 0x02	; 2
    1ec2:	39 f4       	brne	.+14     	; 0x1ed2 <timer1_init+0x46>
    TCCR1B|= (1<<WGM12);
    1ec4:	ae e4       	ldi	r26, 0x4E	; 78
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	ee e4       	ldi	r30, 0x4E	; 78
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	88 60       	ori	r24, 0x08	; 8
    1ed0:	8c 93       	st	X, r24


    /* Initial Value for Timer1 */
    TCNT1 =Config_Ptr->initialValue ;
    1ed2:	ac e4       	ldi	r26, 0x4C	; 76
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eda:	83 81       	ldd	r24, Z+3	; 0x03
    1edc:	94 81       	ldd	r25, Z+4	; 0x04
    1ede:	11 96       	adiw	r26, 0x01	; 1
    1ee0:	9c 93       	st	X, r25
    1ee2:	8e 93       	st	-X, r24
    /* Compare Value for Timer1 */
    OCR1A=Config_Ptr->compareValue ;
    1ee4:	aa e4       	ldi	r26, 0x4A	; 74
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eea:	fa 81       	ldd	r31, Y+2	; 0x02
    1eec:	85 81       	ldd	r24, Z+5	; 0x05
    1eee:	96 81       	ldd	r25, Z+6	; 0x06
    1ef0:	11 96       	adiw	r26, 0x01	; 1
    1ef2:	9c 93       	st	X, r25
    1ef4:	8e 93       	st	-X, r24
    /*  Timer1 overflow interrupt enable*/
    if(Config_Ptr->mode==0)
    1ef6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef8:	fa 81       	ldd	r31, Y+2	; 0x02
    1efa:	82 81       	ldd	r24, Z+2	; 0x02
    1efc:	88 23       	and	r24, r24
    1efe:	41 f4       	brne	.+16     	; 0x1f10 <timer1_init+0x84>
    TIMSK|=(1<<TOIE1);
    1f00:	a9 e5       	ldi	r26, 0x59	; 89
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e9 e5       	ldi	r30, 0x59	; 89
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	84 60       	ori	r24, 0x04	; 4
    1f0c:	8c 93       	st	X, r24
    1f0e:	09 c0       	rjmp	.+18     	; 0x1f22 <timer1_init+0x96>
    /*  Timer1 compare match interrupt enable for CHANNEL A*/
    else if(Config_Ptr->mode==2)
    1f10:	e9 81       	ldd	r30, Y+1	; 0x01
    1f12:	fa 81       	ldd	r31, Y+2	; 0x02
    1f14:	82 81       	ldd	r24, Z+2	; 0x02
    1f16:	82 30       	cpi	r24, 0x02	; 2
    1f18:	21 f4       	brne	.+8      	; 0x1f22 <timer1_init+0x96>
    TIMSK=(1<<OCIE1A);
    1f1a:	e9 e5       	ldi	r30, 0x59	; 89
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 e1       	ldi	r24, 0x10	; 16
    1f20:	80 83       	st	Z, r24


}
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	08 95       	ret

00001f2c <timer1_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */
void timer1_setCallBack(void(*a_ptr)(void))
{
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <timer1_setCallBack+0x6>
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
    1f36:	9a 83       	std	Y+2, r25	; 0x02
    1f38:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_timer1_callBackPtr= a_ptr;
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3e:	90 93 d3 00 	sts	0x00D3, r25
    1f42:	80 93 d2 00 	sts	0x00D2, r24
}
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <timer2_init>:
void timer2_init(const timer_ConfigType * Config_Ptr)
{
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <timer2_init+0x6>
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	9a 83       	std	Y+2, r25	; 0x02
    1f5c:	89 83       	std	Y+1, r24	; 0x01
	/* Timer2 always operates in a non-pwm mode*/
    TCCR2|=(1<<FOC2);
    1f5e:	a5 e4       	ldi	r26, 0x45	; 69
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e5 e4       	ldi	r30, 0x45	; 69
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	80 68       	ori	r24, 0x80	; 128
    1f6a:	8c 93       	st	X, r24
    /*
     * insert the required clock value in the first three bits (CS22, CS21 and CS20)
     * of TCCR2 Register
     */
    TCCR2= ( TCCR2 & 0xF8) | (Config_Ptr->clock);
    1f6c:	a5 e4       	ldi	r26, 0x45	; 69
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	e5 e4       	ldi	r30, 0x45	; 69
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	98 2f       	mov	r25, r24
    1f78:	98 7f       	andi	r25, 0xF8	; 248
    1f7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f7e:	81 81       	ldd	r24, Z+1	; 0x01
    1f80:	89 2b       	or	r24, r25
    1f82:	8c 93       	st	X, r24
    /*
     * insert the required waveform generation mode in bit no. 6 (WFGM20) bit &
     * bit no.3 (WFGM21) bit in TCCR2 Register
     */
    TCCR2= ( TCCR2 & 0xBF) | ((Config_Ptr->mode&0x01)<<6);
    1f84:	a5 e4       	ldi	r26, 0x45	; 69
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e5 e4       	ldi	r30, 0x45	; 69
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	28 2f       	mov	r18, r24
    1f90:	2f 7b       	andi	r18, 0xBF	; 191
    1f92:	e9 81       	ldd	r30, Y+1	; 0x01
    1f94:	fa 81       	ldd	r31, Y+2	; 0x02
    1f96:	82 81       	ldd	r24, Z+2	; 0x02
    1f98:	88 2f       	mov	r24, r24
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	81 70       	andi	r24, 0x01	; 1
    1f9e:	90 70       	andi	r25, 0x00	; 0
    1fa0:	00 24       	eor	r0, r0
    1fa2:	96 95       	lsr	r25
    1fa4:	87 95       	ror	r24
    1fa6:	07 94       	ror	r0
    1fa8:	96 95       	lsr	r25
    1faa:	87 95       	ror	r24
    1fac:	07 94       	ror	r0
    1fae:	98 2f       	mov	r25, r24
    1fb0:	80 2d       	mov	r24, r0
    1fb2:	82 2b       	or	r24, r18
    1fb4:	8c 93       	st	X, r24
    TCCR2= ( TCCR2 & 0xF7) | ((Config_Ptr->mode&0x02)<<2);
    1fb6:	a5 e4       	ldi	r26, 0x45	; 69
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e5 e4       	ldi	r30, 0x45	; 69
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	28 2f       	mov	r18, r24
    1fc2:	27 7f       	andi	r18, 0xF7	; 247
    1fc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc8:	82 81       	ldd	r24, Z+2	; 0x02
    1fca:	88 2f       	mov	r24, r24
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	82 70       	andi	r24, 0x02	; 2
    1fd0:	90 70       	andi	r25, 0x00	; 0
    1fd2:	88 0f       	add	r24, r24
    1fd4:	99 1f       	adc	r25, r25
    1fd6:	88 0f       	add	r24, r24
    1fd8:	99 1f       	adc	r25, r25
    1fda:	82 2b       	or	r24, r18
    1fdc:	8c 93       	st	X, r24

    /* Initial Value for Timer0 */
    TCNT2 =Config_Ptr->initialValue ;
    1fde:	a4 e4       	ldi	r26, 0x44	; 68
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe6:	83 81       	ldd	r24, Z+3	; 0x03
    1fe8:	94 81       	ldd	r25, Z+4	; 0x04
    1fea:	8c 93       	st	X, r24
    /* Compare Value for Timer0 */
    OCR2=Config_Ptr->compareValue ;
    1fec:	a3 e4       	ldi	r26, 0x43	; 67
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff4:	85 81       	ldd	r24, Z+5	; 0x05
    1ff6:	96 81       	ldd	r25, Z+6	; 0x06
    1ff8:	8c 93       	st	X, r24
    /*  Timer0 overflow interrupt enable*/
    if(Config_Ptr->mode==0)
    1ffa:	e9 81       	ldd	r30, Y+1	; 0x01
    1ffc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ffe:	82 81       	ldd	r24, Z+2	; 0x02
    2000:	88 23       	and	r24, r24
    2002:	41 f4       	brne	.+16     	; 0x2014 <timer2_init+0xc4>
    TIMSK|=(1<<TOIE2);
    2004:	a9 e5       	ldi	r26, 0x59	; 89
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e9 e5       	ldi	r30, 0x59	; 89
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	80 64       	ori	r24, 0x40	; 64
    2010:	8c 93       	st	X, r24
    2012:	0c c0       	rjmp	.+24     	; 0x202c <timer2_init+0xdc>
    /*  Timer0 compare match interrupt enable*/
    else if(Config_Ptr->mode==2)
    2014:	e9 81       	ldd	r30, Y+1	; 0x01
    2016:	fa 81       	ldd	r31, Y+2	; 0x02
    2018:	82 81       	ldd	r24, Z+2	; 0x02
    201a:	82 30       	cpi	r24, 0x02	; 2
    201c:	39 f4       	brne	.+14     	; 0x202c <timer2_init+0xdc>
    TIMSK|=(1<<OCIE2);
    201e:	a9 e5       	ldi	r26, 0x59	; 89
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e9 e5       	ldi	r30, 0x59	; 89
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	80 68       	ori	r24, 0x80	; 128
    202a:	8c 93       	st	X, r24


}
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <timer2_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */
void timer2_setCallBack(void(*a_ptr)(void))
{
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	00 d0       	rcall	.+0      	; 0x203c <timer2_setCallBack+0x6>
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	9a 83       	std	Y+2, r25	; 0x02
    2042:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_timer2_callBackPtr= a_ptr;
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	9a 81       	ldd	r25, Y+2	; 0x02
    2048:	90 93 d5 00 	sts	0x00D5, r25
    204c:	80 93 d4 00 	sts	0x00D4, r24
}
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const USART_ConfigType * Config_Ptr)
{
    205a:	0f 93       	push	r16
    205c:	1f 93       	push	r17
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	00 d0       	rcall	.+0      	; 0x2064 <UART_init+0xa>
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	9a 83       	std	Y+2, r25	; 0x02
    206a:	89 83       	std	Y+1, r24	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    206c:	eb e2       	ldi	r30, 0x2B	; 43
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	82 e0       	ldi	r24, 0x02	; 2
    2072:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2074:	ea e2       	ldi	r30, 0x2A	; 42
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	88 e1       	ldi	r24, 0x18	; 24
    207a:	80 83       	st	Z, r24
	UCSRB=(UCSRB&0xFB)|(((Config_Ptr->ch_size)&04));
    207c:	aa e2       	ldi	r26, 0x2A	; 42
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	ea e2       	ldi	r30, 0x2A	; 42
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	98 2f       	mov	r25, r24
    2088:	9b 7f       	andi	r25, 0xFB	; 251
    208a:	e9 81       	ldd	r30, Y+1	; 0x01
    208c:	fa 81       	ldd	r31, Y+2	; 0x02
    208e:	82 81       	ldd	r24, Z+2	; 0x02
    2090:	84 70       	andi	r24, 0x04	; 4
    2092:	89 2b       	or	r24, r25
    2094:	8c 93       	st	X, r24
	 * UPM1:0  = Selected parity mode
	 * USBS    = Selected number of stop bits
	 * UCSZ1:0 = Selected character size  mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2096:	e0 e4       	ldi	r30, 0x40	; 64
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 e8       	ldi	r24, 0x80	; 128
    209c:	80 83       	st	Z, r24

	UCSRC=(UCSRC&0xF7)|(((Config_Ptr->stopBits)<<3));
    209e:	a0 e4       	ldi	r26, 0x40	; 64
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	e0 e4       	ldi	r30, 0x40	; 64
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	28 2f       	mov	r18, r24
    20aa:	27 7f       	andi	r18, 0xF7	; 247
    20ac:	e9 81       	ldd	r30, Y+1	; 0x01
    20ae:	fa 81       	ldd	r31, Y+2	; 0x02
    20b0:	81 81       	ldd	r24, Z+1	; 0x01
    20b2:	88 2f       	mov	r24, r24
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	88 0f       	add	r24, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	82 2b       	or	r24, r18
    20c4:	8c 93       	st	X, r24


	UCSRC=(UCSRC&0xF9)|((((Config_Ptr->ch_size)&03)<<1));
    20c6:	a0 e4       	ldi	r26, 0x40	; 64
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	e0 e4       	ldi	r30, 0x40	; 64
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	28 2f       	mov	r18, r24
    20d2:	29 7f       	andi	r18, 0xF9	; 249
    20d4:	e9 81       	ldd	r30, Y+1	; 0x01
    20d6:	fa 81       	ldd	r31, Y+2	; 0x02
    20d8:	82 81       	ldd	r24, Z+2	; 0x02
    20da:	88 2f       	mov	r24, r24
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	83 70       	andi	r24, 0x03	; 3
    20e0:	90 70       	andi	r25, 0x00	; 0
    20e2:	88 0f       	add	r24, r24
    20e4:	99 1f       	adc	r25, r25
    20e6:	82 2b       	or	r24, r18
    20e8:	8c 93       	st	X, r24

	UCSRC=(UCSRC&0xCF)|(((Config_Ptr->parity)<<4));
    20ea:	a0 e4       	ldi	r26, 0x40	; 64
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e0 e4       	ldi	r30, 0x40	; 64
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	28 2f       	mov	r18, r24
    20f6:	2f 7c       	andi	r18, 0xCF	; 207
    20f8:	e9 81       	ldd	r30, Y+1	; 0x01
    20fa:	fa 81       	ldd	r31, Y+2	; 0x02
    20fc:	80 81       	ld	r24, Z
    20fe:	88 2f       	mov	r24, r24
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	82 95       	swap	r24
    2104:	92 95       	swap	r25
    2106:	90 7f       	andi	r25, 0xF0	; 240
    2108:	98 27       	eor	r25, r24
    210a:	80 7f       	andi	r24, 0xF0	; 240
    210c:	98 27       	eor	r25, r24
    210e:	82 2b       	or	r24, r18
    2110:	8c 93       	st	X, r24



	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = (((F_CPU / (Config_Ptr->BAUD_RATE * 8))) - 1)>>8;
    2112:	00 e4       	ldi	r16, 0x40	; 64
    2114:	10 e0       	ldi	r17, 0x00	; 0
    2116:	e9 81       	ldd	r30, Y+1	; 0x01
    2118:	fa 81       	ldd	r31, Y+2	; 0x02
    211a:	83 81       	ldd	r24, Z+3	; 0x03
    211c:	94 81       	ldd	r25, Z+4	; 0x04
    211e:	a5 81       	ldd	r26, Z+5	; 0x05
    2120:	b6 81       	ldd	r27, Z+6	; 0x06
    2122:	88 0f       	add	r24, r24
    2124:	99 1f       	adc	r25, r25
    2126:	aa 1f       	adc	r26, r26
    2128:	bb 1f       	adc	r27, r27
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	aa 1f       	adc	r26, r26
    2130:	bb 1f       	adc	r27, r27
    2132:	88 0f       	add	r24, r24
    2134:	99 1f       	adc	r25, r25
    2136:	aa 1f       	adc	r26, r26
    2138:	bb 1f       	adc	r27, r27
    213a:	9c 01       	movw	r18, r24
    213c:	ad 01       	movw	r20, r26
    213e:	80 e4       	ldi	r24, 0x40	; 64
    2140:	92 e4       	ldi	r25, 0x42	; 66
    2142:	af e0       	ldi	r26, 0x0F	; 15
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	bc 01       	movw	r22, r24
    2148:	cd 01       	movw	r24, r26
    214a:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__udivmodsi4>
    214e:	da 01       	movw	r26, r20
    2150:	c9 01       	movw	r24, r18
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	a1 09       	sbc	r26, r1
    2156:	b1 09       	sbc	r27, r1
    2158:	89 2f       	mov	r24, r25
    215a:	9a 2f       	mov	r25, r26
    215c:	ab 2f       	mov	r26, r27
    215e:	bb 27       	eor	r27, r27
    2160:	f8 01       	movw	r30, r16
    2162:	80 83       	st	Z, r24
		UBRRL = (((F_CPU / (Config_Ptr->BAUD_RATE * 8))) - 1); //UBRRL=12;
    2164:	09 e2       	ldi	r16, 0x29	; 41
    2166:	10 e0       	ldi	r17, 0x00	; 0
    2168:	e9 81       	ldd	r30, Y+1	; 0x01
    216a:	fa 81       	ldd	r31, Y+2	; 0x02
    216c:	83 81       	ldd	r24, Z+3	; 0x03
    216e:	94 81       	ldd	r25, Z+4	; 0x04
    2170:	a5 81       	ldd	r26, Z+5	; 0x05
    2172:	b6 81       	ldd	r27, Z+6	; 0x06
    2174:	88 0f       	add	r24, r24
    2176:	99 1f       	adc	r25, r25
    2178:	aa 1f       	adc	r26, r26
    217a:	bb 1f       	adc	r27, r27
    217c:	88 0f       	add	r24, r24
    217e:	99 1f       	adc	r25, r25
    2180:	aa 1f       	adc	r26, r26
    2182:	bb 1f       	adc	r27, r27
    2184:	88 0f       	add	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	aa 1f       	adc	r26, r26
    218a:	bb 1f       	adc	r27, r27
    218c:	9c 01       	movw	r18, r24
    218e:	ad 01       	movw	r20, r26
    2190:	80 e4       	ldi	r24, 0x40	; 64
    2192:	92 e4       	ldi	r25, 0x42	; 66
    2194:	af e0       	ldi	r26, 0x0F	; 15
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	bc 01       	movw	r22, r24
    219a:	cd 01       	movw	r24, r26
    219c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__udivmodsi4>
    21a0:	da 01       	movw	r26, r20
    21a2:	c9 01       	movw	r24, r18
    21a4:	81 50       	subi	r24, 0x01	; 1
    21a6:	f8 01       	movw	r30, r16
    21a8:	80 83       	st	Z, r24
}
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	1f 91       	pop	r17
    21b4:	0f 91       	pop	r16
    21b6:	08 95       	ret

000021b8 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    21b8:	df 93       	push	r29
    21ba:	cf 93       	push	r28
    21bc:	0f 92       	push	r0
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
    21c2:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    21c4:	eb e2       	ldi	r30, 0x2B	; 43
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	88 2f       	mov	r24, r24
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	80 72       	andi	r24, 0x20	; 32
    21d0:	90 70       	andi	r25, 0x00	; 0
    21d2:	00 97       	sbiw	r24, 0x00	; 0
    21d4:	b9 f3       	breq	.-18     	; 0x21c4 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    21d6:	ec e2       	ldi	r30, 0x2C	; 44
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    21de:	0f 90       	pop	r0
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    21ee:	eb e2       	ldi	r30, 0x2B	; 43
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	88 23       	and	r24, r24
    21f6:	dc f7       	brge	.-10     	; 0x21ee <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    21f8:	ec e2       	ldi	r30, 0x2C	; 44
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
}
    21fe:	cf 91       	pop	r28
    2200:	df 91       	pop	r29
    2202:	08 95       	ret

00002204 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	00 d0       	rcall	.+0      	; 0x220a <UART_sendString+0x6>
    220a:	0f 92       	push	r0
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	9b 83       	std	Y+3, r25	; 0x03
    2212:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2214:	19 82       	std	Y+1, r1	; 0x01
    2216:	0e c0       	rjmp	.+28     	; 0x2234 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	28 2f       	mov	r18, r24
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	8a 81       	ldd	r24, Y+2	; 0x02
    2220:	9b 81       	ldd	r25, Y+3	; 0x03
    2222:	fc 01       	movw	r30, r24
    2224:	e2 0f       	add	r30, r18
    2226:	f3 1f       	adc	r31, r19
    2228:	80 81       	ld	r24, Z
    222a:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <UART_sendByte>
		i++;
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	8f 5f       	subi	r24, 0xFF	; 255
    2232:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	28 2f       	mov	r18, r24
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	8a 81       	ldd	r24, Y+2	; 0x02
    223c:	9b 81       	ldd	r25, Y+3	; 0x03
    223e:	fc 01       	movw	r30, r24
    2240:	e2 0f       	add	r30, r18
    2242:	f3 1f       	adc	r31, r19
    2244:	80 81       	ld	r24, Z
    2246:	88 23       	and	r24, r24
    2248:	39 f7       	brne	.-50     	; 0x2218 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	cf 91       	pop	r28
    2252:	df 91       	pop	r29
    2254:	08 95       	ret

00002256 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2256:	0f 93       	push	r16
    2258:	1f 93       	push	r17
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	00 d0       	rcall	.+0      	; 0x2260 <UART_receiveString+0xa>
    2260:	0f 92       	push	r0
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
    2266:	9b 83       	std	Y+3, r25	; 0x03
    2268:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    226a:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	28 2f       	mov	r18, r24
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	9b 81       	ldd	r25, Y+3	; 0x03
    2276:	8c 01       	movw	r16, r24
    2278:	02 0f       	add	r16, r18
    227a:	13 1f       	adc	r17, r19
    227c:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <UART_recieveByte>
    2280:	f8 01       	movw	r30, r16
    2282:	80 83       	st	Z, r24
    2284:	0f c0       	rjmp	.+30     	; 0x22a4 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	8f 5f       	subi	r24, 0xFF	; 255
    228a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	9b 81       	ldd	r25, Y+3	; 0x03
    2296:	8c 01       	movw	r16, r24
    2298:	02 0f       	add	r16, r18
    229a:	13 1f       	adc	r17, r19
    229c:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <UART_recieveByte>
    22a0:	f8 01       	movw	r30, r16
    22a2:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	28 2f       	mov	r18, r24
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	8a 81       	ldd	r24, Y+2	; 0x02
    22ac:	9b 81       	ldd	r25, Y+3	; 0x03
    22ae:	fc 01       	movw	r30, r24
    22b0:	e2 0f       	add	r30, r18
    22b2:	f3 1f       	adc	r31, r19
    22b4:	80 81       	ld	r24, Z
    22b6:	83 32       	cpi	r24, 0x23	; 35
    22b8:	31 f7       	brne	.-52     	; 0x2286 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	28 2f       	mov	r18, r24
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	9b 81       	ldd	r25, Y+3	; 0x03
    22c4:	fc 01       	movw	r30, r24
    22c6:	e2 0f       	add	r30, r18
    22c8:	f3 1f       	adc	r31, r19
    22ca:	10 82       	st	Z, r1
}
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	1f 91       	pop	r17
    22d8:	0f 91       	pop	r16
    22da:	08 95       	ret

000022dc <__udivmodsi4>:
    22dc:	a1 e2       	ldi	r26, 0x21	; 33
    22de:	1a 2e       	mov	r1, r26
    22e0:	aa 1b       	sub	r26, r26
    22e2:	bb 1b       	sub	r27, r27
    22e4:	fd 01       	movw	r30, r26
    22e6:	0d c0       	rjmp	.+26     	; 0x2302 <__udivmodsi4_ep>

000022e8 <__udivmodsi4_loop>:
    22e8:	aa 1f       	adc	r26, r26
    22ea:	bb 1f       	adc	r27, r27
    22ec:	ee 1f       	adc	r30, r30
    22ee:	ff 1f       	adc	r31, r31
    22f0:	a2 17       	cp	r26, r18
    22f2:	b3 07       	cpc	r27, r19
    22f4:	e4 07       	cpc	r30, r20
    22f6:	f5 07       	cpc	r31, r21
    22f8:	20 f0       	brcs	.+8      	; 0x2302 <__udivmodsi4_ep>
    22fa:	a2 1b       	sub	r26, r18
    22fc:	b3 0b       	sbc	r27, r19
    22fe:	e4 0b       	sbc	r30, r20
    2300:	f5 0b       	sbc	r31, r21

00002302 <__udivmodsi4_ep>:
    2302:	66 1f       	adc	r22, r22
    2304:	77 1f       	adc	r23, r23
    2306:	88 1f       	adc	r24, r24
    2308:	99 1f       	adc	r25, r25
    230a:	1a 94       	dec	r1
    230c:	69 f7       	brne	.-38     	; 0x22e8 <__udivmodsi4_loop>
    230e:	60 95       	com	r22
    2310:	70 95       	com	r23
    2312:	80 95       	com	r24
    2314:	90 95       	com	r25
    2316:	9b 01       	movw	r18, r22
    2318:	ac 01       	movw	r20, r24
    231a:	bd 01       	movw	r22, r26
    231c:	cf 01       	movw	r24, r30
    231e:	08 95       	ret

00002320 <__prologue_saves__>:
    2320:	2f 92       	push	r2
    2322:	3f 92       	push	r3
    2324:	4f 92       	push	r4
    2326:	5f 92       	push	r5
    2328:	6f 92       	push	r6
    232a:	7f 92       	push	r7
    232c:	8f 92       	push	r8
    232e:	9f 92       	push	r9
    2330:	af 92       	push	r10
    2332:	bf 92       	push	r11
    2334:	cf 92       	push	r12
    2336:	df 92       	push	r13
    2338:	ef 92       	push	r14
    233a:	ff 92       	push	r15
    233c:	0f 93       	push	r16
    233e:	1f 93       	push	r17
    2340:	cf 93       	push	r28
    2342:	df 93       	push	r29
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	ca 1b       	sub	r28, r26
    234a:	db 0b       	sbc	r29, r27
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	cd bf       	out	0x3d, r28	; 61
    2356:	09 94       	ijmp

00002358 <__epilogue_restores__>:
    2358:	2a 88       	ldd	r2, Y+18	; 0x12
    235a:	39 88       	ldd	r3, Y+17	; 0x11
    235c:	48 88       	ldd	r4, Y+16	; 0x10
    235e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2360:	6e 84       	ldd	r6, Y+14	; 0x0e
    2362:	7d 84       	ldd	r7, Y+13	; 0x0d
    2364:	8c 84       	ldd	r8, Y+12	; 0x0c
    2366:	9b 84       	ldd	r9, Y+11	; 0x0b
    2368:	aa 84       	ldd	r10, Y+10	; 0x0a
    236a:	b9 84       	ldd	r11, Y+9	; 0x09
    236c:	c8 84       	ldd	r12, Y+8	; 0x08
    236e:	df 80       	ldd	r13, Y+7	; 0x07
    2370:	ee 80       	ldd	r14, Y+6	; 0x06
    2372:	fd 80       	ldd	r15, Y+5	; 0x05
    2374:	0c 81       	ldd	r16, Y+4	; 0x04
    2376:	1b 81       	ldd	r17, Y+3	; 0x03
    2378:	aa 81       	ldd	r26, Y+2	; 0x02
    237a:	b9 81       	ldd	r27, Y+1	; 0x01
    237c:	ce 0f       	add	r28, r30
    237e:	d1 1d       	adc	r29, r1
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	ed 01       	movw	r28, r26
    238c:	08 95       	ret

0000238e <itoa>:
    238e:	fb 01       	movw	r30, r22
    2390:	9f 01       	movw	r18, r30
    2392:	e8 94       	clt
    2394:	42 30       	cpi	r20, 0x02	; 2
    2396:	c4 f0       	brlt	.+48     	; 0x23c8 <itoa+0x3a>
    2398:	45 32       	cpi	r20, 0x25	; 37
    239a:	b4 f4       	brge	.+44     	; 0x23c8 <itoa+0x3a>
    239c:	4a 30       	cpi	r20, 0x0A	; 10
    239e:	29 f4       	brne	.+10     	; 0x23aa <itoa+0x1c>
    23a0:	97 fb       	bst	r25, 7
    23a2:	1e f4       	brtc	.+6      	; 0x23aa <itoa+0x1c>
    23a4:	90 95       	com	r25
    23a6:	81 95       	neg	r24
    23a8:	9f 4f       	sbci	r25, 0xFF	; 255
    23aa:	64 2f       	mov	r22, r20
    23ac:	77 27       	eor	r23, r23
    23ae:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__udivmodhi4>
    23b2:	80 5d       	subi	r24, 0xD0	; 208
    23b4:	8a 33       	cpi	r24, 0x3A	; 58
    23b6:	0c f0       	brlt	.+2      	; 0x23ba <itoa+0x2c>
    23b8:	89 5d       	subi	r24, 0xD9	; 217
    23ba:	81 93       	st	Z+, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	00 97       	sbiw	r24, 0x00	; 0
    23c0:	a1 f7       	brne	.-24     	; 0x23aa <itoa+0x1c>
    23c2:	16 f4       	brtc	.+4      	; 0x23c8 <itoa+0x3a>
    23c4:	5d e2       	ldi	r21, 0x2D	; 45
    23c6:	51 93       	st	Z+, r21
    23c8:	10 82       	st	Z, r1
    23ca:	c9 01       	movw	r24, r18
    23cc:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <strrev>

000023d0 <strrev>:
    23d0:	dc 01       	movw	r26, r24
    23d2:	fc 01       	movw	r30, r24
    23d4:	67 2f       	mov	r22, r23
    23d6:	71 91       	ld	r23, Z+
    23d8:	77 23       	and	r23, r23
    23da:	e1 f7       	brne	.-8      	; 0x23d4 <strrev+0x4>
    23dc:	32 97       	sbiw	r30, 0x02	; 2
    23de:	04 c0       	rjmp	.+8      	; 0x23e8 <strrev+0x18>
    23e0:	7c 91       	ld	r23, X
    23e2:	6d 93       	st	X+, r22
    23e4:	70 83       	st	Z, r23
    23e6:	62 91       	ld	r22, -Z
    23e8:	ae 17       	cp	r26, r30
    23ea:	bf 07       	cpc	r27, r31
    23ec:	c8 f3       	brcs	.-14     	; 0x23e0 <strrev+0x10>
    23ee:	08 95       	ret

000023f0 <__udivmodhi4>:
    23f0:	aa 1b       	sub	r26, r26
    23f2:	bb 1b       	sub	r27, r27
    23f4:	51 e1       	ldi	r21, 0x11	; 17
    23f6:	07 c0       	rjmp	.+14     	; 0x2406 <__udivmodhi4_ep>

000023f8 <__udivmodhi4_loop>:
    23f8:	aa 1f       	adc	r26, r26
    23fa:	bb 1f       	adc	r27, r27
    23fc:	a6 17       	cp	r26, r22
    23fe:	b7 07       	cpc	r27, r23
    2400:	10 f0       	brcs	.+4      	; 0x2406 <__udivmodhi4_ep>
    2402:	a6 1b       	sub	r26, r22
    2404:	b7 0b       	sbc	r27, r23

00002406 <__udivmodhi4_ep>:
    2406:	88 1f       	adc	r24, r24
    2408:	99 1f       	adc	r25, r25
    240a:	5a 95       	dec	r21
    240c:	a9 f7       	brne	.-22     	; 0x23f8 <__udivmodhi4_loop>
    240e:	80 95       	com	r24
    2410:	90 95       	com	r25
    2412:	bc 01       	movw	r22, r24
    2414:	cd 01       	movw	r24, r26
    2416:	08 95       	ret

00002418 <_exit>:
    2418:	f8 94       	cli

0000241a <__stop_program>:
    241a:	ff cf       	rjmp	.-2      	; 0x241a <__stop_program>
